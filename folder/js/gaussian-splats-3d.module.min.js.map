{"version":3,"file":"gaussian-splats-3d.module.min.js","sources":["../src/loaders/UncompressedSplatArray.js","../src/AbortablePromise.js","../src/Util.js","../src/loaders/SplatBuffer.js","../src/loaders/ply/CompressedPlyParser.js","../src/loaders/ply/PlyParser.js","../src/loaders/SplatPartitioner.js","../src/loaders/SplatBufferGenerator.js","../src/loaders/LoaderStatus.js","../src/Constants.js","../src/loaders/ply/PlyLoader.js","../src/loaders/splat/SplatParser.js","../src/loaders/splat/SplatLoader.js","../src/loaders/ksplat/KSplatLoader.js","../src/loaders/SceneFormat.js","../src/loaders/Utils.js","../src/OrbitControls.js","../src/ui/LoadingSpinner.js","../src/ui/Util.js","../src/ui/LoadingProgressBar.js","../src/ui/InfoPanel.js","../src/ArrowHelper.js","../src/SceneHelper.js","../src/raycaster/Ray.js","../src/raycaster/Hit.js","../src/raycaster/Raycaster.js","../src/SplatScene.js","../src/splattree/SplatTree.js","../src/three-shim/WebGLExtensions.js","../src/three-shim/WebGLCapabilities.js","../src/SceneRevealMode.js","../src/LogLevel.js","../src/SplatMesh.js","../src/worker/SortWorker.js","../src/webxr/WebXRMode.js","../src/webxr/VRButton.js","../src/webxr/ARButton.js","../src/RenderMode.js","../src/Viewer.js","../src/worker/sorter.wasm","../src/DropInViewer.js"],"sourcesContent":["\nexport class UncompressedSplatArray {\n\n    static OFFSET = {\n        X: 0,\n        Y: 1,\n        Z: 2,\n        SCALE0: 3,\n        SCALE1: 4,\n        SCALE2: 5,\n        ROTATION0: 6,\n        ROTATION1: 7,\n        ROTATION2: 8,\n        ROTATION3: 9,\n        FDC0: 10,\n        FDC1: 11,\n        FDC2: 12,\n        OPACITY: 13\n    };\n\n    constructor() {\n        this.splats = [];\n        this.splatCount = 0;\n    }\n\n    static createSplat() {\n        return [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0];\n    }\n\n    addSplat(splat) {\n        this.splats.push(splat);\n        this.splatCount++;\n    }\n\n    getSplat(index) {\n        return this.splats[index];\n    }\n\n    addDefaultSplat() {\n        const newSplat = UncompressedSplatArray.createSplat();\n        this.addSplat(newSplat);\n        return newSplat;\n    }\n\n    addSplatFromComonents(x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity) {\n        const newSplat = [x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity];\n        this.addSplat(newSplat);\n        return newSplat;\n    }\n\n    addSplatFromArray(src, srcIndex) {\n        const srcSplat = src.splats[srcIndex];\n        this.addSplatFromComonents(srcSplat[0], srcSplat[1], srcSplat[2], srcSplat[3], srcSplat[4], srcSplat[5],\n                                   srcSplat[6], srcSplat[7], srcSplat[8], srcSplat[9],\n                                   srcSplat[10], srcSplat[11], srcSplat[12], srcSplat[13]);\n    }\n}\n","/**\n * AbortablePromise: A quick & dirty wrapper for JavaScript's Promise class that allows the underlying\n * asynchronous operation to be cancelled. It is only meant for simple situations where no complex promise\n * chaining or merging occurs. It needs a significant amount of work to truly replicate the full\n * functionality of JavaScript's Promise class. Look at Util.fetchWithProgress() for example usage.\n *\n * This class was primarily added to allow splat scene downloads to be cancelled. It has not been tested\n * very thoroughly and the implementation is kinda janky. If you can at all help it, please avoid using it :)\n */\nexport class AbortablePromise {\n\n    static idGen = 0;\n\n    constructor(promiseFunc, abortHandler) {\n\n        let promiseResolve;\n        let promiseReject;\n        this.promise = new Promise((resolve, reject) => {\n            promiseResolve = resolve.bind(this);\n            promiseReject = reject.bind(this);\n        });\n\n        const resolve = (...args) => {\n            promiseResolve(...args);\n        };\n\n        const reject = (error) => {\n            promiseReject(error);\n        };\n\n        promiseFunc(resolve.bind(this), reject.bind(this));\n        this.abortHandler = abortHandler;\n        this.id = AbortablePromise.idGen++;\n    }\n\n    then(onResolve) {\n        return new AbortablePromise((resolve, reject) => {\n            this.promise = this.promise\n            .then((...args) => {\n                const onResolveResult = onResolve(...args);\n                if (onResolveResult instanceof Promise || onResolveResult instanceof AbortablePromise) {\n                    onResolveResult.then((...args2) => {\n                        resolve(...args2);\n                    });\n                } else {\n                    resolve(onResolveResult);\n                }\n            })\n            .catch((error) => {\n                reject(error);\n            });\n        }, this.abortHandler);\n    }\n\n    catch(onFail) {\n        return new AbortablePromise((resolve) => {\n            this.promise = this.promise.then((...args) => {\n                resolve(...args);\n            })\n            .catch(onFail);\n        }, this.abortHandler);\n    }\n\n    abort() {\n        if (this.abortHandler) this.abortHandler();\n    }\n\n}\n\nexport class AbortedPromiseError extends Error {\n\n    constructor(msg) {\n        super(msg);\n    }\n\n}\n","import { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\n\nexport const floatToHalf = function() {\n\n    const floatView = new Float32Array(1);\n    const int32View = new Int32Array(floatView.buffer);\n\n    return function(val) {\n        floatView[0] = val;\n        const x = int32View[0];\n\n        let bits = (x >> 16) & 0x8000;\n        let m = (x >> 12) & 0x07ff;\n        const e = (x >> 23) & 0xff;\n\n        if (e < 103) return bits;\n\n        if (e > 142) {\n            bits |= 0x7c00;\n            bits |= ((e == 255) ? 0 : 1) && (x & 0x007fffff);\n            return bits;\n        }\n\n        if (e < 113) {\n            m |= 0x0800;\n            bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\n            return bits;\n        }\n\n        bits |= (( e - 112) << 10) | (m >> 1);\n        bits += m & 1;\n        return bits;\n    };\n\n}();\n\nexport const uintEncodedFloat = function() {\n\n    const floatView = new Float32Array(1);\n    const int32View = new Int32Array(floatView.buffer);\n\n    return function(f) {\n        floatView[0] = f;\n        return int32View[0];\n    };\n\n}();\n\nexport const rgbaToInteger = function(r, g, b, a) {\n    return r + (g << 8) + (b << 16) + (a << 24);\n};\n\nexport const rgbaArrayToInteger = function(arr, offset) {\n    return arr[offset] + (arr[offset + 1] << 8) + (arr[offset + 2] << 16) + (arr[offset + 3] << 24);\n};\n\nexport const fetchWithProgress = function(path, onProgress, saveChunks = true) {\n\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    let aborted = false;\n    let rejectFunc = null;\n    const abortHandler = () => {\n        abortController.abort();\n        rejectFunc(new AbortedPromiseError('Fetch aborted.'));\n        aborted = true;\n    };\n\n    return new AbortablePromise((resolve, reject) => {\n        rejectFunc = reject;\n        fetch(path, { signal })\n        .then(async (data) => {\n            const reader = data.body.getReader();\n            let bytesDownloaded = 0;\n            let _fileSize = data.headers.get('Content-Length');\n            let fileSize = _fileSize ? parseInt(_fileSize) : undefined;\n\n            const chunks = [];\n\n            while (!aborted) {\n                try {\n                    const { value: chunk, done } = await reader.read();\n                    if (done) {\n                        if (onProgress) {\n                            onProgress(100, '100%', chunk, fileSize);\n                        }\n                        if (saveChunks) {\n                            const buffer = new Blob(chunks).arrayBuffer();\n                            resolve(buffer);\n                        } else {\n                            resolve();\n                        }\n                        break;\n                    }\n                    bytesDownloaded += chunk.length;\n                    let percent;\n                    let percentLabel;\n                    if (fileSize !== undefined) {\n                        percent = bytesDownloaded / fileSize * 100;\n                        percentLabel = `${percent.toFixed(2)}%`;\n                    }\n                    if (saveChunks) chunks.push(chunk);\n                    if (onProgress) {\n                        const cancelSaveChucnks = onProgress(percent, percentLabel, chunk, fileSize);\n                        if (cancelSaveChucnks) saveChunks = false;\n                    }\n                } catch (error) {\n                    reject(error);\n                    break;\n                }\n            }\n        });\n    }, abortHandler);\n\n};\n\nexport const clamp = function(val, min, max) {\n    return Math.max(Math.min(val, max), min);\n};\n\nexport const getCurrentTime = function() {\n    return performance.now() / 1000;\n};\n\nexport const disposeAllMeshes = (object3D) => {\n    if (object3D.geometry) {\n        object3D.geometry.dispose();\n        object3D.geometry = null;\n    }\n    if (object3D.material) {\n        object3D.material.dispose();\n        object3D.material = null;\n    }\n    if (object3D.children) {\n        for (let child of object3D.children) {\n            disposeAllMeshes(child);\n        }\n    }\n};\n\nexport const delayedExecute = (func, fast) => {\n    return new Promise((resolve) => {\n        window.setTimeout(() => {\n            resolve(func());\n        }, fast ? 1 : 50);\n    });\n};\n","import * as THREE from 'three';\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\nimport { clamp } from '../Util.js';\n\n/**\n * SplatBuffer: Container for splat data from a single scene/file and capable of (mediocre) compression.\n */\nexport class SplatBuffer {\n\n    static CurrentMajorVersion = 0;\n    static CurrentMinorVersion = 1;\n\n    static CenterComponentCount = 3;\n    static ScaleComponentCount = 3;\n    static RotationComponentCount = 4;\n    static ColorComponentCount = 4;\n    static CovarianceComponentCount = 6;\n\n    static SplatScaleOffsetFloat = 3;\n    static SplatRotationOffsetFloat = 6;\n\n    static CompressionLevels = {\n        0: {\n            BytesPerCenter: 12,\n            BytesPerColor: 4,\n            BytesPerScale: 12,\n            BytesPerRotation: 16,\n            BytesPerSplat: 44,\n            ScaleRange: 1\n        },\n        1: {\n            BytesPerCenter: 6,\n            BytesPerColor: 4,\n            BytesPerScale: 6,\n            BytesPerRotation: 8,\n            BytesPerSplat: 24,\n            ScaleRange: 32767\n        }\n    };\n\n    static CovarianceSizeFloats = 6;\n\n    static HeaderSizeBytes = 4096;\n    static SectionHeaderSizeBytes = 1024;\n\n    static BucketStorageSizeBytes = 12;\n    static BucketStorageSizeFloats = 3;\n\n    static BucketBlockSize = 5.0;\n    static BucketSize = 256;\n\n    constructor(bufferData, secLoadedCountsToMax = true) {\n        this.constructFromBuffer(bufferData, secLoadedCountsToMax);\n    }\n\n    fbf(f) {\n        if (this.compressionLevel === 0) {\n            return f;\n        } else {\n            return THREE.DataUtils.fromHalfFloat(f);\n        }\n    };\n\n    getSplatCount() {\n        return this.splatCount;\n    }\n\n    getMaxSplatCount() {\n        return this.maxSplatCount;\n    }\n\n    getBucketIndex(section, localSplatIndex) {\n        let bucketIndex;\n        const maxSplatIndexInFullBuckets = section.fullBucketCount * section.bucketSize;\n        if (localSplatIndex < maxSplatIndexInFullBuckets) {\n            bucketIndex = Math.floor(localSplatIndex / section.bucketSize);\n        } else {\n            let bucketSplatIndex = maxSplatIndexInFullBuckets;\n            bucketIndex = section.fullBucketCount;\n            let partiallyFullBucketIndex = 0;\n            while (bucketSplatIndex < section.splatCount) {\n                let currentPartiallyFilledBucketSize = section.partiallyFilledBucketLengths[partiallyFullBucketIndex];\n                if (localSplatIndex >= bucketSplatIndex && localSplatIndex < bucketSplatIndex + currentPartiallyFilledBucketSize) {\n                    break;\n                }\n                bucketSplatIndex += currentPartiallyFilledBucketSize;\n                bucketIndex++;\n                partiallyFullBucketIndex++;\n            }\n        }\n        return bucketIndex;\n    }\n\n    getSplatCenter(globalSplatIndex, outCenter, transform) {\n        const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\n        const section = this.sections[sectionIndex];\n        const localSplatIndex = globalSplatIndex - section.splatCountOffset;\n        if (this.compressionLevel === 1) {\n            const centerBase = localSplatIndex * this.uint16PerSplat;\n            const bucketIndex = this.getBucketIndex(section, localSplatIndex);\n            const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\n            const sf = section.compressionScaleFactor;\n            const sr = section.compressionScaleRange;\n            outCenter.x = (section.dataArrayUint16[centerBase] - sr) * sf + section.bucketArray[bucketBase];\n            outCenter.y = (section.dataArrayUint16[centerBase + 1] - sr) * sf + section.bucketArray[bucketBase + 1];\n            outCenter.z = (section.dataArrayUint16[centerBase + 2] - sr) * sf + section.bucketArray[bucketBase + 2];\n        } else {\n            const centerBase = localSplatIndex * this.float32PerSplat;\n            outCenter.x = section.dataArrayFloat32[centerBase];\n            outCenter.y = section.dataArrayFloat32[centerBase + 1];\n            outCenter.z = section.dataArrayFloat32[centerBase + 2];\n        }\n        if (transform) outCenter.applyMatrix4(transform);\n    }\n\n    getSplatScaleAndRotation = function() {\n\n        const scaleMatrix = new THREE.Matrix4();\n        const rotationMatrix = new THREE.Matrix4();\n        const tempMatrix = new THREE.Matrix4();\n        const tempPosition = new THREE.Vector3();\n\n        return function(index, outScale, outRotation, transform) {\n            const sectionIndex = this.globalSplatIndexToSectionMap[index];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = index - section.splatCountOffset;\n\n            const floatsPerSplat = this.compressionLevel === 1 ? this.uint16PerSplat : this.float32PerSplat;\n\n            const sectionFloatArray = this.compressionLevel === 1 ? section.dataArrayUint16 : section.dataArrayFloat32;\n            const splatFloatBase = floatsPerSplat * localSplatIndex;\n\n            const scaleBase = splatFloatBase + SplatBuffer.SplatScaleOffsetFloat;\n            outScale.set(this.fbf(sectionFloatArray[scaleBase]),\n                         this.fbf(sectionFloatArray[scaleBase + 1]),\n                         this.fbf(sectionFloatArray[scaleBase + 2]));\n\n            const rotationBase = splatFloatBase + SplatBuffer.SplatRotationOffsetFloat;\n            outRotation.set(this.fbf(sectionFloatArray[rotationBase + 1]),\n                            this.fbf(sectionFloatArray[rotationBase + 2]),\n                            this.fbf(sectionFloatArray[rotationBase + 3]),\n                            this.fbf(sectionFloatArray[rotationBase]));\n\n            if (transform) {\n                scaleMatrix.makeScale(outScale.x, outScale.y, outScale.z);\n                rotationMatrix.makeRotationFromQuaternion(outRotation);\n                tempMatrix.copy(scaleMatrix).multiply(rotationMatrix).multiply(transform);\n                tempMatrix.decompose(tempPosition, outRotation, outScale);\n            }\n        };\n\n    }();\n\n    getSplatColor(globalSplatIndex, outColor, transform) {\n        const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\n        const section = this.sections[sectionIndex];\n        const localSplatIndex = globalSplatIndex - section.splatCountOffset;\n        const colorBase = this.bytesPerSplat * localSplatIndex + this.bytesPerCenter + this.bytesPerScale + this.bytesPerRotation;\n        outColor.set(section.dataArrayUint8[colorBase], section.dataArrayUint8[colorBase + 1],\n                     section.dataArrayUint8[colorBase + 2], section.dataArrayUint8[colorBase + 3]);\n        // TODO: apply transform for spherical harmonics\n    }\n\n    fillSplatCenterArray(outCenterArray, transform, srcFrom, srcTo, destFrom) {\n        const splatCount = this.splatCount;\n\n        srcFrom = srcFrom || 0;\n        srcTo = srcTo || splatCount - 1;\n        if (destFrom === undefined) destFrom = srcFrom;\n\n        const center = new THREE.Vector3();\n        for (let i = srcFrom; i <= srcTo; i++) {\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = i - section.splatCountOffset;\n            const centerDestBase = (i - srcFrom + destFrom) * SplatBuffer.CenterComponentCount;\n            if (this.compressionLevel === 1) {\n                const centerBase = localSplatIndex * this.uint16PerSplat;\n                const bucketIndex = this.getBucketIndex(section, localSplatIndex);\n                const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\n                const sf = section.compressionScaleFactor;\n                const sr = section.compressionScaleRange;\n                center.x = (section.dataArrayUint16[centerBase] - sr) * sf + section.bucketArray[bucketBase];\n                center.y = (section.dataArrayUint16[centerBase + 1] - sr) * sf + section.bucketArray[bucketBase + 1];\n                center.z = (section.dataArrayUint16[centerBase + 2] - sr) * sf + section.bucketArray[bucketBase + 2];\n            } else {\n                const centerBase = localSplatIndex * this.float32PerSplat;\n                center.x = section.dataArrayFloat32[centerBase];\n                center.y = section.dataArrayFloat32[centerBase + 1];\n                center.z = section.dataArrayFloat32[centerBase + 2];\n            }\n            if (transform) {\n                center.applyMatrix4(transform);\n            }\n            outCenterArray[centerDestBase] = center.x;\n            outCenterArray[centerDestBase + 1] = center.y;\n            outCenterArray[centerDestBase + 2] = center.z;\n        }\n    }\n\n    static computeCovariance = function() {\n\n        const tempMatrix4 = new THREE.Matrix4();\n        const scaleMatrix = new THREE.Matrix3();\n        const rotationMatrix = new THREE.Matrix3();\n        const covarianceMatrix = new THREE.Matrix3();\n        const transformedCovariance = new THREE.Matrix3();\n        const transform3x3 = new THREE.Matrix3();\n        const transform3x3Transpose = new THREE.Matrix3();\n        const thf = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\n\n        return function(scale, rotation, transform, outCovariance, outOffset = 0, desiredOutputCompressionLevel) {\n\n            tempMatrix4.makeScale(scale.x, scale.y, scale.z);\n            scaleMatrix.setFromMatrix4(tempMatrix4);\n\n            tempMatrix4.makeRotationFromQuaternion(rotation);\n            rotationMatrix.setFromMatrix4(tempMatrix4);\n\n            covarianceMatrix.copy(rotationMatrix).multiply(scaleMatrix);\n            transformedCovariance.copy(covarianceMatrix).transpose().premultiply(covarianceMatrix);\n\n            if (transform) {\n                transform3x3.setFromMatrix4(transform);\n                transform3x3Transpose.copy(transform3x3).transpose();\n                transformedCovariance.multiply(transform3x3Transpose);\n                transformedCovariance.premultiply(transform3x3);\n            }\n\n            if (desiredOutputCompressionLevel === 1) {\n                outCovariance[outOffset] = thf(transformedCovariance.elements[0]);\n                outCovariance[outOffset + 1] = thf(transformedCovariance.elements[3]);\n                outCovariance[outOffset + 2] = thf(transformedCovariance.elements[6]);\n                outCovariance[outOffset + 3] = thf(transformedCovariance.elements[4]);\n                outCovariance[outOffset + 4] = thf(transformedCovariance.elements[7]);\n                outCovariance[outOffset + 5] = thf(transformedCovariance.elements[8]);\n            } else {\n                outCovariance[outOffset] = transformedCovariance.elements[0];\n                outCovariance[outOffset + 1] = transformedCovariance.elements[3];\n                outCovariance[outOffset + 2] = transformedCovariance.elements[6];\n                outCovariance[outOffset + 3] = transformedCovariance.elements[4];\n                outCovariance[outOffset + 4] = transformedCovariance.elements[7];\n                outCovariance[outOffset + 5] = transformedCovariance.elements[8];\n            }\n\n        };\n\n    }();\n\n    fillSplatCovarianceArray(covarianceArray, transform, srcFrom, srcTo, destFrom, desiredOutputCompressionLevel) {\n        const splatCount = this.splatCount;\n\n        const scale = new THREE.Vector3();\n        const rotation = new THREE.Quaternion();\n\n        srcFrom = srcFrom || 0;\n        srcTo = srcTo || splatCount - 1;\n        if (destFrom === undefined) destFrom = srcFrom;\n        const floatsPerSplat = this.compressionLevel === 1 ? this.uint16PerSplat : this.float32PerSplat;\n\n        for (let i = srcFrom; i <= srcTo; i++) {\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = i - section.splatCountOffset;\n\n            const sectionFloatArray = this.compressionLevel === 1 ? section.dataArrayUint16 : section.dataArrayFloat32;\n            const splatFloatBase = floatsPerSplat * localSplatIndex;\n            const covarianceDestBase = (i - srcFrom + destFrom) * SplatBuffer.CovarianceComponentCount;\n\n            const scaleBase = splatFloatBase + SplatBuffer.SplatScaleOffsetFloat;\n            scale.set(this.fbf(sectionFloatArray[scaleBase]),\n                      this.fbf(sectionFloatArray[scaleBase + 1]),\n                      this.fbf(sectionFloatArray[scaleBase + 2]));\n\n            const rotationBase = splatFloatBase + SplatBuffer.SplatRotationOffsetFloat;\n            rotation.set(this.fbf(sectionFloatArray[rotationBase + 1]),\n                         this.fbf(sectionFloatArray[rotationBase + 2]),\n                         this.fbf(sectionFloatArray[rotationBase + 3]),\n                         this.fbf(sectionFloatArray[rotationBase]));\n\n            SplatBuffer.computeCovariance(scale, rotation, transform, covarianceArray, covarianceDestBase, desiredOutputCompressionLevel);\n        }\n    }\n\n    fillSplatColorArray(outColorArray, minimumAlpha, transform, srcFrom, srcTo, destFrom) {\n        const splatCount = this.splatCount;\n\n        srcFrom = srcFrom || 0;\n        srcTo = srcTo || splatCount - 1;\n        if (destFrom === undefined) destFrom = srcFrom;\n        const splatColorOffset = this.bytesPerCenter + this.bytesPerScale + this.bytesPerRotation;\n\n        for (let i = srcFrom; i <= srcTo; i++) {\n\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = i - section.splatCountOffset;\n\n            const colorSrcBase = this.bytesPerSplat * localSplatIndex + splatColorOffset;\n            const colorDestBase = (i - srcFrom + destFrom) * SplatBuffer.ColorComponentCount;\n\n            let alpha = section.dataArrayUint8[colorSrcBase + 3];\n            alpha = (alpha >= minimumAlpha) ? alpha : 0;\n\n            outColorArray[colorDestBase] = section.dataArrayUint8[colorSrcBase];\n            outColorArray[colorDestBase + 1] = section.dataArrayUint8[colorSrcBase + 1];\n            outColorArray[colorDestBase + 2] = section.dataArrayUint8[colorSrcBase + 2];\n            outColorArray[colorDestBase + 3] = alpha;\n\n            // TODO: implement application of transform for spherical harmonics\n        }\n    }\n\n    static parseHeader(buffer) {\n        const headerArrayUint8 = new Uint8Array(buffer, 0, SplatBuffer.HeaderSizeBytes);\n        const headerArrayUint16 = new Uint16Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 2);\n        const headerArrayUint32 = new Uint32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\n        const headerArrayFloat32 = new Float32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\n        const versionMajor = headerArrayUint8[0];\n        const versionMinor = headerArrayUint8[1];\n        const maxSectionCount = headerArrayUint32[1];\n        const sectionCount = headerArrayUint32[2];\n        const maxSplatCount = headerArrayUint32[3];\n        const splatCount = headerArrayUint32[4];\n        const compressionLevel = headerArrayUint16[10];\n        const sceneCenter = new THREE.Vector3(headerArrayFloat32[6], headerArrayFloat32[7], headerArrayFloat32[8]);\n\n        return {\n            versionMajor,\n            versionMinor,\n            maxSectionCount,\n            sectionCount,\n            maxSplatCount,\n            splatCount,\n            compressionLevel,\n            sceneCenter\n        };\n    }\n\n    static writeHeaderCountsToBuffer(sectionCount, splatCount, buffer) {\n        const headerArrayUint32 = new Uint32Array(buffer);\n        headerArrayUint32[2] = sectionCount;\n        headerArrayUint32[4] = splatCount;\n    }\n\n    static writeHeaderToBuffer(header, buffer) {\n        const headerArrayUint8 = new Uint8Array(buffer);\n        const headerArrayUint32 = new Uint32Array(buffer);\n        const headerArrayFloat32 = new Float32Array(buffer);\n        const headerArrayUint16 = new Uint16Array(buffer);\n        headerArrayUint8[0] = header.versionMajor;\n        headerArrayUint8[1] = header.versionMinor;\n        headerArrayUint8[2] = 0; // unused for now\n        headerArrayUint8[3] = 0; // unused for now\n        headerArrayUint32[1] = header.maxSectionCount;\n        headerArrayUint32[2] = header.sectionCount;\n        headerArrayUint32[3] = header.maxSplatCount;\n        headerArrayUint32[4] = header.splatCount;\n        headerArrayUint16[10] = header.compressionLevel;\n        headerArrayFloat32[6] = header.sceneCenter.x;\n        headerArrayFloat32[7] = header.sceneCenter.y;\n        headerArrayFloat32[8] = header.sceneCenter.z;\n    }\n\n    static parseSectionHeaders(header, buffer, offset = 0, secLoadedCountsToMax) {\n        const compressionLevel = header.compressionLevel;\n        const bytesPerCenter = SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\n        const bytesPerColor = SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\n        const bytesPerScale = SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\n        const bytesPerRotation = SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\n\n        const maxSectionCount = header.maxSectionCount;\n        const sectionHeaderArrayUint16 = new Uint16Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 2);\n        const sectionHeaderArrayUint32 = new Uint32Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 4);\n        const sectionHeaderArrayFloat32 = new Float32Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 4);\n\n        const sectionHeaders = [];\n        let sectionHeaderBase = 0;\n        let sectionHeaderBaseUint16 = sectionHeaderBase / 2;\n        let sectionHeaderBaseUint32 = sectionHeaderBase / 4;\n        let sectionBase = SplatBuffer.HeaderSizeBytes + header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes;\n        let splatCountOffset = 0;\n        for (let i = 0; i < maxSectionCount; i++) {\n            const maxSplatCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 1];\n            const bucketSize = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 2];\n            const bucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 3];\n            const bucketBlockSize = sectionHeaderArrayFloat32[sectionHeaderBaseUint32 + 4];\n            const halfBucketBlockSize = bucketBlockSize / 2.0;\n            const bucketStorageSizeBytes = sectionHeaderArrayUint16[sectionHeaderBaseUint16 + 10];\n            const compressionScaleRange = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 6] ||\n                                          SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\n            const fullBucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 8];\n            const partiallyFilledBucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 9];\n            const bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;\n            const bucketsStorageSizeBytes = bucketStorageSizeBytes * bucketCount + bucketsMetaDataSizeBytes;\n\n            const splatDataStorageSizeBytes = (bytesPerCenter + bytesPerScale + bytesPerRotation + bytesPerColor) * maxSplatCount;\n            const storageSizeBytes = splatDataStorageSizeBytes + bucketsStorageSizeBytes;\n            const sectionHeader = {\n                splatCountOffset: splatCountOffset,\n                splatCount: secLoadedCountsToMax ? maxSplatCount : 0,\n                maxSplatCount: maxSplatCount,\n                bucketSize: bucketSize,\n                bucketCount: bucketCount,\n                bucketBlockSize: bucketBlockSize,\n                halfBucketBlockSize: halfBucketBlockSize,\n                bucketStorageSizeBytes: bucketStorageSizeBytes,\n                bucketsStorageSizeBytes: bucketsStorageSizeBytes,\n                splatDataStorageSizeBytes: splatDataStorageSizeBytes,\n                storageSizeBytes: storageSizeBytes,\n                compressionScaleRange: compressionScaleRange,\n                compressionScaleFactor: halfBucketBlockSize / compressionScaleRange,\n                base: sectionBase,\n                bucketsBase: sectionBase + bucketsMetaDataSizeBytes,\n                dataBase: sectionBase + bucketsStorageSizeBytes,\n                fullBucketCount: fullBucketCount,\n                partiallyFilledBucketCount: partiallyFilledBucketCount\n            };\n            sectionHeaders[i] = sectionHeader;\n            sectionBase += storageSizeBytes;\n            sectionHeaderBase += SplatBuffer.SectionHeaderSizeBytes;\n            sectionHeaderBaseUint16 = sectionHeaderBase / 2;\n            sectionHeaderBaseUint32 = sectionHeaderBase / 4;\n            splatCountOffset += maxSplatCount;\n        }\n\n        return sectionHeaders;\n    }\n\n\n    static writeSectionHeaderToBuffer(sectionHeader, compressionLevel, buffer, offset = 0) {\n        const sectionHeadeArrayUint16 = new Uint16Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 2);\n        const sectionHeadeArrayUint32 = new Uint32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\n        const sectionHeadeArrayFloat32 = new Float32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\n\n        sectionHeadeArrayUint32[0] = sectionHeader.splatCount;\n        sectionHeadeArrayUint32[1] = sectionHeader.maxSplatCount;\n        sectionHeadeArrayUint32[2] = compressionLevel === 1 ? sectionHeader.bucketSize : 0;\n        sectionHeadeArrayUint32[3] = compressionLevel === 1 ? sectionHeader.bucketCount : 0;\n        sectionHeadeArrayFloat32[4] = compressionLevel === 1 ? sectionHeader.bucketBlockSize : 0.0;\n        sectionHeadeArrayUint16[10] = compressionLevel === 1 ? SplatBuffer.BucketStorageSizeBytes : 0;\n        sectionHeadeArrayUint32[6] = compressionLevel === 1 ? sectionHeader.compressionScaleRange : 0;\n        sectionHeadeArrayUint32[7] = sectionHeader.storageSizeBytes;\n        sectionHeadeArrayUint32[8] = compressionLevel === 1 ? sectionHeader.fullBucketCount : 0;\n        sectionHeadeArrayUint32[9] = compressionLevel === 1 ? sectionHeader.partiallyFilledBucketCount : 0;\n    }\n\n    static writeSectionHeaderSplatCountToBuffer(splatCount, buffer, offset = 0) {\n        const sectionHeadeArrayUint32 = new Uint32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\n        sectionHeadeArrayUint32[0] = splatCount;\n    }\n\n    constructFromBuffer(bufferData, secLoadedCountsToMax) {\n        this.bufferData = bufferData;\n\n        this.globalSplatIndexToLocalSplatIndexMap = [];\n        this.globalSplatIndexToSectionMap = [];\n\n        const header = SplatBuffer.parseHeader(this.bufferData);\n        this.versionMajor = header.versionMajor;\n        this.versionMinor = header.versionMinor;\n        this.maxSectionCount = header.maxSectionCount;\n        this.sectionCount = secLoadedCountsToMax ? header.maxSectionCount : 0;\n        this.maxSplatCount = header.maxSplatCount;\n        this.splatCount = secLoadedCountsToMax ? header.maxSplatCount : 0;\n        this.compressionLevel = header.compressionLevel;\n        this.sceneCenter = new THREE.Vector3().copy(header.sceneCenter);\n\n        this.bytesPerCenter = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerCenter;\n        this.bytesPerScale = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerScale;\n        this.bytesPerRotation = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerRotation;\n        this.bytesPerColor = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerColor;\n        this.bytesPerSplat = this.bytesPerCenter + this.bytesPerScale + this.bytesPerRotation + this.bytesPerColor;\n\n        this.float32PerSplat = this.bytesPerSplat / 4;\n        this.uint32PerSplat = this.bytesPerSplat / 4;\n        this.uint16PerSplat = this.bytesPerSplat / 2;\n\n        this.sections = SplatBuffer.parseSectionHeaders(header, this.bufferData, SplatBuffer.HeaderSizeBytes, secLoadedCountsToMax);\n\n        this.linkBufferArrays();\n        this.buildMaps();\n    }\n\n\n    linkBufferArrays() {\n        for (let i = 0; i < this.maxSectionCount; i++) {\n            const section = this.sections[i];\n            section.dataArrayUint8 = new Uint8Array(this.bufferData, section.dataBase, section.maxSplatCount * this.bytesPerSplat);\n            section.dataArrayUint16 = new Uint16Array(this.bufferData, section.dataBase, section.maxSplatCount * this.uint16PerSplat);\n            section.dataArrayUint32 = new Uint32Array(this.bufferData, section.dataBase, section.maxSplatCount * this.uint32PerSplat);\n            section.dataArrayFloat32 = new Float32Array(this.bufferData, section.dataBase, section.maxSplatCount * this.float32PerSplat);\n            section.bucketArray = new Float32Array(this.bufferData, section.bucketsBase,\n                                                   section.bucketCount * SplatBuffer.BucketStorageSizeFloats);\n            if (section.partiallyFilledBucketCount > 0) {\n                section.partiallyFilledBucketLengths = new Uint32Array(this.bufferData, section.base,\n                                                                       section.partiallyFilledBucketCount);\n            }\n        }\n    }\n\n    buildMaps() {\n        let cumulativeSplatCount = 0;\n        for (let i = 0; i < this.maxSectionCount; i++) {\n            const section = this.sections[i];\n            for (let j = 0; j < section.maxSplatCount; j++) {\n                const globalSplatIndex = cumulativeSplatCount + j;\n                this.globalSplatIndexToLocalSplatIndexMap[globalSplatIndex] = j;\n                this.globalSplatIndexToSectionMap[globalSplatIndex] = i;\n            }\n            cumulativeSplatCount += section.maxSplatCount;\n        }\n    }\n\n    updateLoadedCounts(newSectionCount, newSplatCount) {\n        SplatBuffer.writeHeaderCountsToBuffer(newSectionCount, newSplatCount, this.bufferData);\n        this.sectionCount = newSectionCount;\n        this.splatCount = newSplatCount;\n    }\n\n    updateSectionLoadedCounts(sectionIndex, newSplatCount) {\n        const sectionHeaderOffset = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * sectionIndex;\n        SplatBuffer.writeSectionHeaderSplatCountToBuffer(newSplatCount, this.bufferData, sectionHeaderOffset);\n        this.sections[sectionIndex].splatCount = newSplatCount;\n    }\n\n    static generateFromUncompressedSplatArrays(splatArrays, minimumAlpha, compressionLevel,\n                                               sceneCenter, blockSize, bucketSize, options = []) {\n\n        const bytesPerCenter = SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\n        const bytesPerScale = SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\n        const bytesPerRotation = SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\n        const bytesPerColor = SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\n        const bytesPerSplat = bytesPerCenter + bytesPerScale + bytesPerRotation + bytesPerColor;\n        const compressionScaleRange = SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\n\n        const sectionBuffers = [];\n        const sectionHeaderBuffers = [];\n        let totalSplatCount = 0;\n\n        const tempRotation = new THREE.Quaternion();\n        const thf = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\n\n        for (let sa = 0; sa < splatArrays.length; sa ++) {\n            const splatArray = splatArrays[sa];\n\n            const sectionOptions = options[sa] || {};\n\n            const sectionBlockSize = (sectionOptions.blockSizeFactor || 1) * (blockSize || SplatBuffer.BucketBlockSize);\n            const sectionBucketSize = Math.ceil((sectionOptions.bucketSizeFactor || 1) * (bucketSize || SplatBuffer.BucketSize));\n\n            const validSplats = new UncompressedSplatArray();\n\n            for (let i = 0; i < splatArray.splatCount; i++) {\n                const targetSplat = splatArray.splats[i];\n                let alpha;\n                if (targetSplat[UncompressedSplatArray.OFFSET.OPACITY]) {\n                    alpha = targetSplat[UncompressedSplatArray.OFFSET.OPACITY];\n                } else {\n                    alpha = 255;\n                }\n                if (alpha >= minimumAlpha) {\n                    validSplats.addSplatFromComonents(targetSplat[UncompressedSplatArray.OFFSET.X],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.Y],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.Z],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.SCALE0],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.SCALE1],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.SCALE2],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.ROTATION0],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.ROTATION1],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.ROTATION2],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.ROTATION3],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.FDC0],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.FDC1],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.FDC2],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.OPACITY]);\n                }\n            }\n\n            const bucketInfo = SplatBuffer.computeBucketsForUncompressedSplatArray(validSplats, sectionBlockSize, sectionBucketSize);\n            const fullBucketCount = bucketInfo.fullBuckets.length;\n            const partiallyFullBucketLengths = bucketInfo.partiallyFullBuckets.map((bucket) => bucket.splats.length);\n            const partiallyFilledBucketCount = partiallyFullBucketLengths.length;\n            const buckets = [...bucketInfo.fullBuckets, ...bucketInfo.partiallyFullBuckets];\n\n            const sectionDataSizeBytes = validSplats.splats.length * bytesPerSplat;\n            const bucketMetaDataSizeBytes = partiallyFilledBucketCount * 4;\n            const bucketDataBytes = compressionLevel === 1 ? buckets.length *\n                                                             SplatBuffer.BucketStorageSizeBytes + bucketMetaDataSizeBytes : 0;\n            const sectionSizeBytes = sectionDataSizeBytes + bucketDataBytes;\n            const sectionBuffer = new ArrayBuffer(sectionSizeBytes);\n\n            const blockHalfSize = sectionBlockSize / 2.0;\n            const compressionScaleFactor = compressionScaleRange / blockHalfSize;\n            const doubleCompressionScaleRange = compressionScaleRange * 2 + 1;\n\n            const bucketCenter = new THREE.Vector3();\n            const bucketCenterDelta = new THREE.Vector3();\n            let outSplatCount = 0;\n            for (let b = 0; b < buckets.length; b++) {\n                const bucket = buckets[b];\n                bucketCenter.fromArray(bucket.center);\n                for (let i = 0; i < bucket.splats.length; i++) {\n                    let row = bucket.splats[i];\n                    const targetSplat = validSplats.splats[row];\n\n                    const centerBase = bucketDataBytes + outSplatCount * bytesPerSplat;\n                    const scaleBase = centerBase + bytesPerCenter;\n                    const rotationBase = scaleBase + bytesPerScale;\n                    const colorBase = rotationBase + bytesPerRotation;\n                    if (compressionLevel === 0) {\n                        const center = new Float32Array(sectionBuffer, centerBase, SplatBuffer.CenterComponentCount);\n                        const rot = new Float32Array(sectionBuffer, rotationBase, SplatBuffer.RotationComponentCount);\n                        const scale = new Float32Array(sectionBuffer, scaleBase, SplatBuffer.ScaleComponentCount);\n                        if (targetSplat[UncompressedSplatArray.OFFSET.SCALE0] !== undefined) {\n                            tempRotation.set(targetSplat[UncompressedSplatArray.OFFSET.ROTATION0],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION1],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION2],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION3]);\n                            tempRotation.normalize();\n                            rot.set([tempRotation.x, tempRotation.y, tempRotation.z, tempRotation.w]);\n                            scale.set([targetSplat[UncompressedSplatArray.OFFSET.SCALE0],\n                                       targetSplat[UncompressedSplatArray.OFFSET.SCALE1],\n                                       targetSplat[UncompressedSplatArray.OFFSET.SCALE2]]);\n                        } else {\n                            rot.set([1.0, 0.0, 0.0, 0.0]);\n                            scale.set([0.01, 0.01, 0.01]);\n                        }\n                        center.set([targetSplat[UncompressedSplatArray.OFFSET.X],\n                                    targetSplat[UncompressedSplatArray.OFFSET.Y],\n                                    targetSplat[UncompressedSplatArray.OFFSET.Z]]);\n                    } else {\n                        const center = new Uint16Array(sectionBuffer, centerBase, SplatBuffer.CenterComponentCount);\n                        const rot = new Uint16Array(sectionBuffer, rotationBase, SplatBuffer.RotationComponentCount);\n                        const scale = new Uint16Array(sectionBuffer, scaleBase, SplatBuffer.ScaleComponentCount);\n\n                        if (targetSplat[UncompressedSplatArray.OFFSET.SCALE0] !== undefined) {\n                            tempRotation.set(targetSplat[UncompressedSplatArray.OFFSET.ROTATION0],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION1],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION2],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION3]);\n                            tempRotation.normalize();\n                            rot.set([thf(tempRotation.x), thf(tempRotation.y), thf(tempRotation.z), thf(tempRotation.w)]);\n                            scale.set([thf(targetSplat[UncompressedSplatArray.OFFSET.SCALE0]),\n                                       thf(targetSplat[UncompressedSplatArray.OFFSET.SCALE1]),\n                                       thf(targetSplat[UncompressedSplatArray.OFFSET.SCALE2])]);\n                        } else {\n                            rot.set([thf(1.), 0, 0, 0]);\n                            scale.set([thf(0.01), thf(0.01), thf(0.01)]);\n                        }\n                        bucketCenterDelta.set(targetSplat[UncompressedSplatArray.OFFSET.X],\n                                              targetSplat[UncompressedSplatArray.OFFSET.Y],\n                                              targetSplat[UncompressedSplatArray.OFFSET.Z]).sub(bucketCenter);\n                        bucketCenterDelta.x = Math.round(bucketCenterDelta.x * compressionScaleFactor) + compressionScaleRange;\n                        bucketCenterDelta.x = clamp(bucketCenterDelta.x, 0, doubleCompressionScaleRange);\n                        bucketCenterDelta.y = Math.round(bucketCenterDelta.y * compressionScaleFactor) + compressionScaleRange;\n                        bucketCenterDelta.y = clamp(bucketCenterDelta.y, 0, doubleCompressionScaleRange);\n                        bucketCenterDelta.z = Math.round(bucketCenterDelta.z * compressionScaleFactor) + compressionScaleRange;\n                        bucketCenterDelta.z = clamp(bucketCenterDelta.z, 0, doubleCompressionScaleRange);\n                        center.set([bucketCenterDelta.x, bucketCenterDelta.y, bucketCenterDelta.z]);\n                    }\n\n                    const rgba = new Uint8ClampedArray(sectionBuffer, colorBase, 4);\n\n                    if (targetSplat[UncompressedSplatArray.OFFSET.FDC0] !== undefined) {\n                        rgba.set([targetSplat[UncompressedSplatArray.OFFSET.FDC0],\n                                  targetSplat[UncompressedSplatArray.OFFSET.FDC1],\n                                  targetSplat[UncompressedSplatArray.OFFSET.FDC2]]);\n                    } else {\n                        rgba.set([255, 0, 0]);\n                    }\n                    if (targetSplat[UncompressedSplatArray.OFFSET.OPACITY] !== undefined) {\n                        rgba[3] = targetSplat[UncompressedSplatArray.OFFSET.OPACITY];\n                    } else {\n                        rgba[3] = 255;\n                    }\n\n                    outSplatCount++;\n                }\n            }\n            totalSplatCount += outSplatCount;\n\n            if (compressionLevel === 1) {\n                const bucketMetaDataArray = new Uint32Array(sectionBuffer);\n                for (let pfb = 0; pfb < partiallyFullBucketLengths.length; pfb ++) {\n                    bucketMetaDataArray[pfb] = partiallyFullBucketLengths[pfb];\n                }\n                const bucketArray = new Float32Array(sectionBuffer, bucketMetaDataSizeBytes,\n                                                     buckets.length * SplatBuffer.BucketStorageSizeFloats);\n                for (let b = 0; b < buckets.length; b++) {\n                    const bucket = buckets[b];\n                    const base = b * 3;\n                    bucketArray[base] = bucket.center[0];\n                    bucketArray[base + 1] = bucket.center[1];\n                    bucketArray[base + 2] = bucket.center[2];\n                }\n            }\n            sectionBuffers.push(sectionBuffer);\n\n            const sectionHeaderBuffer = new ArrayBuffer(SplatBuffer.SectionHeaderSizeBytes);\n            SplatBuffer.writeSectionHeaderToBuffer({\n                maxSplatCount: outSplatCount,\n                splatCount: outSplatCount,\n                bucketSize: sectionBucketSize,\n                bucketCount: buckets.length,\n                bucketBlockSize: sectionBlockSize,\n                compressionScaleRange: compressionScaleRange,\n                storageSizeBytes: sectionSizeBytes,\n                fullBucketCount: fullBucketCount,\n                partiallyFilledBucketCount: partiallyFilledBucketCount\n            }, compressionLevel, sectionHeaderBuffer, 0);\n            sectionHeaderBuffers.push(sectionHeaderBuffer);\n\n        }\n\n        let sectionsCumulativeSizeBytes = 0;\n        for (let sectionBuffer of sectionBuffers) sectionsCumulativeSizeBytes += sectionBuffer.byteLength;\n        const unifiedBufferSize = SplatBuffer.HeaderSizeBytes +\n                                  SplatBuffer.SectionHeaderSizeBytes * sectionBuffers.length + sectionsCumulativeSizeBytes;\n        const unifiedBuffer = new ArrayBuffer(unifiedBufferSize);\n\n        SplatBuffer.writeHeaderToBuffer({\n            versionMajor: 0,\n            versionMinor: 1,\n            maxSectionCount: sectionBuffers.length,\n            sectionCount: sectionBuffers.length,\n            maxSplatCount: totalSplatCount,\n            splatCount: totalSplatCount,\n            compressionLevel: compressionLevel,\n            sceneCenter: sceneCenter\n        }, unifiedBuffer);\n\n        let currentUnifiedBase = SplatBuffer.HeaderSizeBytes;\n        for (let sectionHeaderBuffer of sectionHeaderBuffers) {\n            new Uint8Array(unifiedBuffer, currentUnifiedBase, SplatBuffer.SectionHeaderSizeBytes).set(new Uint8Array(sectionHeaderBuffer));\n            currentUnifiedBase += SplatBuffer.SectionHeaderSizeBytes;\n        }\n\n        for (let sectionBuffer of sectionBuffers) {\n            new Uint8Array(unifiedBuffer, currentUnifiedBase, sectionBuffer.byteLength).set(new Uint8Array(sectionBuffer));\n            currentUnifiedBase += sectionBuffer.byteLength;\n        }\n\n        const splatBuffer = new SplatBuffer(unifiedBuffer);\n        return splatBuffer;\n    }\n\n    static computeBucketsForUncompressedSplatArray(splatArray, blockSize, bucketSize) {\n        let splatCount = splatArray.splatCount;\n        const halfBlockSize = blockSize / 2.0;\n\n        const min = new THREE.Vector3();\n        const max = new THREE.Vector3();\n\n        for (let i = 0; i < splatCount; i++) {\n            const targetSplat = splatArray.splats[i];\n            const center = [targetSplat[UncompressedSplatArray.OFFSET.X],\n                            targetSplat[UncompressedSplatArray.OFFSET.Y],\n                            targetSplat[UncompressedSplatArray.OFFSET.Z]];\n            if (i === 0 || center[0] < min.x) min.x = center[0];\n            if (i === 0 || center[0] > max.x) max.x = center[0];\n            if (i === 0 || center[1] < min.y) min.y = center[1];\n            if (i === 0 || center[1] > max.y) max.y = center[1];\n            if (i === 0 || center[2] < min.z) min.z = center[2];\n            if (i === 0 || center[2] > max.z) max.z = center[2];\n        }\n\n        const dimensions = new THREE.Vector3().copy(max).sub(min);\n        const yBlocks = Math.ceil(dimensions.y / blockSize);\n        const zBlocks = Math.ceil(dimensions.z / blockSize);\n\n        const blockCenter = new THREE.Vector3();\n        const fullBuckets = [];\n        const partiallyFullBuckets = {};\n\n        for (let i = 0; i < splatCount; i++) {\n            const targetSplat = splatArray.splats[i];\n            const center = [targetSplat[UncompressedSplatArray.OFFSET.X],\n                            targetSplat[UncompressedSplatArray.OFFSET.Y],\n                            targetSplat[UncompressedSplatArray.OFFSET.Z]];\n            const xBlock = Math.floor((center[0] - min.x) / blockSize);\n            const yBlock = Math.floor((center[1] - min.y) / blockSize);\n            const zBlock = Math.floor((center[2] - min.z) / blockSize);\n\n            blockCenter.x = xBlock * blockSize + min.x + halfBlockSize;\n            blockCenter.y = yBlock * blockSize + min.y + halfBlockSize;\n            blockCenter.z = zBlock * blockSize + min.z + halfBlockSize;\n\n            const bucketId = xBlock * (yBlocks * zBlocks) + yBlock * zBlocks + zBlock;\n            let bucket = partiallyFullBuckets[bucketId];\n            if (!bucket) {\n                partiallyFullBuckets[bucketId] = bucket = {\n                    'splats': [],\n                    'center': blockCenter.toArray()\n                };\n            }\n\n            bucket.splats.push(i);\n            if (bucket.splats.length >= bucketSize) {\n                fullBuckets.push(bucket);\n                partiallyFullBuckets[bucketId] = null;\n            }\n        }\n\n        const partiallyFullBucketArray = [];\n        for (let bucketId in partiallyFullBuckets) {\n            if (partiallyFullBuckets.hasOwnProperty(bucketId)) {\n                const bucket = partiallyFullBuckets[bucketId];\n                if (bucket) {\n                    partiallyFullBucketArray.push(bucket);\n                }\n            }\n        }\n\n        return {\n            'fullBuckets': fullBuckets,\n            'partiallyFullBuckets': partiallyFullBucketArray,\n        };\n    }\n\n}\n","import { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { clamp } from '../../Util.js';\nimport * as THREE from 'three';\n\nconst HeaderMagicBytes = new Uint8Array([112, 108, 121, 10]);\nconst HeaderEndTokenBytes = new Uint8Array([10, 101, 110, 100, 95, 104, 101, 97, 100, 101, 114, 10]);\nconst HeaderEndToken = 'end_header';\n\nconst DataTypeMap = new Map([\n  ['char', Int8Array],\n  ['uchar', Uint8Array],\n  ['short', Int16Array],\n  ['ushort', Uint16Array],\n  ['int', Int32Array],\n  ['uint', Uint32Array],\n  ['float', Float32Array],\n  ['double', Float64Array],\n]);\n\nconst unpackUnorm = (value, bits) => {\n  const t = (1 << bits) - 1;\n  return (value & t) / t;\n};\n\nconst unpack111011 = (result, value) => {\n  result.x = unpackUnorm(value >>> 21, 11);\n  result.y = unpackUnorm(value >>> 11, 10);\n  result.z = unpackUnorm(value, 11);\n};\n\nconst unpack8888 = (result, value) => {\n  result.x = unpackUnorm(value >>> 24, 8);\n  result.y = unpackUnorm(value >>> 16, 8);\n  result.z = unpackUnorm(value >>> 8, 8);\n  result.w = unpackUnorm(value, 8);\n};\n\n// unpack quaternion with 2,10,10,10 format (largest element, 3x10bit element)\nconst unpackRot = (result, value) => {\n  const norm = 1.0 / (Math.sqrt(2) * 0.5);\n  const a = (unpackUnorm(value >>> 20, 10) - 0.5) * norm;\n  const b = (unpackUnorm(value >>> 10, 10) - 0.5) * norm;\n  const c = (unpackUnorm(value, 10) - 0.5) * norm;\n  const m = Math.sqrt(1.0 - (a * a + b * b + c * c));\n\n  switch (value >>> 30) {\n    case 0:\n      result.set(m, a, b, c);\n      break;\n    case 1:\n      result.set(a, m, b, c);\n      break;\n    case 2:\n      result.set(a, b, m, c);\n      break;\n    case 3:\n      result.set(a, b, c, m);\n      break;\n  }\n};\n\nconst lerp = (a, b, t) => {\n  return a * (1 - t) + b * t;\n};\n\nconst getElementPropStorage = (element, name) => {\n  return element.properties.find((p) => p.name === name && p.storage)\n    ?.storage;\n};\n\nexport class CompressedPlyParser {\n\n  static decodeHeaderText(headerText) {\n\n    let element;\n    let chunkElement;\n    let vertexElement;\n\n    const headerLines = headerText.split('\\n').filter((line) => !line.startsWith('comment '));\n\n    let bytesPerSplat = 0;\n    let done = false;\n    for (let i = 1; i < headerLines.length; ++i) {\n      const words = headerLines[i].split(' ');\n\n      switch (words[0]) {\n        case 'format':\n          if (words[1] !== 'binary_little_endian') {\n            throw new Error('Unsupported ply format');\n          }\n          break;\n        case 'element':\n          element = {\n            name: words[1],\n            count: parseInt(words[2], 10),\n            properties: [],\n            storageSizeBytes: 0\n          };\n          if (element.name === 'chunk') chunkElement = element;\n          else if (element.name === 'vertex') vertexElement = element;\n          break;\n        case 'property': {\n          if (!DataTypeMap.has(words[1])) {\n            throw new Error(\n              `Unrecognized property data type '${words[1]}' in ply header`\n            );\n          }\n          const StorageType = DataTypeMap.get(words[1]);\n          const storageSizeByes = StorageType.BYTES_PER_ELEMENT * element.count;\n          if (element.name === 'vertex') bytesPerSplat += StorageType.BYTES_PER_ELEMENT;\n          element.properties.push({\n            type: words[1],\n            name: words[2],\n            storage: null,\n            byteSize: StorageType.BYTES_PER_ELEMENT,\n            storageSizeByes: storageSizeByes\n          });\n          element.storageSizeBytes += storageSizeByes;\n          break;\n        }\n        case HeaderEndToken:\n          done = true;\n        break;\n        default:\n          throw new Error(\n            `Unrecognized header value '${words[0]}' in ply header`\n          );\n      }\n      if (done) break;\n    }\n\n    return {\n      'chunkElement': chunkElement,\n      'vertexElement': vertexElement,\n      'bytesPerSplat': bytesPerSplat,\n      'headerSizeBytes': headerText.indexOf(HeaderEndToken) + HeaderEndToken.length + 1,\n    };\n  }\n\n  static decodeHeader(plyBuffer) {\n\n    /**\n     * Searches for the first occurrence of a sequence within a buffer.\n     * @example\n     * find(new Uint8Array([1, 2, 3, 4]), new Uint8Array([3, 4])); // 2\n     * @param {Uint8Array} buf - The buffer in which to search.\n     * @param {Uint8Array} search - The sequence to search for.\n     * @return {number} The index of the first occurrence of the search sequence in the buffer, or -1 if not found.\n     */\n    const find = (buf, search) => {\n      const endIndex = buf.length - search.length;\n      let i;\n      let j;\n      for (i = 0; i <= endIndex; ++i) {\n        for (j = 0; j < search.length; ++j) {\n          if (buf[i + j] !== search[j]) {\n            break;\n          }\n        }\n        if (j === search.length) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n    /**\n     * Checks if array 'a' starts with the same elements as array 'b'.\n     * @example\n     * startsWith(new Uint8Array([1, 2, 3, 4]), new Uint8Array([1, 2])); // true\n     * @param {Uint8Array} a - The array to check against.\n     * @param {Uint8Array} b - The array of elements to look for at the start of 'a'.\n     * @return {boolean} - True if 'a' starts with all elements of 'b', otherwise false.\n     */\n    const startsWith = (a, b) => {\n      if (a.length < b.length) {\n        return false;\n      }\n\n      for (let i = 0; i < b.length; ++i) {\n        if (a[i] !== b[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    let buf = new Uint8Array(plyBuffer);\n    let endHeaderTokenOffset;\n\n    if (buf.length >= HeaderMagicBytes.length && !startsWith(buf, HeaderMagicBytes)) {\n      throw new Error('Invalid PLY header');\n    }\n\n    endHeaderTokenOffset = find(buf, HeaderEndTokenBytes);\n    if (endHeaderTokenOffset === -1) {\n      throw new Error('End of PLY header not found');\n    }\n\n    const headerText = new TextDecoder('ascii').decode(\n      buf.slice(0, endHeaderTokenOffset)\n    );\n\n    const {chunkElement, vertexElement, bytesPerSplat} = CompressedPlyParser.decodeHeaderText(headerText);\n\n    return {\n      'headerSizeBytes': endHeaderTokenOffset + HeaderEndTokenBytes.length,\n      'bytesPerSplat': bytesPerSplat,\n      'chunkElement': chunkElement,\n      'vertexElement': vertexElement\n    };\n  }\n\n  static readElementData(element, readBuffer, readOffset, fromIndex, toIndex, propertyFilter = null) {\n\n    let dataView = readBuffer instanceof DataView ? readBuffer : new DataView(readBuffer);\n\n    fromIndex = fromIndex || 0;\n    toIndex = toIndex || element.count - 1;\n    for (let e = fromIndex; e <= toIndex; ++e) {\n      for (let j = 0; j < element.properties.length; ++j) {\n        const property = element.properties[j];\n\n        const StorageType = DataTypeMap.get(property.type);\n        const requiredStorageSizeBytes = StorageType.BYTES_PER_ELEMENT * element.count;\n        if ((!property.storage || property.storage.byteLength < requiredStorageSizeBytes) &&\n            (!propertyFilter || propertyFilter(property.name))) {\n          property.storage = new StorageType(element.count);\n        }\n\n        if (property.storage) {\n          switch (property.type) {\n            case 'char':\n              property.storage[e] = dataView.getInt8(readOffset);\n              break;\n            case 'uchar':\n              property.storage[e] = dataView.getUint8(readOffset);\n              break;\n            case 'short':\n              property.storage[e] = dataView.getInt16(readOffset, true);\n              break;\n            case 'ushort':\n              property.storage[e] = dataView.getUint16(readOffset, true);\n              break;\n            case 'int':\n              property.storage[e] = dataView.getInt32(readOffset, true);\n              break;\n            case 'uint':\n              property.storage[e] = dataView.getUint32(readOffset, true);\n              break;\n            case 'float':\n              property.storage[e] = dataView.getFloat32(readOffset, true);\n              break;\n            case 'double':\n              property.storage[e] = dataView.getFloat64(readOffset, true);\n              break;\n          }\n        }\n\n        readOffset += property.byteSize;\n      }\n    }\n\n    return readOffset;\n  }\n\n  static readPly(plyBuffer, propertyFilter = null) {\n\n    const header = CompressedPlyParser.decodeHeader(plyBuffer);\n\n    let readIndex = CompressedPlyParser.readElementData(header.chunkElement, plyBuffer, header.headerSizeBytes, null, null, propertyFilter);\n    CompressedPlyParser.readElementData(header.vertexElement, plyBuffer, readIndex, null, null, propertyFilter);\n\n    return {\n      'chunkElement': header.chunkElement,\n      'vertexElement': header.vertexElement\n    };\n  }\n\n  static getElementStorageArrays(chunkElement, vertexElement) {\n    const minX = getElementPropStorage(chunkElement, 'min_x');\n    const minY = getElementPropStorage(chunkElement, 'min_y');\n    const minZ = getElementPropStorage(chunkElement, 'min_z');\n    const maxX = getElementPropStorage(chunkElement, 'max_x');\n    const maxY = getElementPropStorage(chunkElement, 'max_y');\n    const maxZ = getElementPropStorage(chunkElement, 'max_z');\n    const minScaleX = getElementPropStorage(chunkElement, 'min_scale_x');\n    const minScaleY = getElementPropStorage(chunkElement, 'min_scale_y');\n    const minScaleZ = getElementPropStorage(chunkElement, 'min_scale_z');\n    const maxScaleX = getElementPropStorage(chunkElement, 'max_scale_x');\n    const maxScaleY = getElementPropStorage(chunkElement, 'max_scale_y');\n    const maxScaleZ = getElementPropStorage(chunkElement, 'max_scale_z');\n    const position = getElementPropStorage(vertexElement, 'packed_position');\n    const rotation = getElementPropStorage(vertexElement, 'packed_rotation');\n    const scale = getElementPropStorage(vertexElement, 'packed_scale');\n    const color = getElementPropStorage(vertexElement, 'packed_color');\n    return {\n      positionExtremes: {\n        minX, maxX,\n        minY, maxY,\n        minZ, maxZ\n      },\n      scaleExtremes: {\n        minScaleX, maxScaleX, minScaleY,\n        maxScaleY, minScaleZ, maxScaleZ\n      },\n      position,\n      rotation,\n      scale,\n      color\n    };\n  }\n\n  static decompressSplat = function() {\n\n    const p = new THREE.Vector3();\n    const r = new THREE.Quaternion();\n    const s = new THREE.Vector3();\n    const c = new THREE.Vector4();\n\n    const OFFSET = UncompressedSplatArray.OFFSET;\n\n    return function(index, chunkSplatIndexOffset, positionArray, positionExtremes, scaleArray, scaleExtremes,\n                    rotationArray, colorArray, outSplat) {\n      outSplat = outSplat || UncompressedSplatArray.createSplat();\n\n      const chunkIndex = Math.floor((chunkSplatIndexOffset + index) / 256);\n\n      unpack111011(p, positionArray[index]);\n      unpackRot(r, rotationArray[index]);\n      unpack111011(s, scaleArray[index]);\n      unpack8888(c, colorArray[index]);\n\n      outSplat[OFFSET.X] = lerp(positionExtremes.minX[chunkIndex], positionExtremes.maxX[chunkIndex], p.x);\n      outSplat[OFFSET.Y] = lerp(positionExtremes.minY[chunkIndex], positionExtremes.maxY[chunkIndex], p.y);\n      outSplat[OFFSET.Z] = lerp(positionExtremes.minZ[chunkIndex], positionExtremes.maxZ[chunkIndex], p.z);\n\n      outSplat[OFFSET.ROTATION0] = r.x;\n      outSplat[OFFSET.ROTATION1] = r.y;\n      outSplat[OFFSET.ROTATION2] = r.z;\n      outSplat[OFFSET.ROTATION3] = r.w;\n\n      outSplat[OFFSET.SCALE0] = Math.exp(lerp(scaleExtremes.minScaleX[chunkIndex], scaleExtremes.maxScaleX[chunkIndex], s.x));\n      outSplat[OFFSET.SCALE1] = Math.exp(lerp(scaleExtremes.minScaleY[chunkIndex], scaleExtremes.maxScaleY[chunkIndex], s.y));\n      outSplat[OFFSET.SCALE2] = Math.exp(lerp(scaleExtremes.minScaleZ[chunkIndex], scaleExtremes.maxScaleZ[chunkIndex], s.z));\n\n      outSplat[OFFSET.FDC0] = clamp(Math.floor(c.x * 255), 0, 255);\n      outSplat[OFFSET.FDC1] = clamp(Math.floor(c.y * 255), 0, 255);\n      outSplat[OFFSET.FDC2] = clamp(Math.floor(c.z * 255), 0, 255);\n      outSplat[OFFSET.OPACITY] = clamp(Math.floor(c.w * 255), 0, 255);\n\n      return outSplat;\n    };\n\n  }();\n\n  static parseToUncompressedSplatBufferSection(chunkElement, vertexElement, fromIndex, toIndex, chunkSplatIndexOffset,\n                                               vertexDataBuffer, veretxReadOffset, outBuffer, outOffset, propertyFilter = null) {\n\n    CompressedPlyParser.readElementData(vertexElement, vertexDataBuffer, veretxReadOffset, fromIndex, toIndex, propertyFilter);\n\n    const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\n    const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\n    const outBytesPerRotation = SplatBuffer.CompressionLevels[0].BytesPerRotation;\n    const outBytesPerSplat = SplatBuffer.CompressionLevels[0].BytesPerSplat;\n\n    const { positionExtremes, scaleExtremes, position, rotation, scale, color } =\n      CompressedPlyParser.getElementStorageArrays(chunkElement, vertexElement);\n\n    const OFFSET = UncompressedSplatArray.OFFSET;\n    const tempSplat = UncompressedSplatArray.createSplat();\n\n    for (let i = fromIndex; i <= toIndex; ++i) {\n\n      CompressedPlyParser.decompressSplat(i, chunkSplatIndexOffset, position, positionExtremes,\n                                          scale, scaleExtremes, rotation, color, tempSplat);\n\n      const outBase = i * outBytesPerSplat + outOffset;\n      const outCenter = new Float32Array(outBuffer, outBase, 3);\n      const outScale = new Float32Array(outBuffer, outBase + outBytesPerCenter, 3);\n      const outRotation = new Float32Array(outBuffer, outBase + outBytesPerCenter + outBytesPerScale, 4);\n      const outColor = new Uint8Array(outBuffer, outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation, 4);\n\n      outCenter[0] = tempSplat[OFFSET.X];\n      outCenter[1] = tempSplat[OFFSET.Y];\n      outCenter[2] = tempSplat[OFFSET.Z];\n\n      outScale[0] = tempSplat[OFFSET.SCALE0];\n      outScale[1] = tempSplat[OFFSET.SCALE1];\n      outScale[2] = tempSplat[OFFSET.SCALE2];\n\n      outRotation[0] = tempSplat[OFFSET.ROTATION0];\n      outRotation[1] = tempSplat[OFFSET.ROTATION1];\n      outRotation[2] = tempSplat[OFFSET.ROTATION2];\n      outRotation[3] = tempSplat[OFFSET.ROTATION3];\n\n      outColor[0] = tempSplat[OFFSET.FDC0];\n      outColor[1] = tempSplat[OFFSET.FDC1];\n      outColor[2] = tempSplat[OFFSET.FDC2];\n      outColor[3] = tempSplat[OFFSET.OPACITY];\n    }\n  }\n\n  static parseToUncompressedSplatArray(plyBuffer) {\n    const { chunkElement, vertexElement } = CompressedPlyParser.readPly(plyBuffer);\n\n    const splatArray = new UncompressedSplatArray();\n\n    const { positionExtremes, scaleExtremes, position, rotation, scale, color } =\n      CompressedPlyParser.getElementStorageArrays(chunkElement, vertexElement);\n\n    for (let i = 0; i < vertexElement.count; ++i) {\n\n      splatArray.addDefaultSplat();\n      const newSplat = splatArray.getSplat(splatArray.splatCount - 1);\n\n      CompressedPlyParser.decompressSplat(i, 0, position, positionExtremes, scale, scaleExtremes, rotation, color, newSplat);\n    }\n\n    const mat = new THREE.Matrix4();\n    mat.identity();\n\n    return splatArray;\n  }\n\n}\n","import * as THREE from 'three';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { CompressedPlyParser } from './CompressedPlyParser.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { clamp } from '../../Util.js';\n\nexport class PlyParser {\n\n    static HeaderEndToken = 'end_header';\n\n    static Fields = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3',\n                     'x', 'y', 'z', 'f_dc_0', 'f_dc_1', 'f_dc_2', 'red', 'green', 'blue', 'opacity'];\n\n    static checkTextForEndHeader(endHeaderTestText) {\n        if (endHeaderTestText.includes(PlyParser.HeaderEndToken)) {\n            return true;\n        }\n        return false;\n    }\n\n    static checkBufferForEndHeader(buffer, searchOfset, chunkSize, decoder) {\n        const endHeaderTestChunk = new Uint8Array(buffer, Math.max(0, searchOfset - chunkSize), chunkSize);\n        const endHeaderTestText = decoder.decode(endHeaderTestChunk);\n        return PlyParser.checkTextForEndHeader(endHeaderTestText);\n    }\n\n    static decodeHeaderText(headerText) {\n        const headerLines = headerText.split('\\n');\n\n        const prunedLines = [];\n\n        let splatCount = 0;\n        let propertyTypes = {};\n        let compressed = false;\n\n        for (let i = 0; i < headerLines.length; i++) {\n            const line = headerLines[i].trim();\n            prunedLines.push(line);\n            if (line.startsWith('element chunk') || line.match(/[A-Za-z]*packed_[A-Za-z]*/)) {\n                compressed = true;\n            } else if (line.startsWith('element vertex')) {\n                const splatCountMatch = line.match(/\\d+/);\n                if (splatCountMatch) {\n                    splatCount = parseInt(splatCountMatch[0]);\n                }\n            } else if (line.startsWith('property')) {\n                const propertyMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\n                if (propertyMatch) {\n                    const propertyType = propertyMatch[2];\n                    const propertyName = propertyMatch[3];\n                    propertyTypes[propertyName] = propertyType;\n                }\n            } else if (line === PlyParser.HeaderEndToken) {\n                break;\n            }\n        }\n\n        let bytesPerSplat = 0;\n        let fieldOffsets = {};\n        const fieldSize = {\n            'double': 8,\n            'int': 4,\n            'uint': 4,\n            'float': 4,\n            'short': 2,\n            'ushort': 2,\n            'uchar': 1,\n        };\n\n        for (let fieldName in propertyTypes) {\n            if (propertyTypes.hasOwnProperty(fieldName)) {\n                const type = propertyTypes[fieldName];\n                fieldOffsets[fieldName] = bytesPerSplat;\n                bytesPerSplat += fieldSize[type];\n            }\n        }\n\n        return {\n            'splatCount': splatCount,\n            'propertyTypes': propertyTypes,\n            'compressed': compressed,\n            'headerText': headerText,\n            'headerLines': prunedLines,\n            'headerSizeBytes': headerText.indexOf(PlyParser.HeaderEndToken) + PlyParser.HeaderEndToken.length + 1,\n            'bytesPerSplat': bytesPerSplat,\n            'fieldOffsets': fieldOffsets\n        };\n    }\n\n    static decodeHeadeFromBuffer(plyBuffer) {\n        const decoder = new TextDecoder();\n        let headerOffset = 0;\n        let headerText = '';\n        const readChunkSize = 100;\n\n        while (true) {\n            if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\n                throw new Error('End of file reached while searching for end of header');\n            }\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, readChunkSize);\n            headerText += decoder.decode(headerChunk);\n            headerOffset += readChunkSize;\n\n            if (PlyParser.checkBufferForEndHeader(plyBuffer, headerOffset, readChunkSize * 2, decoder)) {\n                break;\n            }\n        }\n\n        return PlyParser.decodeHeaderText(headerText);\n\n    }\n\n    static findVertexData(plyBuffer, header) {\n        return new DataView(plyBuffer, header.headerSizeBytes);\n    }\n\n    static readRawVertexFast(vertexData, offset, fieldOffsets, propertiesToRead, propertyTypes, outVertex) {\n        let rawVertex = outVertex || {};\n        for (let property of propertiesToRead) {\n            const propertyType = propertyTypes[property];\n            if (propertyType === 'float') {\n                rawVertex[property] = vertexData.getFloat32(offset + fieldOffsets[property], true);\n            } else if (propertyType === 'uchar') {\n                rawVertex[property] = vertexData.getUint8(offset + fieldOffsets[property]) / 255.0;\n            }\n        }\n    }\n\n    static parseToUncompressedSplatBufferSection(header, fromSplat, toSplat, vertexData, vertexDataOffset, toBuffer, toOffset) {\n        const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\n        const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\n        const outBytesPerRotation = SplatBuffer.CompressionLevels[0].BytesPerRotation;\n        const outBytesPerSplat = SplatBuffer.CompressionLevels[0].BytesPerSplat;\n\n        for (let i = fromSplat; i <= toSplat; i++) {\n\n            const parsedSplat = PlyParser.parseToUncompressedSplat(vertexData, i, header, vertexDataOffset);\n\n            const outBase = i * outBytesPerSplat + toOffset;\n            const outCenter = new Float32Array(toBuffer, outBase, 3);\n            const outScale = new Float32Array(toBuffer, outBase + outBytesPerCenter, 3);\n            const outRotation = new Float32Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale, 4);\n            const outColor = new Uint8Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation, 4);\n\n            outCenter[0] = parsedSplat[UncompressedSplatArray.OFFSET.X];\n            outCenter[1] = parsedSplat[UncompressedSplatArray.OFFSET.Y];\n            outCenter[2] = parsedSplat[UncompressedSplatArray.OFFSET.Z];\n\n            outScale[0] = parsedSplat[UncompressedSplatArray.OFFSET.SCALE0];\n            outScale[1] = parsedSplat[UncompressedSplatArray.OFFSET.SCALE1];\n            outScale[2] = parsedSplat[UncompressedSplatArray.OFFSET.SCALE2];\n\n            outRotation[0] = parsedSplat[UncompressedSplatArray.OFFSET.ROTATION0];\n            outRotation[1] = parsedSplat[UncompressedSplatArray.OFFSET.ROTATION1];\n            outRotation[2] = parsedSplat[UncompressedSplatArray.OFFSET.ROTATION2];\n            outRotation[3] = parsedSplat[UncompressedSplatArray.OFFSET.ROTATION3];\n\n            outColor[0] = parsedSplat[UncompressedSplatArray.OFFSET.FDC0];\n            outColor[1] = parsedSplat[UncompressedSplatArray.OFFSET.FDC1];\n            outColor[2] = parsedSplat[UncompressedSplatArray.OFFSET.FDC2];\n            outColor[3] = parsedSplat[UncompressedSplatArray.OFFSET.OPACITY];\n        }\n    }\n\n    static parseToUncompressedSplat = function() {\n\n        let rawVertex = {};\n        const tempRotation = new THREE.Quaternion();\n\n        return function(vertexData, row, header, vertexDataOffset = 0) {\n            PlyParser.readRawVertexFast(vertexData, row * header.bytesPerSplat + vertexDataOffset, header.fieldOffsets,\n                                        PlyParser.Fields, header.propertyTypes, rawVertex);\n            const newSplat = UncompressedSplatArray.createSplat();\n            if (rawVertex['scale_0'] !== undefined) {\n                newSplat[UncompressedSplatArray.OFFSET.SCALE0] = Math.exp(rawVertex['scale_0']);\n                newSplat[UncompressedSplatArray.OFFSET.SCALE1] = Math.exp(rawVertex['scale_1']);\n                newSplat[UncompressedSplatArray.OFFSET.SCALE2] = Math.exp(rawVertex['scale_2']);\n            } else {\n                newSplat[UncompressedSplatArray.OFFSET.SCALE0] = 0.01;\n                newSplat[UncompressedSplatArray.OFFSET.SCALE1] = 0.01;\n                newSplat[UncompressedSplatArray.OFFSET.SCALE2] = 0.01;\n            }\n\n            if (rawVertex['f_dc_0'] !== undefined) {\n                const SH_C0 = 0.28209479177387814;\n                newSplat[UncompressedSplatArray.OFFSET.FDC0] = (0.5 + SH_C0 * rawVertex['f_dc_0']) * 255;\n                newSplat[UncompressedSplatArray.OFFSET.FDC1] = (0.5 + SH_C0 * rawVertex['f_dc_1']) * 255;\n                newSplat[UncompressedSplatArray.OFFSET.FDC2] = (0.5 + SH_C0 * rawVertex['f_dc_2']) * 255;\n            } else if (rawVertex['red'] !== undefined) {\n                newSplat[UncompressedSplatArray.OFFSET.FDC0] = rawVertex['red'] * 255;\n                newSplat[UncompressedSplatArray.OFFSET.FDC1] = rawVertex['green'] * 255;\n                newSplat[UncompressedSplatArray.OFFSET.FDC2] = rawVertex['blue'] * 255;\n            } else {\n                newSplat[UncompressedSplatArray.OFFSET.FDC0] = 0;\n                newSplat[UncompressedSplatArray.OFFSET.FDC1] = 0;\n                newSplat[UncompressedSplatArray.OFFSET.FDC2] = 0;\n            }\n            if (rawVertex['opacity'] !== undefined) {\n                newSplat[UncompressedSplatArray.OFFSET.OPACITY] = (1 / (1 + Math.exp(-rawVertex['opacity']))) * 255;\n            }\n\n            newSplat[UncompressedSplatArray.OFFSET.FDC0] = clamp(Math.floor(newSplat[UncompressedSplatArray.OFFSET.FDC0]), 0, 255);\n            newSplat[UncompressedSplatArray.OFFSET.FDC1] = clamp(Math.floor(newSplat[UncompressedSplatArray.OFFSET.FDC1]), 0, 255);\n            newSplat[UncompressedSplatArray.OFFSET.FDC2] = clamp(Math.floor(newSplat[UncompressedSplatArray.OFFSET.FDC2]), 0, 255);\n            newSplat[UncompressedSplatArray.OFFSET.OPACITY] = clamp(Math.floor(newSplat[UncompressedSplatArray.OFFSET.OPACITY]), 0, 255);\n\n            tempRotation.set(rawVertex['rot_0'], rawVertex['rot_1'], rawVertex['rot_2'], rawVertex['rot_3']);\n            tempRotation.normalize();\n\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION0] = tempRotation.x;\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION1] = tempRotation.y;\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION2] = tempRotation.z;\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION3] = tempRotation.w;\n\n            newSplat[UncompressedSplatArray.OFFSET.X] = rawVertex['x'];\n            newSplat[UncompressedSplatArray.OFFSET.Y] = rawVertex['y'];\n            newSplat[UncompressedSplatArray.OFFSET.Z] = rawVertex['z'];\n\n            return newSplat;\n        };\n\n    }();\n\n    static parseToUncompressedSplatArray(plyBuffer) {\n\n        const header = PlyParser.decodeHeadeFromBuffer(plyBuffer);\n\n        if (header.compressed) {\n\n            return CompressedPlyParser.parseToUncompressedSplatArray(plyBuffer);\n\n        } else {\n\n            const splatCount = header.splatCount;\n\n            const vertexData = PlyParser.findVertexData(plyBuffer, header);\n\n            // TODO: Eventually properly support multiple degree spherical harmonics\n            // figure out the SH degree from the number of coefficients\n            /* let nRestCoeffs = 0;\n            for (const propertyName in header.propertyTypes) {\n                if (propertyName.startsWith('f_rest_')) {\n                    nRestCoeffs += 1;\n                }\n            }\n            const nCoeffsPerColor = nRestCoeffs / 3;*/\n\n            // const sphericalHarmonicsDegree = Math.sqrt(nCoeffsPerColor + 1) - 1;\n            // const sphericalHarmonicsDegree = 0;\n            // console.log('Detected degree', sphericalHarmonicsDegree, 'with ', nCoeffsPerColor, 'coefficients per color');\n\n            // figure out the order in which spherical harmonics should be read\n            /* const shFeatureOrder = [];\n            for (let rgb = 0; rgb < 3; ++rgb) {\n                shFeatureOrder.push(`f_dc_${rgb}`);\n            }\n            for (let i = 0; i < nCoeffsPerColor; ++i) {\n                for (let rgb = 0; rgb < 3; ++rgb) {\n                    shFeatureOrder.push(`f_rest_${rgb * nCoeffsPerColor + i}`);\n                }\n            }*/\n\n            const splatArray = new UncompressedSplatArray();\n\n            for (let row = 0; row < splatCount; row++) {\n                const newSplat = PlyParser.parseToUncompressedSplat(vertexData, row, header);\n                splatArray.addSplat(newSplat);\n            }\n\n            return splatArray;\n        }\n    }\n\n}\n","import * as THREE from 'three';\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\nimport { SplatBuffer } from './SplatBuffer.js';\n\nexport class SplatPartitioner {\n\n    constructor(sectionCount, sectionFilters, groupingParameters, partitionGenerator) {\n        this.sectionCount = sectionCount;\n        this.sectionFilters = sectionFilters;\n        this.groupingParameters = groupingParameters;\n        this.partitionGenerator = partitionGenerator;\n    }\n\n    partitionUncompressedSplatArray(splatArray) {\n        let groupingParameters;\n        let sectionCount;\n        let sectionFilters;\n        if (this.partitionGenerator) {\n            const results = this.partitionGenerator(splatArray);\n            groupingParameters = results.groupingParameters;\n            sectionCount = results.sectionCount;\n            sectionFilters = results.sectionFilters;\n        } else {\n            groupingParameters = this.groupingParameters;\n            sectionCount = this.sectionCount;\n            sectionFilters = this.sectionFilters;\n        }\n\n        const newArrays = [];\n        for (let s = 0; s < sectionCount; s++) {\n            const sectionSplats = new UncompressedSplatArray();\n            const sectionFilter = sectionFilters[s];\n            for (let i = 0; i < splatArray.splatCount; i++) {\n                if (sectionFilter(i)) {\n                    sectionSplats.addSplatFromArray(splatArray, i);\n                }\n            }\n            newArrays.push(sectionSplats);\n        }\n        return {\n            splatArrays: newArrays,\n            parameters: groupingParameters\n        };\n    }\n\n    static getStandardPartitioner(partitionSize = 0, sceneCenter = new THREE.Vector3(),\n                                  blockSize = SplatBuffer.BucketBlockSize, bucketSize = SplatBuffer.BucketSize) {\n        const partitionGenerator = (splatArray) => {\n\n            if (partitionSize <= 0) partitionSize = splatArray.splatCount;\n\n            const centerA = new THREE.Vector3();\n            const centerB = new THREE.Vector3();\n            const clampDistance = 0.5;\n            const clampPoint = (point) => {\n                point.x = Math.floor(point.x / clampDistance) * clampDistance;\n                point.y = Math.floor(point.y / clampDistance) * clampDistance;\n                point.z = Math.floor(point.z / clampDistance) * clampDistance;\n            };\n            splatArray.splats.sort((a, b) => {\n                centerA.set(a[UncompressedSplatArray.OFFSET.X],\n                            a[UncompressedSplatArray.OFFSET.Y],\n                            a[UncompressedSplatArray.OFFSET.Z]).sub(sceneCenter);\n                clampPoint(centerA);\n                const centerADist = centerA.lengthSq();\n                centerB.set(b[UncompressedSplatArray.OFFSET.X],\n                            b[UncompressedSplatArray.OFFSET.Y],\n                            b[UncompressedSplatArray.OFFSET.Z]).sub(sceneCenter);\n                clampPoint(centerB);\n                const centerBDist = centerB.lengthSq();\n                if (centerADist > centerBDist) return 1;\n                else return -1;\n            });\n\n            const sectionFilters = [];\n            const groupingParameters = [];\n            partitionSize = Math.min(splatArray.splatCount, partitionSize);\n            const patitionCount = Math.ceil(splatArray.splatCount / partitionSize);\n            let currentStartSplat = 0;\n            for (let i = 0; i < patitionCount; i ++) {\n                let startSplat = currentStartSplat;\n                sectionFilters.push((splatIndex) => {\n                    return splatIndex >= startSplat && splatIndex < startSplat + partitionSize;\n                });\n                groupingParameters.push({\n                    'blocksSize': blockSize,\n                    'bucketSize': bucketSize,\n                });\n                currentStartSplat += partitionSize;\n            }\n            return {\n                'sectionCount': sectionFilters.length,\n                sectionFilters,\n                groupingParameters\n            };\n        };\n        return new SplatPartitioner(undefined, undefined, undefined, partitionGenerator);\n    }\n}\n","import * as THREE from 'three';\nimport { SplatPartitioner } from './SplatPartitioner.js';\nimport { SplatBuffer } from './SplatBuffer.js';\n\nexport class SplatBufferGenerator {\n\n    constructor(splatPartitioner, alphaRemovalThreshold, compressionLevel, sectionSize, sceneCenter, blockSize, bucketSize) {\n        this.splatPartitioner = splatPartitioner;\n        this.alphaRemovalThreshold = alphaRemovalThreshold;\n        this.compressionLevel = compressionLevel;\n        this.sectionSize = sectionSize;\n        this.sceneCenter = sceneCenter ? new THREE.Vector3().copy(sceneCenter) : undefined;\n        this.blockSize = blockSize;\n        this.bucketSize = bucketSize;\n    }\n\n    generateFromUncompressedSplatArray(splatArray) {\n        const partitionResults = this.splatPartitioner.partitionUncompressedSplatArray(splatArray);\n        return SplatBuffer.generateFromUncompressedSplatArrays(partitionResults.splatArrays,\n                                                               this.alphaRemovalThreshold, this.compressionLevel,\n                                                               this.sceneCenter, this.blockSize, this.bucketSize,\n                                                               partitionResults.parameters);\n    }\n\n    static getStandardGenerator(alphaRemovalThreshold = 1, compressionLevel = 1, sectionSize = 0, sceneCenter = new THREE.Vector3(),\n                                blockSize = SplatBuffer.BucketBlockSize, bucketSize = SplatBuffer.BucketSize) {\n        const splatPartitioner = SplatPartitioner.getStandardPartitioner(sectionSize, sceneCenter, blockSize, bucketSize);\n        return new SplatBufferGenerator(splatPartitioner, alphaRemovalThreshold, compressionLevel,\n                                        sectionSize, sceneCenter, blockSize, bucketSize);\n    }\n}\n","export const LoaderStatus = {\n    'Downloading': 0,\n    'Processing': 1,\n    'Done': 2\n};\n","export class Constants {\n\n    static DepthMapRange = 1 << 16;\n    static MemoryPageSize = 65536;\n    static BytesPerFloat = 4;\n    static BytesPerInt = 4;\n    static MaxScenes = 32;\n    static StreamingSectionSize = 524288;\n\n}\n","import * as THREE from 'three';\nimport { PlyParser } from './PlyParser.js';\nimport { CompressedPlyParser } from './CompressedPlyParser.js';\nimport { fetchWithProgress, delayedExecute } from '../../Util.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { Constants } from '../../Constants.js';\n\nfunction storeChunksInBuffer(chunks, buffer) {\n    let inBytes = 0;\n    for (let chunk of chunks) inBytes += chunk.sizeBytes;\n\n    if (!buffer || buffer.byteLength < inBytes) {\n        buffer = new ArrayBuffer(inBytes);\n    }\n\n    let offset = 0;\n    for (let chunk of chunks) {\n        new Uint8Array(buffer, offset, chunk.sizeBytes).set(chunk.data);\n        offset += chunk.sizeBytes;\n    }\n\n    return buffer;\n}\n\nexport class PlyLoader {\n\n    static loadFromURL(fileName, onProgress, streamLoadData, onStreamedSectionProgress, minimumAlpha, compressionLevel,\n                       sectionSize, sceneCenter, blockSize, bucketSize) {\n\n        const streamedSectionSizeBytes = Constants.StreamingSectionSize;\n        const splatDataOffsetBytes = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\n        const sectionCount = 1;\n\n        let streamBufferIn;\n        let streamBufferOut;\n        let streamedSplatBuffer;\n        let compressedPlyHeaderChunksBuffer;\n        let maxSplatCount = 0;\n        let splatCount = 0;\n\n        let headerLoaded = false;\n        let readyToLoadSplatData = false;\n        let compressed = false;\n\n        let streamLoadCompleteResolver;\n        let streamLoadPromise = new Promise((resolve) => {\n            streamLoadCompleteResolver = resolve;\n        });\n\n        let numBytesStreamed = 0;\n        let numBytesParsed = 0;\n        let numBytesDownloaded = 0;\n        let headerText = '';\n        let header = null;\n        let chunks = [];\n\n        const textDecoder = new TextDecoder();\n\n        const localOnProgress = (percent, percentLabel, chunkData) => {\n            const loadComplete = percent >= 100;\n            if (streamLoadData) {\n\n                if (chunkData) {\n                    chunks.push({\n                        'data': chunkData,\n                        'sizeBytes': chunkData.byteLength,\n                        'startBytes': numBytesDownloaded,\n                        'endBytes': numBytesDownloaded + chunkData.byteLength\n                    });\n                    numBytesDownloaded += chunkData.byteLength;\n                }\n\n                if (!headerLoaded) {\n                    headerText += textDecoder.decode(chunkData);\n                    if (PlyParser.checkTextForEndHeader(headerText)) {\n                        header = PlyParser.decodeHeaderText(headerText);\n                        compressed = header.compressed;\n\n                        if (compressed) {\n                            header = CompressedPlyParser.decodeHeaderText(headerText);\n                            maxSplatCount = header.vertexElement.count;\n                        } else {\n                            maxSplatCount = header.splatCount;\n                            readyToLoadSplatData = true;\n                        }\n\n                        const splatBufferSizeBytes = splatDataOffsetBytes + SplatBuffer.CompressionLevels[0].BytesPerSplat * maxSplatCount;\n                        streamBufferOut = new ArrayBuffer(splatBufferSizeBytes);\n                        SplatBuffer.writeHeaderToBuffer({\n                            versionMajor: SplatBuffer.CurrentMajorVersion,\n                            versionMinor: SplatBuffer.CurrentMinorVersion,\n                            maxSectionCount: sectionCount,\n                            sectionCount: sectionCount,\n                            maxSplatCount: maxSplatCount,\n                            splatCount: splatCount,\n                            compressionLevel: 0,\n                            sceneCenter: new THREE.Vector3()\n                        }, streamBufferOut);\n\n                        numBytesStreamed = header.headerSizeBytes;\n                        numBytesParsed = header.headerSizeBytes;\n                        headerLoaded = true;\n                    }\n                } else if (compressed && !readyToLoadSplatData) {\n                    const sizeRequiredForHeaderAndChunks = header.headerSizeBytes + header.chunkElement.storageSizeBytes;\n                    compressedPlyHeaderChunksBuffer = storeChunksInBuffer(chunks, compressedPlyHeaderChunksBuffer);\n                    if (compressedPlyHeaderChunksBuffer.byteLength >= sizeRequiredForHeaderAndChunks) {\n                        CompressedPlyParser.readElementData(header.chunkElement, compressedPlyHeaderChunksBuffer, header.headerSizeBytes);\n                        numBytesStreamed = sizeRequiredForHeaderAndChunks;\n                        numBytesParsed = sizeRequiredForHeaderAndChunks;\n                        readyToLoadSplatData = true;\n                    }\n                }\n\n                if (headerLoaded && readyToLoadSplatData) {\n\n                    if (chunks.length > 0) {\n\n                        streamBufferIn = storeChunksInBuffer(chunks, streamBufferIn);\n\n                        const bytesLoadedSinceLastStreamedSection = numBytesDownloaded - numBytesStreamed;\n                        if (bytesLoadedSinceLastStreamedSection > streamedSectionSizeBytes || loadComplete) {\n                            const numBytesToProcess = numBytesDownloaded - numBytesParsed;\n                            const addedSplatCount = Math.floor(numBytesToProcess / header.bytesPerSplat);\n                            const numBytesToParse = addedSplatCount * header.bytesPerSplat;\n                            const numBytesLeftOver = numBytesToProcess - numBytesToParse;\n                            const newSplatCount = splatCount + addedSplatCount;\n                            const parsedDataViewOffset = numBytesParsed - chunks[0].startBytes;\n                            const dataToParse = new DataView(streamBufferIn, parsedDataViewOffset, numBytesToParse);\n\n                            const outOffset = splatCount * SplatBuffer.CompressionLevels[0].BytesPerSplat + splatDataOffsetBytes;\n\n                            if (compressed) {\n                                CompressedPlyParser.parseToUncompressedSplatBufferSection(header.chunkElement, header.vertexElement, 0,\n                                                                                          addedSplatCount - 1, splatCount,\n                                                                                          dataToParse, 0, streamBufferOut, outOffset);\n                            } else {\n                                PlyParser.parseToUncompressedSplatBufferSection(header, 0, addedSplatCount - 1,\n                                                                                dataToParse, 0, streamBufferOut, outOffset);\n                            }\n\n                            splatCount = newSplatCount;\n                            if (!streamedSplatBuffer) {\n                                SplatBuffer.writeSectionHeaderToBuffer({\n                                    maxSplatCount: maxSplatCount,\n                                    splatCount: splatCount,\n                                    bucketSize: 0,\n                                    bucketCount: 0,\n                                    bucketBlockSize: 0,\n                                    compressionScaleRange: 0,\n                                    storageSizeBytes: 0,\n                                    fullBucketCount: 0,\n                                    partiallyFilledBucketCount: 0\n                                }, 0, streamBufferOut, SplatBuffer.HeaderSizeBytes);\n                                streamedSplatBuffer = new SplatBuffer(streamBufferOut, false);\n                            }\n                            streamedSplatBuffer.updateLoadedCounts(1, splatCount);\n                            onStreamedSectionProgress(streamedSplatBuffer, loadComplete);\n                            numBytesStreamed += streamedSectionSizeBytes;\n                            numBytesParsed += numBytesToParse;\n\n                            if (numBytesLeftOver === 0) {\n                                chunks = [];\n                            } else {\n                                let keepChunks = [];\n                                let keepSize = 0;\n                                for (let i = chunks.length - 1; i >= 0; i--) {\n                                    const chunk = chunks[i];\n                                    keepSize += chunk.sizeBytes;\n                                    keepChunks.unshift(chunk);\n                                    if (keepSize >= numBytesLeftOver) break;\n                                }\n                                chunks = keepChunks;\n                            }\n                        }\n                    }\n\n                    if (loadComplete) {\n                        streamLoadCompleteResolver(streamedSplatBuffer);\n                    }\n                }\n\n            }\n            if (onProgress) onProgress(percent, percentLabel, LoaderStatus.Downloading);\n        };\n\n        return fetchWithProgress(fileName, localOnProgress, !streamLoadData).then((plyFileData) => {\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n            const loadPromise = streamLoadData ? streamLoadPromise : PlyLoader.loadFromFileData(plyFileData, minimumAlpha, compressionLevel,\n                                                                                        sectionSize, sceneCenter, blockSize, bucketSize);\n            return loadPromise.then((splatBuffer) => {\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\n                return splatBuffer;\n            });\n        });\n    }\n\n    static loadFromFileData(plyFileData, minimumAlpha, compressionLevel, sectionSize, sceneCenter, blockSize, bucketSize) {\n        return delayedExecute(() => {\n            return PlyParser.parseToUncompressedSplatArray(plyFileData);\n        })\n        .then((splatArray) => {\n            const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(minimumAlpha, compressionLevel, sectionSize,\n                                                                                   sceneCenter, blockSize, bucketSize);\n            return splatBufferGenerator.generateFromUncompressedSplatArray(splatArray);\n        });\n    }\n}\n","import * as THREE from 'three';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\n\nexport class SplatParser {\n\n    static RowSizeBytes = 32;\n    static CenterSizeBytes = 12;\n    static ScaleSizeBytes = 12;\n    static RotationSizeBytes = 4;\n    static ColorSizeBytes = 4;\n\n    static parseToUncompressedSplatBufferSection(fromSplat, toSplat, fromBuffer, fromOffset, toBuffer, toOffset) {\n\n        const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\n        const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\n        const outBytesPerRotation = SplatBuffer.CompressionLevels[0].BytesPerRotation;\n        const outBytesPerSplat = SplatBuffer.CompressionLevels[0].BytesPerSplat;\n\n        for (let i = fromSplat; i <= toSplat; i++) {\n            const inBase = i * SplatParser.RowSizeBytes + fromOffset;\n            const inCenter = new Float32Array(fromBuffer, inBase, 3);\n            const inScale = new Float32Array(fromBuffer, inBase + SplatParser.CenterSizeBytes, 3);\n            const inColor = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\n            const inRotation = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes +\n                                              SplatParser.RotationSizeBytes, 4);\n\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\n            quat.normalize();\n\n            const outBase = i * outBytesPerSplat + toOffset;\n            const outCenter = new Float32Array(toBuffer, outBase, 3);\n            const outScale = new Float32Array(toBuffer, outBase + outBytesPerCenter, 3);\n            const outRotation = new Float32Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale, 4);\n            const outColor = new Uint8Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation, 4);\n\n            outCenter[0] = inCenter[0];\n            outCenter[1] = inCenter[1];\n            outCenter[2] = inCenter[2];\n\n            outScale[0] = inScale[0];\n            outScale[1] = inScale[1];\n            outScale[2] = inScale[2];\n\n            outRotation[0] = quat.w;\n            outRotation[1] = quat.x;\n            outRotation[2] = quat.y;\n            outRotation[3] = quat.z;\n\n            outColor[0] = inColor[0];\n            outColor[1] = inColor[1];\n            outColor[2] = inColor[2];\n            outColor[3] = inColor[3];\n        }\n    }\n\n    static parseStandardSplatToUncompressedSplatArray(inBuffer) {\n        // Standard .splat row layout:\n        // XYZ - Position (Float32)\n        // XYZ - Scale (Float32)\n        // RGBA - colors (uint8)\n        // IJKL - quaternion/rot (uint8)\n\n        const splatCount = inBuffer.byteLength / SplatParser.RowSizeBytes;\n\n        const splatArray = new UncompressedSplatArray();\n\n        for (let i = 0; i < splatCount; i++) {\n            const inBase = i * SplatParser.RowSizeBytes;\n            const inCenter = new Float32Array(inBuffer, inBase, 3);\n            const inScale = new Float32Array(inBuffer, inBase + SplatParser.CenterSizeBytes, 3);\n            const inColor = new Uint8Array(inBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\n            const inRotation = new Uint8Array(inBuffer, inBase + SplatParser.CenterSizeBytes +\n                                              SplatParser.ScaleSizeBytes + SplatParser.ColorSizeBytes, 4);\n\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\n            quat.normalize();\n\n            splatArray.addSplatFromComonents(inCenter[0], inCenter[1], inCenter[2], inScale[0], inScale[1], inScale[2],\n                                             quat.w, quat.x, quat.y, quat.z, inColor[0], inColor[1], inColor[2], inColor[3]);\n        }\n\n        return splatArray;\n    }\n\n}\n","import * as THREE from 'three';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\nimport { SplatParser } from './SplatParser.js';\nimport { fetchWithProgress, delayedExecute } from '../../Util.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { Constants } from '../../Constants.js';\n\nexport class SplatLoader {\n\n    static loadFromURL(fileName, onProgress, streamLoadData, onStreamedSectionProgress, minimumAlpha, compressionLevel,\n                       optimizeSplatData, sectionSize, sceneCenter, blockSize, bucketSize) {\n\n        const splatDataOffsetBytes = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\n        const streamSectionSizeBytes = Constants.StreamingSectionSize;\n        const sectionCount = 1;\n\n        let streamBufferIn;\n        let streamBufferOut;\n        let streamSplatBuffer;\n        let maxSplatCount = 0;\n        let splatCount = 0;\n\n        let streamLoadCompleteResolver;\n        let streamLoadPromise = new Promise((resolve) => {\n            streamLoadCompleteResolver = resolve;\n        });\n\n        let numBytesStreamed = 0;\n        let numBytesLoaded = 0;\n        let chunks = [];\n\n        const localOnProgress = (percent, percentStr, chunk, fileSize) => {\n            const loadComplete = percent >= 100;\n            if (!fileSize) streamLoadData = false;\n            if (streamLoadData) {\n                if (!streamBufferIn) {\n                    maxSplatCount = fileSize / SplatParser.RowSizeBytes;\n                    streamBufferIn = new ArrayBuffer(fileSize);\n                    const splatBufferSizeBytes = splatDataOffsetBytes + SplatBuffer.CompressionLevels[0].BytesPerSplat * maxSplatCount;\n                    streamBufferOut = new ArrayBuffer(splatBufferSizeBytes);\n                    SplatBuffer.writeHeaderToBuffer({\n                        versionMajor: SplatBuffer.CurrentMajorVersion,\n                        versionMinor: SplatBuffer.CurrentMinorVersion,\n                        maxSectionCount: sectionCount,\n                        sectionCount: sectionCount,\n                        maxSplatCount: maxSplatCount,\n                        splatCount: splatCount,\n                        compressionLevel: 0,\n                        sceneCenter: new THREE.Vector3()\n                    }, streamBufferOut);\n                }\n\n                if (chunk) {\n                    chunks.push(chunk);\n                    new Uint8Array(streamBufferIn, numBytesLoaded, chunk.byteLength).set(new Uint8Array(chunk));\n                    numBytesLoaded += chunk.byteLength;\n\n                    const bytesLoadedSinceLastSection = numBytesLoaded - numBytesStreamed;\n                    if (bytesLoadedSinceLastSection > streamSectionSizeBytes || loadComplete) {\n                        const bytesToUpdate = loadComplete ? bytesLoadedSinceLastSection : streamSectionSizeBytes;\n                        const addedSplatCount = bytesToUpdate / SplatParser.RowSizeBytes;\n                        const newSplatCount = splatCount + addedSplatCount;\n                        SplatParser.parseToUncompressedSplatBufferSection(splatCount, newSplatCount - 1, streamBufferIn, 0,\n                                                                          streamBufferOut, splatDataOffsetBytes);\n                        splatCount = newSplatCount;\n                        if (!streamSplatBuffer) {\n                            SplatBuffer.writeSectionHeaderToBuffer({\n                                maxSplatCount: maxSplatCount,\n                                splatCount: splatCount,\n                                bucketSize: 0,\n                                bucketCount: 0,\n                                bucketBlockSize: 0,\n                                compressionScaleRange: 0,\n                                storageSizeBytes: 0,\n                                fullBucketCount: 0,\n                                partiallyFilledBucketCount: 0\n                            }, 0, streamBufferOut, SplatBuffer.HeaderSizeBytes);\n                            streamSplatBuffer = new SplatBuffer(streamBufferOut, false);\n                        }\n                        streamSplatBuffer.updateLoadedCounts(1, splatCount);\n                        onStreamedSectionProgress(streamSplatBuffer, loadComplete);\n                        numBytesStreamed += streamSectionSizeBytes;\n                    }\n                }\n                if (loadComplete) {\n                    streamLoadCompleteResolver(streamSplatBuffer);\n                }\n            }\n            if (onProgress) onProgress(percent, percentStr, LoaderStatus.Downloading);\n            return streamLoadData;\n        };\n\n        return fetchWithProgress(fileName, localOnProgress, true).then((fullBuffer) => {\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n            const loadPromise = streamLoadData ? streamLoadPromise :\n                SplatLoader.loadFromFileData(fullBuffer, minimumAlpha, compressionLevel, optimizeSplatData,\n                                             sectionSize, sceneCenter, blockSize, bucketSize);\n            return loadPromise.then((splatBuffer) => {\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\n                return splatBuffer;\n            });\n        });\n    }\n\n    static loadFromFileData(splatFileData, minimumAlpha, compressionLevel, optimizeSplatData,\n                            sectionSize, sceneCenter, blockSize, bucketSize) {\n        return delayedExecute(() => {\n            const splatArray = SplatParser.parseStandardSplatToUncompressedSplatArray(splatFileData);\n            if (optimizeSplatData) {\n                const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(minimumAlpha, compressionLevel,\n                                                                                       sectionSize, sceneCenter, blockSize,\n                                                                                       bucketSize);\n                return splatBufferGenerator.generateFromUncompressedSplatArray(splatArray);\n            } else {\n                return SplatBuffer.generateFromUncompressedSplatArrays([splatArray], minimumAlpha, 0, new THREE.Vector3());\n            }\n        });\n    }\n\n}\n","import { SplatBuffer } from '../SplatBuffer.js';\nimport { fetchWithProgress, delayedExecute } from '../../Util.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { Constants } from '../../Constants.js';\n\nexport class KSplatLoader {\n\n   static checkVersion(buffer) {\n        const minVersionMajor = SplatBuffer.CurrentMajorVersion;\n        const minVersionMinor = SplatBuffer.CurrentMinorVersion;\n        const header = SplatBuffer.parseHeader(buffer);\n        if (header.versionMajor === minVersionMajor &&\n            header.versionMinor >= minVersionMinor ||\n            header.versionMajor > minVersionMajor) {\n           return true;\n        } else {\n            throw new Error(`KSplat version not supported: v${header.versionMajor}.${header.versionMinor}. ` +\n                            `Minimum required: v${minVersionMajor}.${minVersionMinor}`);\n        }\n    };\n\n    static loadFromURL(fileName, onProgress, streamLoadData, onSectionBuilt) {\n        let streamBuffer;\n        let streamSplatBuffer;\n\n        let headerBuffer;\n        let header;\n        let headerLoaded = false;\n        let headerLoading = false;\n\n        let sectionHeadersBuffer;\n        let sectionHeaders = [];\n        let sectionHeadersLoaded = false;\n        let sectionHeadersLoading = false;\n\n        let numBytesLoaded = 0;\n        let numBytesStreamed = 0;\n        let streamSectionSizeBytes = Constants.StreamingSectionSize;\n        let totalBytesToDownload = 0;\n\n        let loadComplete = false;\n\n        let chunks = [];\n\n        let streamLoadCompleteResolver;\n        let streamLoadPromise = new Promise((resolve) => {\n            streamLoadCompleteResolver = resolve;\n        });\n\n        const checkAndLoadHeader = () => {\n            if (!headerLoaded && !headerLoading && numBytesLoaded >= SplatBuffer.HeaderSizeBytes) {\n                headerLoading = true;\n                const headerAssemblyPromise = new Blob(chunks).arrayBuffer();\n                headerAssemblyPromise.then((bufferData) => {\n                    headerBuffer = new ArrayBuffer(SplatBuffer.HeaderSizeBytes);\n                    new Uint8Array(headerBuffer).set(new Uint8Array(bufferData, 0, SplatBuffer.HeaderSizeBytes));\n                    KSplatLoader.checkVersion(headerBuffer);\n                    headerLoading = false;\n                    headerLoaded = true;\n                    header = SplatBuffer.parseHeader(headerBuffer);\n                    window.setTimeout(() => {\n                        checkAndLoadSectionHeaders();\n                    }, 1);\n                });\n            }\n        };\n\n        let queuedCheckAndLoadSectionsCount = 0;\n        const queueCheckAndLoadSections = () => {\n            if (queuedCheckAndLoadSectionsCount === 0) {\n                queuedCheckAndLoadSectionsCount++;\n                window.setTimeout(() => {\n                    queuedCheckAndLoadSectionsCount--;\n                    checkAndLoadSections(true);\n                }, 1);\n            }\n        };\n\n        const checkAndLoadSectionHeaders = () => {\n            const performLoad = () => {\n                sectionHeadersLoading = true;\n                const sectionHeadersAssemblyPromise = new Blob(chunks).arrayBuffer();\n                sectionHeadersAssemblyPromise.then((bufferData) => {\n                    sectionHeadersLoading = false;\n                    sectionHeadersLoaded = true;\n                    sectionHeadersBuffer = new ArrayBuffer(header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes);\n                    new Uint8Array(sectionHeadersBuffer).set(new Uint8Array(bufferData, SplatBuffer.HeaderSizeBytes,\n                                                                            header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes));\n                    sectionHeaders = SplatBuffer.parseSectionHeaders(header, sectionHeadersBuffer, 0, false);\n                    let totalSectionStorageStorageByes = 0;\n                    for (let i = 0; i < header.maxSectionCount; i++) {\n                        totalSectionStorageStorageByes += sectionHeaders[i].storageSizeBytes;\n                    }\n                    const totalStorageSizeBytes = SplatBuffer.HeaderSizeBytes + header.maxSectionCount *\n                                                  SplatBuffer.SectionHeaderSizeBytes + totalSectionStorageStorageByes;\n                    if (!streamBuffer) {\n                        streamBuffer = new ArrayBuffer(totalStorageSizeBytes);\n                        let offset = 0;\n                        for (let i = 0; i < chunks.length; i++) {\n                            const chunk = chunks[i];\n                            new Uint8Array(streamBuffer, offset, chunk.byteLength).set(new Uint8Array(chunk));\n                            offset += chunk.byteLength;\n                        }\n                    }\n\n                    totalBytesToDownload = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\n                    for (let i = 0; i <= sectionHeaders.length && i < header.maxSectionCount; i++) {\n                        totalBytesToDownload += sectionHeaders[i].storageSizeBytes;\n                    }\n\n                    queueCheckAndLoadSections();\n                });\n            };\n\n            if (!sectionHeadersLoading && !sectionHeadersLoaded && headerLoaded &&\n                numBytesLoaded >= SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount) {\n                performLoad();\n            }\n        };\n\n        const checkAndLoadSections = () => {\n            if (sectionHeadersLoaded) {\n\n                if (loadComplete) return;\n\n                loadComplete = numBytesLoaded >= totalBytesToDownload;\n\n                const bytesLoadedSinceLastSection = numBytesLoaded - numBytesStreamed;\n                if (bytesLoadedSinceLastSection > streamSectionSizeBytes || loadComplete) {\n\n                    numBytesStreamed = numBytesLoaded;\n\n                    if (!streamSplatBuffer) streamSplatBuffer = new SplatBuffer(streamBuffer, false);\n\n                    const baseDataOffset = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\n                    let sectionBase = 0;\n                    let reachedSections = 0;\n                    let loadedSplatCount = 0;\n                    for (let i = 0; i < header.maxSectionCount; i++) {\n                        const sectionHeader = sectionHeaders[i];\n                        const bucketsDataOffset = sectionBase + sectionHeader.partiallyFilledBucketCount * 4 +\n                                                  sectionHeader.bucketStorageSizeBytes * sectionHeader.bucketCount;\n                        const bytesRequiredToReachSectionSplatData = baseDataOffset + bucketsDataOffset;\n                        if (numBytesLoaded >= bytesRequiredToReachSectionSplatData) {\n                            reachedSections++;\n                            const bytesPastSSectionSplatDataStart = numBytesLoaded - bytesRequiredToReachSectionSplatData;\n                            const bytesPerSplat = SplatBuffer.CompressionLevels[header.compressionLevel].BytesPerSplat;\n                            let loadedSplatsForSection = Math.floor(bytesPastSSectionSplatDataStart / bytesPerSplat);\n                            loadedSplatsForSection = Math.min(loadedSplatsForSection, sectionHeader.maxSplatCount);\n                            loadedSplatCount += loadedSplatsForSection;\n                            streamSplatBuffer.updateLoadedCounts(reachedSections, loadedSplatCount);\n                            streamSplatBuffer.updateSectionLoadedCounts(i, loadedSplatsForSection);\n                        } else {\n                            break;\n                        }\n                        sectionBase += sectionHeader.storageSizeBytes;\n                    }\n\n                    onSectionBuilt(streamSplatBuffer, loadComplete);\n\n                    if (loadComplete) {\n                        streamLoadCompleteResolver(streamSplatBuffer);\n                    }\n                }\n            }\n        };\n\n        const localOnProgress = (percent, percentStr, chunk) => {\n            if (chunk) {\n                chunks.push(chunk);\n                if (streamBuffer) {\n                    new Uint8Array(streamBuffer, numBytesLoaded, chunk.byteLength).set(new Uint8Array(chunk));\n                }\n                numBytesLoaded += chunk.byteLength;\n            }\n            if (streamLoadData) {\n                checkAndLoadHeader();\n                checkAndLoadSectionHeaders();\n                checkAndLoadSections();\n            }\n            if (onProgress) onProgress(percent, percentStr, LoaderStatus.Downloading);\n        };\n\n        return fetchWithProgress(fileName, localOnProgress, !streamLoadData).then((fullBuffer) => {\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n            const loadPromise = streamLoadData ? streamLoadPromise : KSplatLoader.loadFromFileData(fullBuffer);\n            return loadPromise.then((splatBuffer) => {\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\n                return splatBuffer;\n            });\n        });\n    }\n\n    static loadFromFileData(fileData) {\n        return delayedExecute(() => {\n            KSplatLoader.checkVersion(fileData);\n            return new SplatBuffer(fileData);\n        });\n    }\n\n    static downloadFile = function() {\n\n        let downLoadLink;\n\n        return function(splatBuffer, fileName) {\n            const blob = new Blob([splatBuffer.bufferData], {\n                type: 'application/octet-stream',\n            });\n\n            if (!downLoadLink) {\n                downLoadLink = document.createElement('a');\n                document.body.appendChild(downLoadLink);\n            }\n            downLoadLink.download = fileName;\n            downLoadLink.href = URL.createObjectURL(blob);\n            downLoadLink.click();\n        };\n\n    }();\n\n}\n","export const SceneFormat = {\n    'Splat': 0,\n    'KSplat': 1,\n    'Ply': 2\n};\n","import { SceneFormat } from './SceneFormat.js';\n\nexport const sceneFormatFromPath = (path) => {\n    if (path.endsWith('.ply')) return SceneFormat.Ply;\n    else if (path.endsWith('.splat')) return SceneFormat.Splat;\n    else if (path.endsWith('.ksplat')) return SceneFormat.KSplat;\n    return null;\n};\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nimport {\n    EventDispatcher,\n    MOUSE,\n    Quaternion,\n    Spherical,\n    TOUCH,\n    Vector2,\n    Vector3,\n    Plane,\n    Ray,\n    MathUtils\n} from 'three';\n\n// OrbitControls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nconst _changeEvent = { type: 'change' };\nconst _startEvent = { type: 'start' };\nconst _endEvent = { type: 'end' };\nconst _ray = new Ray();\nconst _plane = new Plane();\nconst TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\n\nclass OrbitControls extends EventDispatcher {\n\n    constructor( object, domElement ) {\n\n        super();\n\n        this.object = object;\n        this.domElement = domElement;\n        this.domElement.style.touchAction = 'none'; // disable touch scroll\n\n        // Set to false to disable this control\n        this.enabled = true;\n\n        // \"target\" sets the location of focus, where the object orbits around\n        this.target = new Vector3();\n\n        // How far you can dolly in and out ( PerspectiveCamera only )\n        this.minDistance = 0;\n        this.maxDistance = Infinity;\n\n        // How far you can zoom in and out ( OrthographicCamera only )\n        this.minZoom = 0;\n        this.maxZoom = Infinity;\n\n        // How far you can orbit vertically, upper and lower limits.\n        // Range is 0 to Math.PI radians.\n        this.minPolarAngle = 0; // radians\n        this.maxPolarAngle = Math.PI; // radians\n\n        // How far you can orbit horizontally, upper and lower limits.\n        // If set, the interval [min, max] must be a sub-interval of [- 2 PI, 2 PI], with ( max - min < 2 PI )\n        this.minAzimuthAngle = - Infinity; // radians\n        this.maxAzimuthAngle = Infinity; // radians\n\n        // Set to true to enable damping (inertia)\n        // If damping is enabled, you must call controls.update() in your animation loop\n        this.enableDamping = false;\n        this.dampingFactor = 0.05;\n\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n        // Set to false to disable zooming\n        this.enableZoom = true;\n        this.zoomSpeed = 1.0;\n\n        // Set to false to disable rotating\n        this.enableRotate = true;\n        this.rotateSpeed = 1.0;\n\n        // Set to false to disable panning\n        this.enablePan = true;\n        this.panSpeed = 1.0;\n        this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n        this.keyPanSpeed = 7.0; // pixels moved per arrow key push\n        this.zoomToCursor = false;\n\n        // Set to true to automatically rotate around the target\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\n        this.autoRotate = false;\n        this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\n        // The four arrow keys\n        this.keys = { LEFT: 'KeyA', UP: 'KeyW', RIGHT: 'KeyD', BOTTOM: 'KeyS' };\n\n        // Mouse buttons\n        this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n        // Touch fingers\n        this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n        // for reset\n        this.target0 = this.target.clone();\n        this.position0 = this.object.position.clone();\n        this.zoom0 = this.object.zoom;\n\n        // the target DOM element for key events\n        this._domElementKeyEvents = null;\n\n        //\n        // public methods\n        //\n\n        this.getPolarAngle = function() {\n\n            return spherical.phi;\n\n        };\n\n        this.getAzimuthalAngle = function() {\n\n            return spherical.theta;\n\n        };\n\n        this.getDistance = function() {\n\n            return this.object.position.distanceTo( this.target );\n\n        };\n\n        this.listenToKeyEvents = function( domElement ) {\n\n            domElement.addEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = domElement;\n\n        };\n\n        this.stopListenToKeyEvents = function() {\n\n            this._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = null;\n\n        };\n\n        this.saveState = function() {\n\n            scope.target0.copy( scope.target );\n            scope.position0.copy( scope.object.position );\n            scope.zoom0 = scope.object.zoom;\n\n        };\n\n        this.reset = function() {\n\n            scope.target.copy( scope.target0 );\n            scope.object.position.copy( scope.position0 );\n            scope.object.zoom = scope.zoom0;\n            this.clearDampedRotation();\n            this.clearDampedPan();\n\n            scope.object.updateProjectionMatrix();\n            scope.dispatchEvent( _changeEvent );\n\n            scope.update();\n\n            state = STATE.NONE;\n\n        };\n\n        this.clearDampedRotation = function() {\n            sphericalDelta.theta = 0.0;\n            sphericalDelta.phi = 0.0;\n        };\n\n        this.clearDampedPan = function() {\n            panOffset.set(0, 0, 0);\n        };\n\n        // this method is exposed, but perhaps it would be better if we can make it private...\n        this.update = function() {\n\n            const offset = new Vector3();\n\n            // so camera.up is the orbit axis\n            const quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n            const quatInverse = quat.clone().invert();\n\n            const lastPosition = new Vector3();\n            const lastQuaternion = new Quaternion();\n            const lastTargetPosition = new Vector3();\n\n            const twoPI = 2 * Math.PI;\n\n            return function update() {\n\n                quat.setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n                quatInverse.copy(quat).invert();\n\n                const position = scope.object.position;\n\n                offset.copy( position ).sub( scope.target );\n\n                // rotate offset to \"y-axis-is-up\" space\n                offset.applyQuaternion( quat );\n\n                // angle from z-axis around y-axis\n                spherical.setFromVector3( offset );\n\n                if ( scope.autoRotate && state === STATE.NONE ) {\n\n                    rotateLeft( getAutoRotationAngle() );\n\n                }\n\n                if ( scope.enableDamping ) {\n\n                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;\n                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n                } else {\n\n                    spherical.theta += sphericalDelta.theta;\n                    spherical.phi += sphericalDelta.phi;\n\n                }\n\n                // restrict theta to be between desired limits\n\n                let min = scope.minAzimuthAngle;\n                let max = scope.maxAzimuthAngle;\n\n                if ( isFinite( min ) && isFinite( max ) ) {\n\n                    if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\n                    if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n                    if ( min <= max ) {\n\n                        spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n                    } else {\n\n                        spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\n                            Math.max( min, spherical.theta ) :\n                            Math.min( max, spherical.theta );\n\n                    }\n\n                }\n\n                // restrict phi to be between desired limits\n                spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n                spherical.makeSafe();\n\n\n                // move target to panned location\n\n                if ( scope.enableDamping === true ) {\n\n                    scope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n                } else {\n\n                    scope.target.add( panOffset );\n\n                }\n\n                // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n                // we adjust zoom later in these cases\n                if ( scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera ) {\n\n                    spherical.radius = clampDistance( spherical.radius );\n\n                } else {\n\n                    spherical.radius = clampDistance( spherical.radius * scale );\n\n                }\n\n\n                offset.setFromSpherical( spherical );\n\n                // rotate offset back to \"camera-up-vector-is-up\" space\n                offset.applyQuaternion( quatInverse );\n\n                position.copy( scope.target ).add( offset );\n\n                scope.object.lookAt( scope.target );\n\n                if ( scope.enableDamping === true ) {\n\n                    sphericalDelta.theta *= ( 1 - scope.dampingFactor );\n                    sphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n                    panOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n                } else {\n\n                    sphericalDelta.set( 0, 0, 0 );\n\n                    panOffset.set( 0, 0, 0 );\n\n                }\n\n                // adjust camera position\n                let zoomChanged = false;\n                if ( scope.zoomToCursor && performCursorZoom ) {\n\n                    let newRadius = null;\n                    if ( scope.object.isPerspectiveCamera ) {\n\n                        // move the camera down the pointer ray\n                        // this method avoids floating point error\n                        const prevRadius = offset.length();\n                        newRadius = clampDistance( prevRadius * scale );\n\n                        const radiusDelta = prevRadius - newRadius;\n                        scope.object.position.addScaledVector( dollyDirection, radiusDelta );\n                        scope.object.updateMatrixWorld();\n\n                    } else if ( scope.object.isOrthographicCamera ) {\n\n                        // adjust the ortho camera position based on zoom changes\n                        const mouseBefore = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseBefore.unproject( scope.object );\n\n                        scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                        scope.object.updateProjectionMatrix();\n                        zoomChanged = true;\n\n                        const mouseAfter = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseAfter.unproject( scope.object );\n\n                        scope.object.position.sub( mouseAfter ).add( mouseBefore );\n                        scope.object.updateMatrixWorld();\n\n                        newRadius = offset.length();\n\n                    } else {\n\n                        console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\n                        scope.zoomToCursor = false;\n\n                    }\n\n                    // handle the placement of the target\n                    if ( newRadius !== null ) {\n\n                        if ( this.screenSpacePanning ) {\n\n                            // position the orbit target in front of the new camera position\n                            scope.target.set( 0, 0, - 1 )\n                                .transformDirection( scope.object.matrix )\n                                .multiplyScalar( newRadius )\n                                .add( scope.object.position );\n\n                        } else {\n\n                            // get the ray and translation plane to compute target\n                            _ray.origin.copy( scope.object.position );\n                            _ray.direction.set( 0, 0, - 1 ).transformDirection( scope.object.matrix );\n\n                            // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n                            // extremely large values\n                            if ( Math.abs( scope.object.up.dot( _ray.direction ) ) < TILT_LIMIT ) {\n\n                                object.lookAt( scope.target );\n\n                            } else {\n\n                                _plane.setFromNormalAndCoplanarPoint( scope.object.up, scope.target );\n                                _ray.intersectPlane( _plane, scope.target );\n\n                            }\n\n                        }\n\n                    }\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                    scope.object.updateProjectionMatrix();\n                    zoomChanged = true;\n\n                }\n\n                scale = 1;\n                performCursorZoom = false;\n\n                // update condition is:\n                // min(camera displacement, camera rotation in radians)^2 > EPS\n                // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n                if ( zoomChanged ||\n                    lastPosition.distanceToSquared( scope.object.position ) > EPS ||\n                    8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ||\n                    lastTargetPosition.distanceToSquared( scope.target ) > 0 ) {\n\n                    scope.dispatchEvent( _changeEvent );\n\n                    lastPosition.copy( scope.object.position );\n                    lastQuaternion.copy( scope.object.quaternion );\n                    lastTargetPosition.copy( scope.target );\n\n                    zoomChanged = false;\n\n                    return true;\n\n                }\n\n                return false;\n\n            };\n\n        }();\n\n        this.dispose = function() {\n\n            scope.domElement.removeEventListener( 'contextmenu', onContextMenu );\n\n            scope.domElement.removeEventListener( 'pointerdown', onPointerDown );\n            scope.domElement.removeEventListener( 'pointercancel', onPointerUp );\n            scope.domElement.removeEventListener( 'wheel', onMouseWheel );\n\n            scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n            scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n\n            if ( scope._domElementKeyEvents !== null ) {\n\n                scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n                scope._domElementKeyEvents = null;\n\n            }\n\n        };\n\n        //\n        // internals\n        //\n\n        const scope = this;\n\n        const STATE = {\n            NONE: - 1,\n            ROTATE: 0,\n            DOLLY: 1,\n            PAN: 2,\n            TOUCH_ROTATE: 3,\n            TOUCH_PAN: 4,\n            TOUCH_DOLLY_PAN: 5,\n            TOUCH_DOLLY_ROTATE: 6\n        };\n\n        let state = STATE.NONE;\n\n        const EPS = 0.000001;\n\n        // current position in spherical coordinates\n        const spherical = new Spherical();\n        const sphericalDelta = new Spherical();\n\n        let scale = 1;\n        const panOffset = new Vector3();\n\n        const rotateStart = new Vector2();\n        const rotateEnd = new Vector2();\n        const rotateDelta = new Vector2();\n\n        const panStart = new Vector2();\n        const panEnd = new Vector2();\n        const panDelta = new Vector2();\n\n        const dollyStart = new Vector2();\n        const dollyEnd = new Vector2();\n        const dollyDelta = new Vector2();\n\n        const dollyDirection = new Vector3();\n        const mouse = new Vector2();\n        let performCursorZoom = false;\n\n        const pointers = [];\n        const pointerPositions = {};\n\n        function getAutoRotationAngle() {\n\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n        }\n\n        function getZoomScale() {\n\n            return Math.pow( 0.95, scope.zoomSpeed );\n\n        }\n\n        function rotateLeft( angle ) {\n\n            sphericalDelta.theta -= angle;\n\n        }\n\n        function rotateUp( angle ) {\n\n            sphericalDelta.phi -= angle;\n\n        }\n\n        const panLeft = function() {\n\n            const v = new Vector3();\n\n            return function panLeft( distance, objectMatrix ) {\n\n                v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n                v.multiplyScalar( - distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        const panUp = function() {\n\n            const v = new Vector3();\n\n            return function panUp( distance, objectMatrix ) {\n\n                if ( scope.screenSpacePanning === true ) {\n\n                    v.setFromMatrixColumn( objectMatrix, 1 );\n\n                } else {\n\n                    v.setFromMatrixColumn( objectMatrix, 0 );\n                    v.crossVectors( scope.object.up, v );\n\n                }\n\n                v.multiplyScalar( distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        // deltaX and deltaY are in pixels; right and down are positive\n        const pan = function() {\n\n            const offset = new Vector3();\n\n            return function pan( deltaX, deltaY ) {\n\n                const element = scope.domElement;\n\n                if ( scope.object.isPerspectiveCamera ) {\n\n                    // perspective\n                    const position = scope.object.position;\n                    offset.copy( position ).sub( scope.target );\n                    let targetDistance = offset.length();\n\n                    // half of the fov is center to top of screen\n                    targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n                    // we use only clientHeight here so aspect ratio does not distort speed\n                    panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n                    panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    // orthographic\n                    panLeft( deltaX * ( scope.object.right - scope.object.left ) /\n                                        scope.object.zoom / element.clientWidth, scope.object.matrix );\n                    panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom /\n                                      element.clientHeight, scope.object.matrix );\n\n                } else {\n\n                    // camera neither orthographic nor perspective\n                    console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n                    scope.enablePan = false;\n\n                }\n\n            };\n\n        }();\n\n        function dollyOut( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale /= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function dollyIn( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale *= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function updateMouseParameters( event ) {\n\n            if ( ! scope.zoomToCursor ) {\n\n                return;\n\n            }\n\n            performCursorZoom = true;\n\n            const rect = scope.domElement.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n            const w = rect.width;\n            const h = rect.height;\n\n            mouse.x = ( x / w ) * 2 - 1;\n            mouse.y = - ( y / h ) * 2 + 1;\n\n            dollyDirection.set( mouse.x, mouse.y, 1 ).unproject( object ).sub( object.position ).normalize();\n\n        }\n\n        function clampDistance( dist ) {\n\n            return Math.max( scope.minDistance, Math.min( scope.maxDistance, dist ) );\n\n        }\n\n        //\n        // event callbacks - update the object state\n        //\n\n        function handleMouseDownRotate( event ) {\n\n            rotateStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownDolly( event ) {\n\n            updateMouseParameters( event );\n            dollyStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownPan( event ) {\n\n            panStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseMoveRotate( event ) {\n\n            rotateEnd.set( event.clientX, event.clientY );\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMoveDolly( event ) {\n\n            dollyEnd.set( event.clientX, event.clientY );\n\n            dollyDelta.subVectors( dollyEnd, dollyStart );\n\n            if ( dollyDelta.y > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            } else if ( dollyDelta.y < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            }\n\n            dollyStart.copy( dollyEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMovePan( event ) {\n\n            panEnd.set( event.clientX, event.clientY );\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseWheel( event ) {\n\n            updateMouseParameters( event );\n\n            if ( event.deltaY < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            } else if ( event.deltaY > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            }\n\n            scope.update();\n\n        }\n\n        function handleKeyDown( event ) {\n\n            let needsUpdate = false;\n\n            switch ( event.code ) {\n\n                case scope.keys.UP:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.BOTTOM:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, - scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.LEFT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.RIGHT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( - scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n            }\n\n            if ( needsUpdate ) {\n\n                // prevent the browser from scrolling on cursor keys\n                event.preventDefault();\n\n                scope.update();\n\n            }\n\n\n        }\n\n        function handleTouchStartRotate() {\n\n            if ( pointers.length === 1 ) {\n\n                rotateStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                rotateStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartPan() {\n\n            if ( pointers.length === 1 ) {\n\n                panStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                panStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartDolly() {\n\n            const dx = pointers[0].pageX - pointers[1].pageX;\n            const dy = pointers[0].pageY - pointers[1].pageY;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyStart.set( 0, distance );\n\n        }\n\n        function handleTouchStartDollyPan() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enablePan ) handleTouchStartPan();\n\n        }\n\n        function handleTouchStartDollyRotate() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enableRotate ) handleTouchStartRotate();\n\n        }\n\n        function handleTouchMoveRotate( event ) {\n\n            if ( pointers.length == 1 ) {\n\n                rotateEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                rotateEnd.set( x, y );\n\n            }\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n        }\n\n        function handleTouchMovePan( event ) {\n\n            if ( pointers.length === 1 ) {\n\n                panEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                panEnd.set( x, y );\n\n            }\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n        }\n\n        function handleTouchMoveDolly( event ) {\n\n            const position = getSecondPointerPosition( event );\n\n            const dx = event.pageX - position.x;\n            const dy = event.pageY - position.y;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyEnd.set( 0, distance );\n\n            dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n            dollyOut( dollyDelta.y );\n\n            dollyStart.copy( dollyEnd );\n\n        }\n\n        function handleTouchMoveDollyPan( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enablePan ) handleTouchMovePan( event );\n\n        }\n\n        function handleTouchMoveDollyRotate( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n        }\n\n        //\n        // event handlers - FSM: listen for events and reset state\n        //\n\n        function onPointerDown( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.setPointerCapture( event.pointerId );\n\n                scope.domElement.addEventListener( 'pointermove', onPointerMove );\n                scope.domElement.addEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            //\n\n            addPointer( event );\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchStart( event );\n\n            } else {\n\n                onMouseDown( event );\n\n            }\n\n        }\n\n        function onPointerMove( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchMove( event );\n\n            } else {\n\n                onMouseMove( event );\n\n            }\n\n        }\n\n        function onPointerUp( event ) {\n\n            removePointer( event );\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.releasePointerCapture( event.pointerId );\n\n                scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n                scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            scope.dispatchEvent( _endEvent );\n\n            state = STATE.NONE;\n\n        }\n\n        function onMouseDown( event ) {\n\n            let mouseAction;\n\n            switch ( event.button ) {\n\n                case 0:\n\n                    mouseAction = scope.mouseButtons.LEFT;\n                    break;\n\n                case 1:\n\n                    mouseAction = scope.mouseButtons.MIDDLE;\n                    break;\n\n                case 2:\n\n                    mouseAction = scope.mouseButtons.RIGHT;\n                    break;\n\n                default:\n\n                    mouseAction = - 1;\n\n            }\n\n            switch ( mouseAction ) {\n\n                case MOUSE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseDownDolly( event );\n\n                    state = STATE.DOLLY;\n\n                    break;\n\n                case MOUSE.ROTATE:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    } else {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    }\n\n                    break;\n\n                case MOUSE.PAN:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    } else {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onMouseMove( event ) {\n\n            switch ( state ) {\n\n                case STATE.ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleMouseMoveRotate( event );\n\n                    break;\n\n                case STATE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseMoveDolly( event );\n\n                    break;\n\n                case STATE.PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleMouseMovePan( event );\n\n                    break;\n\n            }\n\n        }\n\n        function onMouseWheel( event ) {\n\n            if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\n\n            event.preventDefault();\n\n            scope.dispatchEvent( _startEvent );\n\n            handleMouseWheel( event );\n\n            scope.dispatchEvent( _endEvent );\n\n        }\n\n        function onKeyDown( event ) {\n\n            if ( scope.enabled === false || scope.enablePan === false ) return;\n\n            handleKeyDown( event );\n\n        }\n\n        function onTouchStart( event ) {\n\n            trackPointer( event );\n\n            switch ( pointers.length ) {\n\n                case 1:\n\n                    switch ( scope.touches.ONE ) {\n\n                        case TOUCH.ROTATE:\n\n                            if ( scope.enableRotate === false ) return;\n\n                            handleTouchStartRotate();\n\n                            state = STATE.TOUCH_ROTATE;\n\n                            break;\n\n                        case TOUCH.PAN:\n\n                            if ( scope.enablePan === false ) return;\n\n                            handleTouchStartPan();\n\n                            state = STATE.TOUCH_PAN;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                case 2:\n\n                    switch ( scope.touches.TWO ) {\n\n                        case TOUCH.DOLLY_PAN:\n\n                            if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                            handleTouchStartDollyPan();\n\n                            state = STATE.TOUCH_DOLLY_PAN;\n\n                            break;\n\n                        case TOUCH.DOLLY_ROTATE:\n\n                            if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                            handleTouchStartDollyRotate();\n\n                            state = STATE.TOUCH_DOLLY_ROTATE;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onTouchMove( event ) {\n\n            trackPointer( event );\n\n            switch ( state ) {\n\n                case STATE.TOUCH_ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleTouchMoveRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleTouchMovePan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_PAN:\n\n                    if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                    handleTouchMoveDollyPan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_ROTATE:\n\n                    if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                    handleTouchMoveDollyRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n        }\n\n        function onContextMenu( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            event.preventDefault();\n\n        }\n\n        function addPointer( event ) {\n\n            pointers.push( event );\n\n        }\n\n        function removePointer( event ) {\n\n            delete pointerPositions[event.pointerId];\n\n            for ( let i = 0; i < pointers.length; i ++ ) {\n\n                if ( pointers[i].pointerId == event.pointerId ) {\n\n                    pointers.splice( i, 1 );\n                    return;\n\n                }\n\n            }\n\n        }\n\n        function trackPointer( event ) {\n\n            let position = pointerPositions[event.pointerId];\n\n            if ( position === undefined ) {\n\n                position = new Vector2();\n                pointerPositions[event.pointerId] = position;\n\n            }\n\n            position.set( event.pageX, event.pageY );\n\n        }\n\n        function getSecondPointerPosition( event ) {\n\n            const pointer = ( event.pointerId === pointers[0].pointerId ) ? pointers[1] : pointers[0];\n\n            return pointerPositions[pointer.pointerId];\n\n        }\n\n        //\n\n        scope.domElement.addEventListener( 'contextmenu', onContextMenu );\n\n        scope.domElement.addEventListener( 'pointerdown', onPointerDown );\n        scope.domElement.addEventListener( 'pointercancel', onPointerUp );\n        scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\n\n        // force an update at start\n\n        this.update();\n\n    }\n\n}\n\nexport { OrbitControls };\n","import { fadeElement } from './Util.js';\n\nconst STANDARD_FADE_DURATION = 500;\n\nexport class LoadingSpinner {\n\n    static elementIDGen = 0;\n\n    constructor(message, container) {\n\n        this.taskIDGen = 0;\n        this.elementID = LoadingSpinner.elementIDGen++;\n\n        this.tasks = [];\n\n        this.message = message || 'Loading...';\n        this.container = container || document.body;\n\n        this.spinnerContainerOuter = document.createElement('div');\n        this.spinnerContainerOuter.className = `spinnerOuterContainer${this.elementID}`;\n        this.spinnerContainerOuter.style.display = 'none';\n\n        this.spinnerContainerPrimary = document.createElement('div');\n        this.spinnerContainerPrimary.className = `spinnerContainerPrimary${this.elementID}`;\n        this.spinnerPrimary = document.createElement('div');\n        this.spinnerPrimary.classList.add(`spinner${this.elementID}`, `spinnerPrimary${this.elementID}`);\n        this.messageContainerPrimary = document.createElement('div');\n        this.messageContainerPrimary.classList.add(`messageContainer${this.elementID}`, `messageContainerPrimary${this.elementID}`);\n        this.messageContainerPrimary.innerHTML = this.message;\n\n        this.spinnerContainerMin = document.createElement('div');\n        this.spinnerContainerMin.className = `spinnerContainerMin${this.elementID}`;\n        this.spinnerMin = document.createElement('div');\n        this.spinnerMin.classList.add(`spinner${this.elementID}`, `spinnerMin${this.elementID}`);\n        this.messageContainerMin = document.createElement('div');\n        this.messageContainerMin.classList.add(`messageContainer${this.elementID}`, `messageContainerMin${this.elementID}`);\n        this.messageContainerMin.innerHTML = this.message;\n\n        this.spinnerContainerPrimary.appendChild(this.spinnerPrimary);\n        this.spinnerContainerPrimary.appendChild(this.messageContainerPrimary);\n        this.spinnerContainerOuter.appendChild(this.spinnerContainerPrimary);\n\n        this.spinnerContainerMin.appendChild(this.spinnerMin);\n        this.spinnerContainerMin.appendChild(this.messageContainerMin);\n        this.spinnerContainerOuter.appendChild(this.spinnerContainerMin);\n\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .spinnerOuterContainer${this.elementID} {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .messageContainer${this.elementID} {\n                height: 20px;\n                font-family: arial;\n                font-size: 12pt;\n                color: #ffffff;\n                text-align: center;\n                vertical-align: middle;\n            }\n\n            .spinner${this.elementID} {\n                padding: 15px;\n                background: #07e8d6;\n                z-index:99999;\n            \n                aspect-ratio: 1;\n                border-radius: 50%;\n                --_m: \n                    conic-gradient(#0000,#000),\n                    linear-gradient(#000 0 0) content-box;\n                -webkit-mask: var(--_m);\n                    mask: var(--_m);\n                -webkit-mask-composite: source-out;\n                    mask-composite: subtract;\n                box-sizing: border-box;\n                animation: load 1s linear infinite;\n            }\n\n            .spinnerContainerPrimary${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 10px;\n                margin: 0;\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-80px, -80px);\n                width: 180px;\n                pointer-events: auto;\n            }\n\n            .spinnerPrimary${this.elementID} {\n                width: 120px;\n                margin-left: 30px;\n            }\n\n            .messageContainerPrimary${this.elementID} {\n                padding-top: 15px;\n            }\n\n            .spinnerContainerMin${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                display: flex;\n                flex-direction: left;\n                pointer-events: auto;\n                min-width: 250px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                margin-right: 15px;\n            }\n\n            .spinnerMin${this.elementID} {\n                width: 50px;\n                height: 50px;\n                margin-left: 15px;\n                margin-right: 25px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                padding-top: 15px;\n            }\n            \n            @keyframes load {\n                to{transform: rotate(1turn)}\n            }\n\n        `;\n        this.spinnerContainerOuter.appendChild(style);\n        this.container.appendChild(this.spinnerContainerOuter);\n\n        this.setMinimized(false, true);\n\n        this.fadeTransitions = [];\n    }\n\n    addTask(message) {\n        const newTask = {\n            'message': message,\n            'id': this.taskIDGen++\n        };\n        this.tasks.push(newTask);\n        this.update();\n        return newTask.id;\n    }\n\n    removeTask(id) {\n        let index = 0;\n        for (let task of this.tasks) {\n            if (task.id === id) {\n                this.tasks.splice(index, 1);\n                break;\n            }\n            index++;\n        }\n        this.update();\n    }\n\n    removeAllTasks() {\n        this.tasks = [];\n        this.update();\n    }\n\n    setMessageForTask(id, message) {\n        for (let task of this.tasks) {\n            if (task.id === id) {\n                task.message = message;\n                break;\n            }\n        }\n        this.update();\n    }\n\n    update() {\n        if (this.tasks.length > 0) {\n            this.show();\n            this.setMessage(this.tasks[this.tasks.length - 1].message);\n        } else {\n            this.hide();\n        }\n    }\n\n    show() {\n        this.spinnerContainerOuter.style.display = 'block';\n        this.visible = true;\n    }\n\n    hide() {\n        this.spinnerContainerOuter.style.display = 'none';\n        this.visible = false;\n    }\n\n    setContainer(container) {\n        if (this.container) {\n            this.container.removeChild(this.spinnerContainerOuter);\n        }\n        if (container) {\n            this.container = container;\n            this.container.appendChild(this.spinnerContainerOuter);\n            this.spinnerContainerOuter.style.zIndex = this.container.style.zIndex + 1;\n        }\n    }\n\n    setMinimized(minimized, instant) {\n        const showHideSpinner = (element, show, instant, displayStyle, fadeTransitionsIndex) => {\n            if (instant) {\n                element.style.display = show ? displayStyle : 'none';\n            } else {\n                this.fadeTransitions[fadeTransitionsIndex] = fadeElement(element, !show, displayStyle, STANDARD_FADE_DURATION, () => {\n                    this.fadeTransitions[fadeTransitionsIndex] = null;\n                });\n            }\n        };\n        showHideSpinner(this.spinnerContainerPrimary, !minimized, instant, 'block', 0);\n        showHideSpinner(this.spinnerContainerMin, minimized, instant, 'flex', 1);\n        this.minimized = minimized;\n    }\n\n    setMessage(msg) {\n        this.messageContainerPrimary.innerHTML = msg;\n        this.messageContainerMin.innerHTML = msg;\n    }\n}\n","export const fadeElement = (element, out, displayStyle, duration, onComplete) => {\n    const startTime = performance.now();\n\n    let startOpacity = element.style.display === 'none' ? 0 : parseFloat(element.style.opacity);\n    if (isNaN(startOpacity)) startOpacity = 1;\n\n    const interval = window.setInterval(() => {\n        const currentTime = performance.now();\n        const elapsed = currentTime - startTime;\n\n        let t = Math.min(elapsed / duration, 1.0);\n        if (t > 0.999) t = 1;\n\n        let opacity;\n        if (out) {\n            opacity = (1.0 - t) * startOpacity;\n            if (opacity < 0.0001) opacity = 0;\n        } else {\n            opacity = (1.0 - startOpacity) * t + startOpacity;\n        }\n\n        if (opacity > 0) {\n            element.style.display = displayStyle;\n            element.style.opacity = opacity;\n        } else {\n            element.style.display = 'none';\n        }\n\n        if (t >= 1) {\n            if (onComplete) onComplete();\n            window.clearInterval(interval);\n        }\n    }, 16);\n    return interval;\n};\n\nexport const cancelFade = (interval) => {\n    window.clearInterval(interval);\n};\n","export class LoadingProgressBar {\n\n    constructor(container) {\n\n        this.idGen = 0;\n\n        this.tasks = [];\n\n        this.container = container || document.body;\n\n        this.progressBarContainerOuter = document.createElement('div');\n        this.progressBarContainerOuter.className = 'progressBarOuterContainer';\n        this.progressBarContainerOuter.style.display = 'none';\n\n        this.progressBarBox = document.createElement('div');\n        this.progressBarBox.className = 'progressBarBox';\n\n        this.progressBarBackground = document.createElement('div');\n        this.progressBarBackground.className = 'progressBarBackground';\n\n        this.progressBar = document.createElement('div');\n        this.progressBar.className = 'progressBar';\n\n        this.progressBarBackground.appendChild(this.progressBar);\n        this.progressBarBox.appendChild(this.progressBarBackground);\n        this.progressBarContainerOuter.appendChild(this.progressBarBox);\n\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .progressBarOuterContainer {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .progressBarBox {\n                z-index:99999;\n                padding: 7px 9px 5px 7px;\n                background-color: rgba(190, 190, 190, 0.75);\n                border: #555555 1px solid;\n                border-radius: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                width: 180px;\n                height: 30px;\n                pointer-events: auto;\n            }\n\n            .progressBarBackground {\n                width: 100%;\n                height: 25px;\n                border-radius:10px;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #444444 1px solid;\n                box-shadow: inset 0 0 10px #333333;\n            }\n\n            .progressBar {\n                height: 25px;\n                width: 0px;\n                border-radius:10px;\n                background-color: rgba(0, 200, 0, 0.75);\n                box-shadow: inset 0 0 10px #003300;\n            }\n\n        `;\n        this.progressBarContainerOuter.appendChild(style);\n        this.container.appendChild(this.progressBarContainerOuter);\n    }\n\n    show() {\n        this.progressBarContainerOuter.style.display = 'block';\n    }\n\n    hide() {\n        this.progressBarContainerOuter.style.display = 'none';\n    }\n\n    setProgress(progress) {\n        this.progressBar.style.width = progress + '%';\n    }\n\n    setContainer(container) {\n        if (this.container) {\n            this.container.removeChild(this.progressBarContainerOuter);\n        }\n        if (container) {\n            this.container = container;\n            this.container.appendChild(this.progressBarContainerOuter);\n            this.progressBarContainerOuter.style.zIndex = this.container.style.zIndex + 1;\n        }\n    }\n\n}\n","export class InfoPanel {\n\n    constructor(container) {\n\n        this.container = container || document.body;\n\n        this.infoCells = {};\n\n        const layout = [\n            ['Camera position', 'cameraPosition'],\n            ['Camera look-at', 'cameraLookAt'],\n            ['Camera up', 'cameraUp'],\n            ['Camera mode', 'orthographicCamera'],\n            ['Cursor position', 'cursorPosition'],\n            ['FPS', 'fps'],\n            ['Rendering:', 'renderSplatCount'],\n            ['Sort time', 'sortTime'],\n            ['Render window', 'renderWindow'],\n            ['Focal adjustment', 'focalAdjustment'],\n            ['Splat scale', 'splatScale'],\n            ['Point cloud mode', 'pointCloudMode']\n        ];\n\n        this.infoPanelContainer = document.createElement('div');\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .infoPanel {\n                width: 430px;\n                padding: 10px;\n                background-color: rgba(50, 50, 50, 0.85);\n                border: #555555 2px solid;\n                color: #dddddd;\n                border-radius: 10px;\n                z-index: 9999;\n                font-family: arial;\n                font-size: 11pt;\n                text-align: left;\n                margin: 0;\n                top: 10px;\n                left:10px;\n                position: absolute;\n                pointer-events: auto;\n            }\n\n            .info-panel-cell {\n                margin-bottom: 5px;\n                padding-bottom: 2px;\n            }\n\n            .label-cell {\n                font-weight: bold;\n                font-size: 12pt;\n                width: 140px;\n            }\n\n        `;\n        this.infoPanelContainer.append(style);\n\n        this.infoPanel = document.createElement('div');\n        this.infoPanel.className = 'infoPanel';\n\n        const infoTable = document.createElement('div');\n        infoTable.style.display = 'table';\n\n        for (let layoutEntry of layout) {\n            const row = document.createElement('div');\n            row.style.display = 'table-row';\n            row.className = 'info-panel-row';\n\n            const labelCell = document.createElement('div');\n            labelCell.style.display = 'table-cell';\n            labelCell.innerHTML = `${layoutEntry[0]}: `;\n            labelCell.classList.add('info-panel-cell', 'label-cell');\n\n            const spacerCell = document.createElement('div');\n            spacerCell.style.display = 'table-cell';\n            spacerCell.style.width = '10px';\n            spacerCell.innerHTML = ' ';\n            spacerCell.className = 'info-panel-cell';\n\n            const infoCell = document.createElement('div');\n            infoCell.style.display = 'table-cell';\n            infoCell.innerHTML = '';\n            infoCell.className = 'info-panel-cell';\n\n            this.infoCells[layoutEntry[1]] = infoCell;\n\n            row.appendChild(labelCell);\n            row.appendChild(spacerCell);\n            row.appendChild(infoCell);\n\n            infoTable.appendChild(row);\n        }\n\n        this.infoPanel.appendChild(infoTable);\n        this.infoPanelContainer.append(this.infoPanel);\n        this.infoPanelContainer.style.display = 'none';\n        this.container.appendChild(this.infoPanelContainer);\n\n        this.visible = false;\n    }\n\n    update = function(renderDimensions, cameraPosition, cameraLookAtPosition, cameraUp, orthographicCamera,\n                      meshCursorPosition, currentFPS, splatCount, splatRenderCount,\n                      splatRenderCountPct, lastSortTime, focalAdjustment, splatScale, pointCloudMode) {\n\n        const cameraPosString = `${cameraPosition.x.toFixed(5)}, ${cameraPosition.y.toFixed(5)}, ${cameraPosition.z.toFixed(5)}`;\n        if (this.infoCells.cameraPosition.innerHTML !== cameraPosString) {\n            this.infoCells.cameraPosition.innerHTML = cameraPosString;\n        }\n\n        if (cameraLookAtPosition) {\n            const cla = cameraLookAtPosition;\n            const cameraLookAtString = `${cla.x.toFixed(5)}, ${cla.y.toFixed(5)}, ${cla.z.toFixed(5)}`;\n            if (this.infoCells.cameraLookAt.innerHTML !== cameraLookAtString) {\n                this.infoCells.cameraLookAt.innerHTML = cameraLookAtString;\n            }\n        }\n\n        const cameraUpString = `${cameraUp.x.toFixed(5)}, ${cameraUp.y.toFixed(5)}, ${cameraUp.z.toFixed(5)}`;\n        if (this.infoCells.cameraUp.innerHTML !== cameraUpString) {\n            this.infoCells.cameraUp.innerHTML = cameraUpString;\n        }\n\n        this.infoCells.orthographicCamera.innerHTML = orthographicCamera ? 'Orthographic' : 'Perspective';\n\n        if (meshCursorPosition) {\n            const cursPos = meshCursorPosition;\n            const cursorPosString = `${cursPos.x.toFixed(5)}, ${cursPos.y.toFixed(5)}, ${cursPos.z.toFixed(5)}`;\n            this.infoCells.cursorPosition.innerHTML = cursorPosString;\n        } else {\n            this.infoCells.cursorPosition.innerHTML = 'N/A';\n        }\n\n        this.infoCells.fps.innerHTML = currentFPS;\n        this.infoCells.renderWindow.innerHTML = `${renderDimensions.x} x ${renderDimensions.y}`;\n\n        this.infoCells.renderSplatCount.innerHTML =\n            `${splatRenderCount} splats out of ${splatCount} (${splatRenderCountPct.toFixed(2)}%)`;\n\n        this.infoCells.sortTime.innerHTML = `${lastSortTime.toFixed(3)} ms`;\n        this.infoCells.focalAdjustment.innerHTML = `${focalAdjustment.toFixed(3)}`;\n        this.infoCells.splatScale.innerHTML = `${splatScale.toFixed(3)}`;\n        this.infoCells.pointCloudMode.innerHTML = `${pointCloudMode}`;\n    };\n\n    setContainer(container) {\n        if (this.container) {\n            this.container.removeChild(this.infoPanelContainer);\n        }\n        if (container) {\n            this.container = container;\n            this.container.appendChild(this.infoPanelContainer);\n            this.infoPanelContainer.style.zIndex = this.container.style.zIndex + 1;\n        }\n    }\n\n    show() {\n        this.infoPanelContainer.style.display = 'block';\n        this.visible = true;\n    }\n\n    hide() {\n        this.infoPanelContainer.style.display = 'none';\n        this.visible = false;\n    }\n\n}\n","import * as THREE from 'three';\n\nexport class ArrowHelper extends THREE.Object3D {\n\n    constructor(dir = new THREE.Vector3(0, 0, 1), origin = new THREE.Vector3(0, 0, 0), length = 1,\n                radius = 0.1, color = 0xffff00, headLength = length * 0.2, headRadius = headLength * 0.2) {\n        super();\n\n        this.type = 'ArrowHelper';\n\n        const lineGeometry = new THREE.CylinderGeometry(radius, radius, length, 32);\n        lineGeometry.translate(0, length / 2.0, 0);\n        const coneGeometry = new THREE.CylinderGeometry( 0, headRadius, headLength, 32);\n        coneGeometry.translate(0, length, 0);\n\n        this.position.copy( origin );\n\n        this.line = new THREE.Mesh(lineGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\n        this.line.matrixAutoUpdate = false;\n        this.add(this.line);\n\n        this.cone = new THREE.Mesh(coneGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\n        this.cone.matrixAutoUpdate = false;\n        this.add(this.cone);\n\n        this.setDirection(dir);\n    }\n\n    setDirection( dir ) {\n        if (dir.y > 0.99999) {\n            this.quaternion.set(0, 0, 0, 1);\n        } else if (dir.y < - 0.99999) {\n            this.quaternion.set(1, 0, 0, 0);\n        } else {\n            _axis.set(dir.z, 0, -dir.x).normalize();\n            const radians = Math.acos(dir.y);\n            this.quaternion.setFromAxisAngle(_axis, radians);\n        }\n    }\n\n    setColor( color ) {\n        this.line.material.color.set(color);\n        this.cone.material.color.set(color);\n    }\n\n    copy(source) {\n        super.copy(source, false);\n        this.line.copy(source.line);\n        this.cone.copy(source.cone);\n        return this;\n    }\n\n    dispose() {\n        this.line.geometry.dispose();\n        this.line.material.dispose();\n        this.cone.geometry.dispose();\n        this.cone.material.dispose();\n    }\n\n}\n","import * as THREE from 'three';\nimport { ArrowHelper } from './ArrowHelper.js';\nimport { disposeAllMeshes } from './Util.js';\n\nexport class SceneHelper {\n\n    constructor(threeScene) {\n        this.threeScene = threeScene;\n        this.splatRenderTarget = null;\n        this.renderTargetCopyQuad = null;\n        this.renderTargetCopyCamera = null;\n        this.meshCursor = null;\n        this.focusMarker = null;\n        this.controlPlane = null;\n        this.debugRoot = null;\n        this.secondaryDebugRoot = null;\n    }\n\n    updateSplatRenderTargetForRenderDimensions(width, height) {\n        this.destroySplatRendertarget();\n        this.splatRenderTarget = new THREE.WebGLRenderTarget(width, height, {\n            format: THREE.RGBAFormat,\n            stencilBuffer: false,\n            depthBuffer: true,\n\n        });\n        this.splatRenderTarget.depthTexture = new THREE.DepthTexture(width, height);\n        this.splatRenderTarget.depthTexture.format = THREE.DepthFormat;\n        this.splatRenderTarget.depthTexture.type = THREE.UnsignedIntType;\n    }\n\n    destroySplatRendertarget() {\n        if (this.splatRenderTarget) {\n            this.splatRenderTarget = null;\n        }\n    }\n\n    setupRenderTargetCopyObjects() {\n        const uniforms = {\n            'sourceColorTexture': {\n                'type': 't',\n                'value': null\n            },\n            'sourceDepthTexture': {\n                'type': 't',\n                'value': null\n            },\n        };\n        const renderTargetCopyMaterial = new THREE.ShaderMaterial({\n            vertexShader: `\n                varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \n                }\n            `,\n            fragmentShader: `\n                #include <common>\n                #include <packing>\n                varying vec2 vUv;\n                uniform sampler2D sourceColorTexture;\n                uniform sampler2D sourceDepthTexture;\n                void main() {\n                    vec4 color = texture2D(sourceColorTexture, vUv);\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\n                    gl_FragDepth = fragDepth;\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\n              }\n            `,\n            uniforms: uniforms,\n            depthWrite: false,\n            depthTest: false,\n            transparent: true,\n            blending: THREE.CustomBlending,\n            blendSrc: THREE.SrcAlphaFactor,\n            blendSrcAlpha: THREE.SrcAlphaFactor,\n            blendDst: THREE.OneMinusSrcAlphaFactor,\n            blendDstAlpha: THREE.OneMinusSrcAlphaFactor\n        });\n        renderTargetCopyMaterial.extensions.fragDepth = true;\n        this.renderTargetCopyQuad = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), renderTargetCopyMaterial);\n        this.renderTargetCopyCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    }\n\n    destroyRenderTargetCopyObjects() {\n        if (this.renderTargetCopyQuad) {\n            disposeAllMeshes(this.renderTargetCopyQuad);\n            this.renderTargetCopyQuad = null;\n        }\n    }\n\n    setupMeshCursor() {\n        if (!this.meshCursor) {\n            const coneGeometry = new THREE.ConeGeometry(0.5, 1.5, 32);\n            const coneMaterial = new THREE.MeshBasicMaterial({color: 0xFFFFFF});\n\n            const downArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            downArrow.rotation.set(0, 0, Math.PI);\n            downArrow.position.set(0, 1, 0);\n            const upArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            upArrow.position.set(0, -1, 0);\n            const leftArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            leftArrow.rotation.set(0, 0, Math.PI / 2.0);\n            leftArrow.position.set(1, 0, 0);\n            const rightArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            rightArrow.rotation.set(0, 0, -Math.PI / 2.0);\n            rightArrow.position.set(-1, 0, 0);\n\n            this.meshCursor = new THREE.Object3D();\n            this.meshCursor.add(downArrow);\n            this.meshCursor.add(upArrow);\n            this.meshCursor.add(leftArrow);\n            this.meshCursor.add(rightArrow);\n            this.meshCursor.scale.set(0.1, 0.1, 0.1);\n            this.threeScene.add(this.meshCursor);\n            this.meshCursor.visible = false;\n        }\n    }\n\n    destroyMeshCursor() {\n        if (this.meshCursor) {\n            disposeAllMeshes(this.meshCursor);\n            this.threeScene.remove(this.meshCursor);\n            this.meshCursor = null;\n        }\n    }\n\n    setMeshCursorVisibility(visible) {\n        this.meshCursor.visible = visible;\n    }\n\n    getMeschCursorVisibility() {\n        return this.meshCursor.visible;\n    }\n\n    setMeshCursorPosition(position) {\n        this.meshCursor.position.copy(position);\n    }\n\n    positionAndOrientMeshCursor(position, camera) {\n        this.meshCursor.position.copy(position);\n        this.meshCursor.up.copy(camera.up);\n        this.meshCursor.lookAt(camera.position);\n    }\n\n    setupFocusMarker() {\n        if (!this.focusMarker) {\n            const sphereGeometry = new THREE.SphereGeometry(.5, 32, 32);\n            const focusMarkerMaterial = SceneHelper.buildFocusMarkerMaterial();\n            focusMarkerMaterial.depthTest = false;\n            focusMarkerMaterial.depthWrite = false;\n            focusMarkerMaterial.transparent = true;\n            this.focusMarker = new THREE.Mesh(sphereGeometry, focusMarkerMaterial);\n        }\n    }\n\n    destroyFocusMarker() {\n        if (this.focusMarker) {\n            disposeAllMeshes(this.focusMarker);\n            this.focusMarker = null;\n        }\n    }\n\n    updateFocusMarker = function() {\n\n        const tempPosition = new THREE.Vector3();\n        const tempMatrix = new THREE.Matrix4();\n        const toCamera = new THREE.Vector3();\n\n        return function(position, camera, viewport) {\n            tempMatrix.copy(camera.matrixWorld).invert();\n            tempPosition.copy(position).applyMatrix4(tempMatrix);\n            tempPosition.normalize().multiplyScalar(10);\n            tempPosition.applyMatrix4(camera.matrixWorld);\n            toCamera.copy(camera.position).sub(position);\n            const toCameraDistance = toCamera.length();\n            this.focusMarker.position.copy(position);\n            this.focusMarker.scale.set(toCameraDistance, toCameraDistance, toCameraDistance);\n            this.focusMarker.material.uniforms.realFocusPosition.value.copy(position);\n            this.focusMarker.material.uniforms.viewport.value.copy(viewport);\n            this.focusMarker.material.uniformsNeedUpdate = true;\n        };\n\n    }();\n\n    setFocusMarkerVisibility(visible) {\n        this.focusMarker.visible = visible;\n    }\n\n    setFocusMarkerOpacity(opacity) {\n        this.focusMarker.material.uniforms.opacity.value = opacity;\n        this.focusMarker.material.uniformsNeedUpdate = true;\n    }\n\n    getFocusMarkerOpacity() {\n        return this.focusMarker.material.uniforms.opacity.value;\n    }\n\n    setupControlPlane() {\n        if (!this.controlPlane) {\n            const planeGeometry = new THREE.PlaneGeometry(1, 1);\n            planeGeometry.rotateX(-Math.PI / 2);\n            const planeMaterial = new THREE.MeshBasicMaterial({color: 0xffffff});\n            planeMaterial.transparent = true;\n            planeMaterial.opacity = 0.6;\n            planeMaterial.depthTest = false;\n            planeMaterial.depthWrite = false;\n            planeMaterial.side = THREE.DoubleSide;\n            const planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\n\n            const arrowDir = new THREE.Vector3(0, 1, 0);\n            arrowDir.normalize();\n            const arrowOrigin = new THREE.Vector3(0, 0, 0);\n            const arrowLength = 0.5;\n            const arrowRadius = 0.01;\n            const arrowColor = 0x00dd00;\n            const arrowHelper = new ArrowHelper(arrowDir, arrowOrigin, arrowLength, arrowRadius, arrowColor, 0.1, 0.03);\n\n            this.controlPlane = new THREE.Object3D();\n            this.controlPlane.add(planeMesh);\n            this.controlPlane.add(arrowHelper);\n        }\n    }\n\n    destroyControlPlane() {\n        if (this.controlPlane) {\n            disposeAllMeshes(this.controlPlane);\n            this.controlPlane = null;\n        }\n    }\n\n    setControlPlaneVisibility(visible) {\n        this.controlPlane.visible = visible;\n    }\n\n    positionAndOrientControlPlane = function() {\n\n        const tempQuaternion = new THREE.Quaternion();\n        const defaultUp = new THREE.Vector3(0, 1, 0);\n\n        return function(position, up) {\n            tempQuaternion.setFromUnitVectors(defaultUp, up);\n            this.controlPlane.position.copy(position);\n            this.controlPlane.quaternion.copy(tempQuaternion);\n        };\n\n    }();\n\n    addDebugMeshes() {\n        this.debugRoot = this.createDebugMeshes();\n        this.secondaryDebugRoot = this.createSecondaryDebugMeshes();\n        this.threeScene.add(this.debugRoot);\n        this.threeScene.add(this.secondaryDebugRoot);\n    }\n\n    destroyDebugMeshes() {\n        for (let debugRoot of [this.debugRoot, this.secondaryDebugRoot]) {\n            if (debugRoot) {\n                disposeAllMeshes(debugRoot);\n                this.threeScene.remove(debugRoot);\n            }\n        }\n        this.debugRoot = null;\n        this.secondaryDebugRoot = null;\n    }\n\n    createDebugMeshes(renderOrder) {\n        const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n        const debugMeshRoot = new THREE.Object3D();\n\n        const createMesh = (color, position) => {\n            let sphereMesh = new THREE.Mesh(sphereGeometry, SceneHelper.buildDebugMaterial(color));\n            sphereMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(sphereMesh);\n            sphereMesh.position.fromArray(position);\n        };\n\n        createMesh(0xff0000, [-50, 0, 0]);\n        createMesh(0xff0000, [50, 0, 0]);\n        createMesh(0x00ff00, [0, 0, -50]);\n        createMesh(0x00ff00, [0, 0, 50]);\n        createMesh(0xffaa00, [5, 0, 5]);\n\n        return debugMeshRoot;\n    }\n\n    createSecondaryDebugMeshes(renderOrder) {\n        const boxGeometry = new THREE.BoxGeometry(3, 3, 3);\n        const debugMeshRoot = new THREE.Object3D();\n\n        let boxColor = 0xBBBBBB;\n        const createMesh = (position) => {\n            let boxMesh = new THREE.Mesh(boxGeometry, SceneHelper.buildDebugMaterial(boxColor));\n            boxMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(boxMesh);\n            boxMesh.position.fromArray(position);\n        };\n\n        let separation = 10;\n        createMesh([-separation, 0, -separation]);\n        createMesh([-separation, 0, separation]);\n        createMesh([separation, 0, -separation]);\n        createMesh([separation, 0, separation]);\n\n        return debugMeshRoot;\n    }\n\n    static buildDebugMaterial(color) {\n        const vertexShaderSource = `\n            #include <common>\n            varying float ndcDepth;\n\n            void main() {\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\n                ndcDepth = gl_Position.z / gl_Position.w;\n                gl_Position.x = gl_Position.x / gl_Position.w;\n                gl_Position.y = gl_Position.y / gl_Position.w;\n                gl_Position.z = 0.0;\n                gl_Position.w = 1.0;\n    \n            }\n        `;\n\n        const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            varying float ndcDepth;\n            void main() {\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\n                gl_FragColor = vec4(color.rgb, 0.0);\n            }\n        `;\n\n        const uniforms = {\n            'color': {\n                'type': 'v3',\n                'value': new THREE.Color(color)\n            },\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: false,\n            depthTest: true,\n            depthWrite: true,\n            side: THREE.FrontSide\n        });\n        material.extensions.fragDepth = true;\n\n        return material;\n    }\n\n    static buildFocusMarkerMaterial(color) {\n        const vertexShaderSource = `\n            #include <common>\n\n            uniform vec2 viewport;\n            uniform vec3 realFocusPosition;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                float radius = 0.01;\n\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\n\n                ndcPosition = projectionMatrix * viewPosition;\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\n                ndcCenter = projectionMatrix * viewCenter;\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\n\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\n\n                gl_Position = projectionMatrix * viewPosition;\n\n            }\n        `;\n\n        const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            uniform vec2 viewport;\n            uniform float opacity;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\n\n                vec2 screenVec = screenPosition - screenCenter;\n\n                float projectedRadius = length(screenVec);\n\n                float lineWidth = 0.0005 * viewport.y;\n                float aaRange = 0.0025 * viewport.y;\n                float radius = 0.06 * viewport.y;\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \n\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\n            }\n        `;\n\n        const uniforms = {\n            'color': {\n                'type': 'v3',\n                'value': new THREE.Color(color)\n            },\n            'realFocusPosition': {\n                'type': 'v3',\n                'value': new THREE.Vector3()\n            },\n            'viewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'opacity': {\n                'value': 0.0\n            }\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            depthTest: false,\n            depthWrite: false,\n            side: THREE.FrontSide\n        });\n\n        return material;\n    }\n\n    dispose() {\n        this.destroyMeshCursor();\n        this.destroyFocusMarker();\n        this.destroyDebugMeshes();\n        this.destroyControlPlane();\n        this.destroyRenderTargetCopyObjects();\n        this.destroySplatRendertarget();\n    }\n}\n","import * as THREE from 'three';\n\nconst VectorRight = new THREE.Vector3(1, 0, 0);\nconst VectorUp = new THREE.Vector3(0, 1, 0);\nconst VectorBackward = new THREE.Vector3(0, 0, 1);\n\nexport class Ray {\n\n    constructor(origin = new THREE.Vector3(), direction = new THREE.Vector3()) {\n        this.origin = new THREE.Vector3();\n        this.direction = new THREE.Vector3();\n        this.setParameters(origin, direction);\n    }\n\n    setParameters(origin, direction) {\n        this.origin.copy(origin);\n        this.direction.copy(direction).normalize();\n    }\n\n    boxContainsPoint(box, point, epsilon) {\n        return point.x < box.min.x - epsilon || point.x > box.max.x + epsilon ||\n               point.y < box.min.y - epsilon || point.y > box.max.y + epsilon ||\n               point.z < box.min.z - epsilon || point.z > box.max.z + epsilon ? false : true;\n    }\n\n    intersectBox = function() {\n\n        const planeIntersectionPoint = new THREE.Vector3();\n        const planeIntersectionPointArray = [];\n        const originArray = [];\n        const directionArray = [];\n\n        return function(box, outHit) {\n\n            originArray[0] = this.origin.x;\n            originArray[1] = this.origin.y;\n            originArray[2] = this.origin.z;\n            directionArray[0] = this.direction.x;\n            directionArray[1] = this.direction.y;\n            directionArray[2] = this.direction.z;\n\n            if (this.boxContainsPoint(box, this.origin, 0.0001)) {\n                if (outHit) {\n                    outHit.origin.copy(this.origin);\n                    outHit.normal.set(0, 0, 0);\n                    outHit.distance = -1;\n                }\n                return true;\n            }\n\n            for (let i = 0; i < 3; i++) {\n                if (directionArray[i] == 0.0) continue;\n\n                const hitNormal = i == 0 ? VectorRight : i == 1 ? VectorUp : VectorBackward;\n                const extremeVec = directionArray[i] < 0 ? box.max : box.min;\n                let multiplier = -Math.sign(directionArray[i]);\n                planeIntersectionPointArray[0] = i == 0 ? extremeVec.x : i == 1 ? extremeVec.y : extremeVec.z;\n                let toSide = planeIntersectionPointArray[0] - originArray[i];\n\n                if (toSide * multiplier < 0) {\n                    const idx1 = (i + 1) % 3;\n                    const idx2 = (i + 2) % 3;\n                    planeIntersectionPointArray[2] = directionArray[idx1] / directionArray[i] * toSide + originArray[idx1];\n                    planeIntersectionPointArray[1] = directionArray[idx2] / directionArray[i] * toSide + originArray[idx2];\n                    planeIntersectionPoint.set(planeIntersectionPointArray[i],\n                                               planeIntersectionPointArray[idx2],\n                                               planeIntersectionPointArray[idx1]);\n                    if (this.boxContainsPoint(box, planeIntersectionPoint, 0.0001)) {\n                        if (outHit) {\n                            outHit.origin.copy(planeIntersectionPoint);\n                            outHit.normal.copy(hitNormal).multiplyScalar(multiplier);\n                            outHit.distance = planeIntersectionPoint.sub(this.origin).length();\n                        }\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        };\n\n    }();\n\n    intersectSphere = function() {\n\n        const toSphereCenterVec = new THREE.Vector3();\n\n        return function(center, radius, outHit) {\n            toSphereCenterVec.copy(center).sub(this.origin);\n            const toClosestApproach = toSphereCenterVec.dot(this.direction);\n            const toClosestApproachSq = toClosestApproach * toClosestApproach;\n            const toSphereCenterSq = toSphereCenterVec.dot(toSphereCenterVec);\n            const diffSq = toSphereCenterSq - toClosestApproachSq;\n            const radiusSq = radius * radius;\n\n            if (diffSq > radiusSq) return false;\n\n            const thc = Math.sqrt(radiusSq - diffSq);\n            const t0 = toClosestApproach - thc;\n            const t1 = toClosestApproach + thc;\n\n            if (t1 < 0) return false;\n            let t = t0 < 0 ? t1 : t0;\n\n            if (outHit) {\n                outHit.origin.copy(this.origin).addScaledVector(this.direction, t);\n                outHit.normal.copy(outHit.origin).sub(center).normalize();\n                outHit.distance = t;\n            }\n            return true;\n        };\n\n    }();\n}\n","import * as THREE from 'three';\n\nexport class Hit {\n\n    constructor() {\n        this.origin = new THREE.Vector3();\n        this.normal = new THREE.Vector3();\n        this.distance = 0;\n        this.splatIndex = 0;\n    }\n\n    set(origin, normal, distance, splatIndex) {\n        this.origin.copy(origin);\n        this.normal.copy(normal);\n        this.distance = distance;\n        this.splatIndex = splatIndex;\n    }\n\n    clone() {\n        const hitClone = new Hit();\n        hitClone.origin.copy(this.origin);\n        hitClone.normal.copy(this.normal);\n        hitClone.distance = this.distance;\n        hitClone.splatIndex = this.splatIndex;\n        return hitClone;\n    }\n\n}\n","import * as THREE from 'three';\nimport { Ray } from './Ray.js';\nimport { Hit } from './Hit.js';\n\nexport class Raycaster {\n\n    constructor(origin, direction, raycastAgainstTrueSplatEllipsoid = false) {\n        this.ray = new Ray(origin, direction);\n        this.raycastAgainstTrueSplatEllipsoid = raycastAgainstTrueSplatEllipsoid;\n    }\n\n    setFromCameraAndScreenPosition = function() {\n\n        const ndcCoords = new THREE.Vector2();\n\n        return function(camera, screenPosition, screenDimensions) {\n            ndcCoords.x = screenPosition.x / screenDimensions.x * 2.0 - 1.0;\n            ndcCoords.y = (screenDimensions.y - screenPosition.y) / screenDimensions.y * 2.0 - 1.0;\n            if (camera.isPerspectiveCamera) {\n                this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n                this.ray.direction.set(ndcCoords.x, ndcCoords.y, 0.5 ).unproject(camera).sub(this.ray.origin).normalize();\n                this.camera = camera;\n            } else if (camera.isOrthographicCamera) {\n                this.ray.origin.set(ndcCoords.x, ndcCoords.y,\n                                   (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);\n                this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n                this.camera = camera;\n            } else {\n                throw new Error('Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type');\n            }\n        };\n\n    }();\n\n    intersectSplatMesh = function() {\n\n        const toLocal = new THREE.Matrix4();\n        const fromLocal = new THREE.Matrix4();\n        const sceneTransform = new THREE.Matrix4();\n        const localRay = new Ray();\n        const tempPoint = new THREE.Vector3();\n\n        return function(splatMesh, outHits = []) {\n            const splatTree = splatMesh.getSplatTree();\n\n            if (!splatTree) return;\n\n            for (let s = 0; s < splatTree.subTrees.length; s++) {\n                const subTree = splatTree.subTrees[s];\n\n                fromLocal.copy(splatMesh.matrixWorld);\n                if (splatMesh.dynamicMode) {\n                    splatMesh.getSceneTransform(s, sceneTransform);\n                    fromLocal.multiply(sceneTransform);\n                }\n                toLocal.copy(fromLocal).invert();\n\n                localRay.origin.copy(this.ray.origin).applyMatrix4(toLocal);\n                localRay.direction.copy(this.ray.origin).add(this.ray.direction);\n                localRay.direction.applyMatrix4(toLocal).sub(localRay.origin).normalize();\n\n                const outHitsForSubTree = [];\n                if (subTree.rootNode) {\n                    this.castRayAtSplatTreeNode(localRay, splatTree, subTree.rootNode, outHitsForSubTree);\n                }\n\n                outHitsForSubTree.forEach((hit) => {\n                    hit.origin.applyMatrix4(fromLocal);\n                    hit.normal.applyMatrix4(fromLocal).normalize();\n                    hit.distance = tempPoint.copy(hit.origin).sub(this.ray.origin).length();\n                });\n\n                outHits.push(...outHitsForSubTree);\n            }\n\n            outHits.sort((a, b) => {\n                if (a.distance > b.distance) return 1;\n                else return -1;\n            });\n\n            return outHits;\n        };\n\n    }();\n\n    castRayAtSplatTreeNode = function() {\n\n        const tempColor = new THREE.Vector4();\n        const tempCenter = new THREE.Vector3();\n        const tempScale = new THREE.Vector3();\n        const tempRotation = new THREE.Quaternion();\n        const tempHit = new Hit();\n        const scaleEpsilon = 0.0000001;\n\n        const origin = new THREE.Vector3(0, 0, 0);\n        const uniformScaleMatrix = new THREE.Matrix4();\n        const scaleMatrix = new THREE.Matrix4();\n        const rotationMatrix = new THREE.Matrix4();\n        const toSphereSpace = new THREE.Matrix4();\n        const fromSphereSpace = new THREE.Matrix4();\n        const tempRay = new Ray();\n\n        return function(ray, splatTree, node, outHits = []) {\n            if (!ray.intersectBox(node.boundingBox)) {\n                return;\n            }\n            if (node.data && node.data.indexes && node.data.indexes.length > 0) {\n                for (let i = 0; i < node.data.indexes.length; i++) {\n                    const splatGlobalIndex = node.data.indexes[i];\n                    splatTree.splatMesh.getSplatColor(splatGlobalIndex, tempColor);\n                    splatTree.splatMesh.getSplatCenter(splatGlobalIndex, tempCenter);\n                    splatTree.splatMesh.getSplatScaleAndRotation(splatGlobalIndex, tempScale, tempRotation);\n\n                    if (tempScale.x <= scaleEpsilon || tempScale.y <= scaleEpsilon || tempScale.z <= scaleEpsilon) {\n                        continue;\n                    }\n\n                    if (!this.raycastAgainstTrueSplatEllipsoid) {\n                        const radius = (tempScale.x + tempScale.y + tempScale.z) / 3;\n                        if (ray.intersectSphere(tempCenter, radius, tempHit)) {\n                            const hitClone = tempHit.clone();\n                            hitClone.splatIndex = splatGlobalIndex;\n                            outHits.push(hitClone);\n                        }\n                    } else {\n                        scaleMatrix.makeScale(tempScale.x, tempScale.y, tempScale.z);\n                        rotationMatrix.makeRotationFromQuaternion(tempRotation);\n                        const uniformScale = Math.log10(tempColor.w) * 2.0;\n                        uniformScaleMatrix.makeScale(uniformScale, uniformScale, uniformScale);\n                        fromSphereSpace.copy(uniformScaleMatrix).multiply(rotationMatrix).multiply(scaleMatrix);\n                        toSphereSpace.copy(fromSphereSpace).invert();\n                        tempRay.origin.copy(ray.origin).sub(tempCenter).applyMatrix4(toSphereSpace);\n                        tempRay.direction.copy(ray.origin).add(ray.direction).sub(tempCenter);\n                        tempRay.direction.applyMatrix4(toSphereSpace).sub(tempRay.origin).normalize();\n                        if (tempRay.intersectSphere(origin, 1.0, tempHit)) {\n                            const hitClone = tempHit.clone();\n                            hitClone.splatIndex = splatGlobalIndex;\n                            hitClone.origin.applyMatrix4(fromSphereSpace).add(tempCenter);\n                            outHits.push(hitClone);\n                        }\n                    }\n                }\n             }\n            if (node.children && node.children.length > 0) {\n                for (let child of node.children) {\n                    this.castRayAtSplatTreeNode(ray, splatTree, child, outHits);\n                }\n            }\n            return outHits;\n        };\n\n    }();\n}\n","import * as THREE from 'three';\n\n/**\n * SplatScene: Descriptor for a single splat scene managed by an instance of SplatMesh.\n */\nexport class SplatScene {\n\n    constructor(splatBuffer, position = new THREE.Vector3(), quaternion = new THREE.Quaternion(),\n                scale = new THREE.Vector3(1, 1, 1), minimumAlpha = 1) {\n        this.splatBuffer = splatBuffer;\n        this.position = position.clone();\n        this.quaternion = quaternion.clone();\n        this.scale = scale.clone();\n        this.transform = new THREE.Matrix4();\n        this.minimumAlpha = minimumAlpha;\n        this.updateTransform();\n    }\n\n    copyTransformData(otherScene) {\n        this.position.copy(otherScene.position);\n        this.quaternion.copy(otherScene.quaternion);\n        this.scale.copy(otherScene.scale);\n        this.transform.copy(otherScene.transform);\n    }\n\n    updateTransform() {\n        this.transform.compose(this.position, this.quaternion, this.scale);\n    }\n}\n","import * as THREE from 'three';\nimport { delayedExecute } from '../Util.js';\n\nclass SplatTreeNode {\n\n    static idGen = 0;\n\n    constructor(min, max, depth, id) {\n        this.min = new THREE.Vector3().copy(min);\n        this.max = new THREE.Vector3().copy(max);\n        this.boundingBox = new THREE.Box3(this.min, this.max);\n        this.center = new THREE.Vector3().copy(this.max).sub(this.min).multiplyScalar(0.5).add(this.min);\n        this.depth = depth;\n        this.children = [];\n        this.data = null;\n        this.id = id || SplatTreeNode.idGen++;\n    }\n\n}\n\nclass SplatSubTree {\n\n    constructor(maxDepth, maxCentersPerNode) {\n        this.maxDepth = maxDepth;\n        this.maxCentersPerNode = maxCentersPerNode;\n        this.sceneDimensions = new THREE.Vector3();\n        this.sceneMin = new THREE.Vector3();\n        this.sceneMax = new THREE.Vector3();\n        this.rootNode = null;\n        this.nodesWithIndexes = [];\n        this.splatMesh = null;\n    }\n\n    static convertWorkerSubTreeNode(workerSubTreeNode) {\n        const minVector = new THREE.Vector3().fromArray(workerSubTreeNode.min);\n        const maxVector = new THREE.Vector3().fromArray(workerSubTreeNode.max);\n        const convertedNode = new SplatTreeNode(minVector, maxVector, workerSubTreeNode.depth, workerSubTreeNode.id);\n        if (workerSubTreeNode.data.indexes) {\n            convertedNode.data = {\n                'indexes': []\n            };\n            for (let index of workerSubTreeNode.data.indexes) {\n                convertedNode.data.indexes.push(index);\n            }\n        }\n        if (workerSubTreeNode.children) {\n            for (let child of workerSubTreeNode.children) {\n                convertedNode.children.push(SplatSubTree.convertWorkerSubTreeNode(child));\n            }\n        }\n        return convertedNode;\n    }\n\n    static convertWorkerSubTree(workerSubTree, splatMesh) {\n        const convertedSubTree = new SplatSubTree(workerSubTree.maxDepth, workerSubTree.maxCentersPerNode);\n        convertedSubTree.sceneMin = new THREE.Vector3().fromArray(workerSubTree.sceneMin);\n        convertedSubTree.sceneMax = new THREE.Vector3().fromArray(workerSubTree.sceneMax);\n\n        convertedSubTree.splatMesh = splatMesh;\n        convertedSubTree.rootNode = SplatSubTree.convertWorkerSubTreeNode(workerSubTree.rootNode);\n\n\n        const visitLeavesFromNode = (node, visitFunc) => {\n            if (node.children.length === 0) visitFunc(node);\n            for (let child of node.children) {\n                visitLeavesFromNode(child, visitFunc);\n            }\n        };\n\n        convertedSubTree.nodesWithIndexes = [];\n        visitLeavesFromNode(convertedSubTree.rootNode, (node) => {\n            if (node.data && node.data.indexes && node.data.indexes.length > 0) {\n                convertedSubTree.nodesWithIndexes.push(node);\n            }\n        });\n\n        return convertedSubTree;\n    }\n}\n\nfunction createSplatTreeWorker(self) {\n\n    let WorkerSplatTreeNodeIDGen = 0;\n\n    class WorkerBox3 {\n\n        constructor(min, max) {\n            this.min = [min[0], min[1], min[2]];\n            this.max = [max[0], max[1], max[2]];\n        }\n\n        containsPoint(point) {\n            return point[0] >= this.min[0] && point[0] <= this.max[0] &&\n                   point[1] >= this.min[1] && point[1] <= this.max[1] &&\n                   point[2] >= this.min[2] && point[2] <= this.max[2];\n        }\n    }\n\n    class WorkerSplatSubTree {\n\n        constructor(maxDepth, maxCentersPerNode) {\n            this.maxDepth = maxDepth;\n            this.maxCentersPerNode = maxCentersPerNode;\n            this.sceneDimensions = [];\n            this.sceneMin = [];\n            this.sceneMax = [];\n            this.rootNode = null;\n            this.addedIndexes = {};\n            this.nodesWithIndexes = [];\n            this.splatMesh = null;\n            this.disposed = false;\n        }\n\n    }\n\n    class WorkerSplatTreeNode {\n\n        constructor(min, max, depth, id) {\n            this.min = [min[0], min[1], min[2]];\n            this.max = [max[0], max[1], max[2]];\n            this.center = [(max[0] - min[0]) * 0.5 + min[0],\n                           (max[1] - min[1]) * 0.5 + min[1],\n                           (max[2] - min[2]) * 0.5 + min[2]];\n            this.depth = depth;\n            this.children = [];\n            this.data = null;\n            this.id = id || WorkerSplatTreeNodeIDGen++;\n        }\n\n    }\n\n    processSplatTreeNode = function(tree, node, indexToCenter, sceneCenters) {\n        const splatCount = node.data.indexes.length;\n\n        if (splatCount < tree.maxCentersPerNode || node.depth > tree.maxDepth) {\n            const newIndexes = [];\n            for (let i = 0; i < node.data.indexes.length; i++) {\n                if (!tree.addedIndexes[node.data.indexes[i]]) {\n                    newIndexes.push(node.data.indexes[i]);\n                    tree.addedIndexes[node.data.indexes[i]] = true;\n                }\n            }\n            node.data.indexes = newIndexes;\n            node.data.indexes.sort((a, b) => {\n                if (a > b) return 1;\n                else return -1;\n            });\n            tree.nodesWithIndexes.push(node);\n            return;\n        }\n\n        const nodeDimensions = [node.max[0] - node.min[0],\n                                node.max[1] - node.min[1],\n                                node.max[2] - node.min[2]];\n        const halfDimensions = [nodeDimensions[0] * 0.5,\n                                nodeDimensions[1] * 0.5,\n                                nodeDimensions[2] * 0.5];\n        const nodeCenter = [node.min[0] + halfDimensions[0],\n                            node.min[1] + halfDimensions[1],\n                            node.min[2] + halfDimensions[2]];\n\n        const childrenBounds = [\n            // top section, clockwise from upper-left (looking from above, +Y)\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1], nodeCenter[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2] + halfDimensions[2]]),\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2]],\n                           [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2] + halfDimensions[2]]),\n\n            // bottom section, clockwise from lower-left (looking from above, +Y)\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0], nodeCenter[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]]),\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\n                           [nodeCenter[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]]),\n        ];\n\n        const splatCounts = [];\n        const baseIndexes = [];\n        for (let i = 0; i < childrenBounds.length; i++) {\n            splatCounts[i] = 0;\n            baseIndexes[i] = [];\n        }\n\n        const center = [0, 0, 0];\n        for (let i = 0; i < splatCount; i++) {\n            const splatGlobalIndex = node.data.indexes[i];\n            const centerBase = indexToCenter[splatGlobalIndex];\n            center[0] = sceneCenters[centerBase];\n            center[1] = sceneCenters[centerBase + 1];\n            center[2] = sceneCenters[centerBase + 2];\n            for (let j = 0; j < childrenBounds.length; j++) {\n                if (childrenBounds[j].containsPoint(center)) {\n                    splatCounts[j]++;\n                    baseIndexes[j].push(splatGlobalIndex);\n                }\n            }\n        }\n\n        for (let i = 0; i < childrenBounds.length; i++) {\n            const childNode = new WorkerSplatTreeNode(childrenBounds[i].min, childrenBounds[i].max, node.depth + 1);\n            childNode.data = {\n                'indexes': baseIndexes[i]\n            };\n            node.children.push(childNode);\n        }\n\n        node.data = {};\n        for (let child of node.children) {\n            processSplatTreeNode(tree, child, indexToCenter, sceneCenters);\n        }\n        return;\n    };\n\n    const buildSubTree = (sceneCenters, maxDepth, maxCentersPerNode) => {\n\n        const sceneMin = [0, 0, 0];\n        const sceneMax = [0, 0, 0];\n        const indexes = [];\n        const centerCount = Math.floor(sceneCenters.length / 4);\n        for ( let i = 0; i < centerCount; i ++) {\n            const base = i * 4;\n            const x = sceneCenters[base];\n            const y = sceneCenters[base + 1];\n            const z = sceneCenters[base + 2];\n            const index = Math.round(sceneCenters[base + 3]);\n            if (i === 0 || x < sceneMin[0]) sceneMin[0] = x;\n            if (i === 0 || x > sceneMax[0]) sceneMax[0] = x;\n            if (i === 0 || y < sceneMin[1]) sceneMin[1] = y;\n            if (i === 0 || y > sceneMax[1]) sceneMax[1] = y;\n            if (i === 0 || z < sceneMin[2]) sceneMin[2] = z;\n            if (i === 0 || z > sceneMax[2]) sceneMax[2] = z;\n            indexes.push(index);\n        }\n        const subTree = new WorkerSplatSubTree(maxDepth, maxCentersPerNode);\n        subTree.sceneMin = sceneMin;\n        subTree.sceneMax = sceneMax;\n        subTree.rootNode = new WorkerSplatTreeNode(subTree.sceneMin, subTree.sceneMax, 0);\n        subTree.rootNode.data = {\n            'indexes': indexes\n        };\n\n        return subTree;\n    };\n\n    function createSplatTree(allCenters, maxDepth, maxCentersPerNode) {\n        const indexToCenter = [];\n        for (let sceneCenters of allCenters) {\n            const centerCount = Math.floor(sceneCenters.length / 4);\n            for ( let i = 0; i < centerCount; i ++) {\n                const base = i * 4;\n                const index = Math.round(sceneCenters[base + 3]);\n                indexToCenter[index] = base;\n            }\n        }\n        const subTrees = [];\n        for (let sceneCenters of allCenters) {\n            const subTree = buildSubTree(sceneCenters, maxDepth, maxCentersPerNode);\n            subTrees.push(subTree);\n            processSplatTreeNode(subTree, subTree.rootNode, indexToCenter, sceneCenters);\n        }\n        self.postMessage({\n            'subTrees': subTrees\n        });\n    }\n\n    self.onmessage = (e) => {\n        if (e.data.process) {\n            createSplatTree(e.data.process.centers, e.data.process.maxDepth, e.data.process.maxCentersPerNode);\n        }\n    };\n}\n\nfunction workerProcessCenters(splatTreeWorker, centers, transferBuffers, maxDepth, maxCentersPerNode) {\n    splatTreeWorker.postMessage({\n        'process': {\n            'centers': centers,\n            'maxDepth': maxDepth,\n            'maxCentersPerNode': maxCentersPerNode\n        }\n    }, transferBuffers);\n}\n\nfunction checkAndCreateWorker() {\n    const splatTreeWorker = new Worker(\n        URL.createObjectURL(\n            new Blob(['(', createSplatTreeWorker.toString(), ')(self)'], {\n                type: 'application/javascript',\n            }),\n        ),\n    );\n    return splatTreeWorker;\n}\n\n/**\n * SplatTree: Octree tailored to splat data from a SplatMesh instance\n */\nexport class SplatTree {\n\n    constructor(maxDepth, maxCentersPerNode) {\n        this.maxDepth = maxDepth;\n        this.maxCentersPerNode = maxCentersPerNode;\n        this.subTrees = [];\n        this.splatMesh = null;\n    }\n\n\n    dispose() {\n        this.diposeSplatTreeWorker();\n        this.disposed = true;\n    }\n\n    diposeSplatTreeWorker() {\n        if (this.splatTreeWorker) this.splatTreeWorker.terminate();\n        this.splatTreeWorker = null;\n    };\n\n    /**\n     * Construct this instance of SplatTree from an instance of SplatMesh.\n     *\n     * @param {SplatMesh} splatMesh The instance of SplatMesh from which to construct this splat tree.\n     * @param {function} filterFunc Optional function to filter out unwanted splats.\n     * @param {function} onIndexesUpload Function to be called when the upload of splat centers to the splat tree\n     *                                   builder worker starts and finishes.\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n     *                                           the format produced by the splat tree builder worker starts and ends.\n     * @return {undefined}\n     */\n    processSplatMesh = function(splatMesh, filterFunc = () => true, onIndexesUpload, onSplatTreeConstruction) {\n        if (!this.splatTreeWorker) this.splatTreeWorker = checkAndCreateWorker();\n\n        this.splatMesh = splatMesh;\n        this.subTrees = [];\n        const center = new THREE.Vector3();\n\n        const addCentersForScene = (splatOffset, splatCount) => {\n            const sceneCenters = new Float32Array(splatCount * 4);\n            let addedCount = 0;\n            for (let i = 0; i < splatCount; i++) {\n                const globalSplatIndex = i + splatOffset;\n                if (filterFunc(globalSplatIndex)) {\n                    splatMesh.getSplatCenter(globalSplatIndex, center);\n                    const addBase = addedCount * 4;\n                    sceneCenters[addBase] = center.x;\n                    sceneCenters[addBase + 1] = center.y;\n                    sceneCenters[addBase + 2] = center.z;\n                    sceneCenters[addBase + 3] = globalSplatIndex;\n                    addedCount++;\n                }\n            }\n            return sceneCenters;\n        };\n\n        return new Promise((resolve) => {\n\n            const checkForEarlyExit = () => {\n                if (this.disposed) {\n                    this.diposeSplatTreeWorker();\n                    resolve();\n                    return true;\n                }\n                return false;\n            };\n\n            if (onIndexesUpload) onIndexesUpload(false);\n\n            delayedExecute(() => {\n\n                if (checkForEarlyExit()) return;\n\n                const allCenters = [];\n                if (splatMesh.dynamicMode) {\n                    let splatOffset = 0;\n                    for (let s = 0; s < splatMesh.scenes.length; s++) {\n                        const scene = splatMesh.getScene(s);\n                        const splatCount = scene.splatBuffer.getSplatCount();\n                        const sceneCenters = addCentersForScene(splatOffset, splatCount);\n                        allCenters.push(sceneCenters);\n                        splatOffset += splatCount;\n                    }\n                } else {\n                    const sceneCenters = addCentersForScene(0, splatMesh.getSplatCount());\n                    allCenters.push(sceneCenters);\n                }\n\n                this.splatTreeWorker.onmessage = (e) => {\n\n                    if (checkForEarlyExit()) return;\n\n                    if (e.data.subTrees) {\n\n                        if (onSplatTreeConstruction) onSplatTreeConstruction(false);\n\n                        delayedExecute(() => {\n\n                            if (checkForEarlyExit()) return;\n\n                            for (let workerSubTree of e.data.subTrees) {\n                                const convertedSubTree = SplatSubTree.convertWorkerSubTree(workerSubTree, splatMesh);\n                                this.subTrees.push(convertedSubTree);\n                            }\n                            this.diposeSplatTreeWorker();\n\n                            if (onSplatTreeConstruction) onSplatTreeConstruction(true);\n\n                            delayedExecute(() => {\n                                resolve();\n                            });\n\n                        });\n                    }\n                };\n\n                delayedExecute(() => {\n                    if (checkForEarlyExit()) return;\n                    if (onIndexesUpload) onIndexesUpload(true);\n                    const transferBuffers = allCenters.map((array) => array.buffer);\n                    workerProcessCenters(this.splatTreeWorker, allCenters, transferBuffers, this.maxDepth, this.maxCentersPerNode);\n                });\n\n            });\n\n        });\n\n    };\n\n    countLeaves() {\n\n        let leafCount = 0;\n        this.visitLeaves(() => {\n            leafCount++;\n        });\n\n        return leafCount;\n    }\n\n    visitLeaves(visitFunc) {\n\n        const visitLeavesFromNode = (node, visitFunc) => {\n            if (node.children.length === 0) visitFunc(node);\n            for (let child of node.children) {\n                visitLeavesFromNode(child, visitFunc);\n            }\n        };\n\n        for (let subTree of this.subTrees) {\n            visitLeavesFromNode(subTree.rootNode, visitFunc);\n        }\n    }\n\n}\n","function WebGLExtensions( gl ) {\n\n    const extensions = {};\n\n    function getExtension( name ) {\n\n        if ( extensions[name] !== undefined ) {\n\n            return extensions[name];\n\n        }\n\n        let extension;\n\n        switch ( name ) {\n\n            case 'WEBGL_depth_texture':\n                extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) ||\n                            gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n                break;\n\n            case 'EXT_texture_filter_anisotropic':\n                extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) ||\n                            gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) ||\n                            gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n                break;\n\n            case 'WEBGL_compressed_texture_s3tc':\n                extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) ||\n                            gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) ||\n                            gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n                break;\n\n            case 'WEBGL_compressed_texture_pvrtc':\n                extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) ||\n                           gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n                break;\n\n            default:\n                extension = gl.getExtension( name );\n\n        }\n\n        extensions[name] = extension;\n\n        return extension;\n\n    }\n\n    return {\n\n        has: function( name ) {\n\n            return getExtension( name ) !== null;\n\n        },\n\n        init: function( capabilities ) {\n\n            if ( capabilities.isWebGL2 ) {\n\n                getExtension( 'EXT_color_buffer_float' );\n                getExtension( 'WEBGL_clip_cull_distance' );\n\n            } else {\n\n                getExtension( 'WEBGL_depth_texture' );\n                getExtension( 'OES_texture_float' );\n                getExtension( 'OES_texture_half_float' );\n                getExtension( 'OES_texture_half_float_linear' );\n                getExtension( 'OES_standard_derivatives' );\n                getExtension( 'OES_element_index_uint' );\n                getExtension( 'OES_vertex_array_object' );\n                getExtension( 'ANGLE_instanced_arrays' );\n\n            }\n\n            getExtension( 'OES_texture_float_linear' );\n            getExtension( 'EXT_color_buffer_half_float' );\n            getExtension( 'WEBGL_multisampled_render_to_texture' );\n\n        },\n\n        get: function( name ) {\n\n            const extension = getExtension( name );\n\n            if ( extension === null ) {\n\n                console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n            }\n\n            return extension;\n\n        }\n\n    };\n\n}\n\nexport { WebGLExtensions };\n","function WebGLCapabilities( gl, extensions, parameters ) {\n\n    let maxAnisotropy;\n\n    function getMaxAnisotropy() {\n\n        if ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n        if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n            const extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n            maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n        } else {\n\n            maxAnisotropy = 0;\n\n        }\n\n        return maxAnisotropy;\n\n    }\n\n    function getMaxPrecision( precision ) {\n\n        if ( precision === 'highp' ) {\n\n            if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n                gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n                return 'highp';\n\n            }\n\n            precision = 'mediump';\n\n        }\n\n        if ( precision === 'mediump' ) {\n\n            if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n                gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n                return 'mediump';\n\n            }\n\n        }\n\n        return 'lowp';\n\n    }\n\n    const isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl.constructor.name === 'WebGL2RenderingContext';\n\n    let precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n    const maxPrecision = getMaxPrecision( precision );\n\n    if ( maxPrecision !== precision ) {\n\n        console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n        precision = maxPrecision;\n\n    }\n\n    const drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );\n\n    const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n    const maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n    const maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n    const maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n    const maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n    const maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n    const maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n    const maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n    const maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n    const vertexTextures = maxVertexTextures > 0;\n    const floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );\n    const floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n    const maxSamples = isWebGL2 ? gl.getParameter( gl.MAX_SAMPLES ) : 0;\n\n    return {\n\n        isWebGL2: isWebGL2,\n\n        drawBuffers: drawBuffers,\n\n        getMaxAnisotropy: getMaxAnisotropy,\n        getMaxPrecision: getMaxPrecision,\n\n        precision: precision,\n        logarithmicDepthBuffer: logarithmicDepthBuffer,\n\n        maxTextures: maxTextures,\n        maxVertexTextures: maxVertexTextures,\n        maxTextureSize: maxTextureSize,\n        maxCubemapSize: maxCubemapSize,\n\n        maxAttributes: maxAttributes,\n        maxVertexUniforms: maxVertexUniforms,\n        maxVaryings: maxVaryings,\n        maxFragmentUniforms: maxFragmentUniforms,\n\n        vertexTextures: vertexTextures,\n        floatFragmentTextures: floatFragmentTextures,\n        floatVertexTextures: floatVertexTextures,\n\n        maxSamples: maxSamples\n\n    };\n\n}\n\n\nexport { WebGLCapabilities };\n","export const SceneRevealMode = {\n    Default: 0,\n    Gradual: 1,\n    Instant: 2\n};\n","export const LogLevel = {\n    None: 0,\n    Error: 1,\n    Warning: 2,\n    Info: 3,\n    Debug: 4\n};\n","import * as THREE from 'three';\nimport { SplatScene } from './SplatScene.js';\nimport { SplatTree } from './splattree/SplatTree.js';\nimport { WebGLExtensions } from './three-shim/WebGLExtensions.js';\nimport { WebGLCapabilities } from './three-shim/WebGLCapabilities.js';\nimport { uintEncodedFloat, rgbaArrayToInteger } from './Util.js';\nimport { Constants } from './Constants.js';\nimport { SceneRevealMode } from './SceneRevealMode.js';\nimport { LogLevel } from './LogLevel.js';\n\nconst dummyGeometry = new THREE.BufferGeometry();\nconst dummyMaterial = new THREE.MeshBasicMaterial();\n\nconst COVARIANCES_ELEMENTS_PER_SPLAT = 6;\nconst CENTER_COLORS_ELEMENTS_PER_SPLAT = 4;\n\nconst COVARIANCES_ELEMENTS_PER_TEXEL = 2;\nconst CENTER_COLORS_ELEMENTS_PER_TEXEL = 4;\nconst TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL = 1;\n\nconst SCENE_FADEIN_RATE_FAST = 0.012;\nconst SCENE_FADEIN_RATE_GRADUAL = 0.003;\n\nconst VISIBLE_REGION_EXPANSION_DELTA = 1;\n\n/**\n * SplatMesh: Container for one or more splat scenes, abstracting them into a single unified container for\n * splat data. Additionally contains data structures and code to make the splat data renderable as a Three.js mesh.\n */\nexport class SplatMesh extends THREE.Mesh {\n\n    constructor(dynamicMode = true, halfPrecisionCovariancesOnGPU = false, devicePixelRatio = 1,\n                enableDistancesComputationOnGPU = true, integerBasedDistancesComputation = false,\n                antialiased = false, maxScreenSpaceSplatSize = 2048, logLevel = LogLevel.None) {\n        super(dummyGeometry, dummyMaterial);\n        // Reference to a Three.js renderer\n        this.renderer = undefined;\n        // Use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\n        this.halfPrecisionCovariancesOnGPU = halfPrecisionCovariancesOnGPU;\n        // When 'dynamicMode' is true, scenes are assumed to be non-static. Dynamic scenes are handled differently\n        // and certain optimizations cannot be made for them. Additionally, by default, all splat data retrieved from\n        // this splat mesh will not have their scene transform applied to them if the splat mesh is dynamic. That\n        // can be overriden via parameters to the individual functions that are used to retrieve splat data.\n        this.dynamicMode = dynamicMode;\n        // Ratio of the resolution in physical pixels to the resolution in CSS pixels for the current display device\n        this.devicePixelRatio = devicePixelRatio;\n        // Use a transform feedback to calculate splat distances from the camera\n        this.enableDistancesComputationOnGPU = enableDistancesComputationOnGPU;\n        // Use a faster integer-based approach for calculating splat distances from the camera\n        this.integerBasedDistancesComputation = integerBasedDistancesComputation;\n        // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\n        // substantially different resolution than that at which they were rendered during training. This will only work correctly\n        // for models that were trained using a process that utilizes this compensation calculation. For more details:\n        // https://github.com/nerfstudio-project/gsplat/pull/117\n        // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\n        this.antialiased = antialiased;\n        // Specify the maximum clip space splat size, can help deal with large splats that get too unwieldy\n        this.maxScreenSpaceSplatSize = maxScreenSpaceSplatSize;\n        // The verbosity of console logging\n        this.logLevel = logLevel;\n        // The individual splat scenes stored in this splat mesh, each containing their own transform\n        this.scenes = [];\n        // Special octree tailored to SplatMesh instances\n        this.splatTree = null;\n        this.baseSplatTree = null;\n        // Textures in which splat data will be stored for rendering\n        this.splatDataTextures = {};\n        this.distancesTransformFeedback = {\n            'id': null,\n            'vertexShader': null,\n            'fragmentShader': null,\n            'program': null,\n            'centersBuffer': null,\n            'transformIndexesBuffer': null,\n            'outDistancesBuffer': null,\n            'centersLoc': -1,\n            'modelViewProjLoc': -1,\n            'transformIndexesLoc': -1,\n            'transformsLocs': []\n        };\n        this.globalSplatIndexToLocalSplatIndexMap = [];\n        this.globalSplatIndexToSceneIndexMap = [];\n\n        this.lastBuildSplatCount = 0;\n        this.lastBuildScenes = [];\n        this.lastBuildMaxSplatCount = 0;\n        this.lastBuildSceneCount = 0;\n        this.firstRenderTime = -1;\n        this.finalBuild = false;\n\n        this.webGLUtils = null;\n\n        this.boundingBox = new THREE.Box3();\n        this.calculatedSceneCenter = new THREE.Vector3();\n        this.maxSplatDistanceFromSceneCenter = 0;\n        this.visibleRegionBufferRadius = 0;\n        this.visibleRegionRadius = 0;\n        this.visibleRegionFadeStartRadius = 0;\n        this.visibleRegionChanging = false;\n\n        this.splatScale = 1.0;\n        this.pointCloudModeEnabled = false;\n\n        this.disposed = false;\n        this.lastRenderer = null;\n        this.visible = false;\n    }\n\n    /**\n     * Build the Three.js material that is used to render the splats.\n     * @param {number} dynamicMode If true, it means the scene geometry represented by this splat mesh is not stationary or\n     *                             that the splat count might change\n     * @param {boolean} antialiased If true, calculate compensation factor to deal with gaussians being rendered at a significantly\n     *                              different resolution than that of their training\n     * @param {number} maxScreenSpaceSplatSize The maximum clip space splat size\n     * @param {number} splatScale Value by which all splats are scaled in screen-space (default is 1.0)\n     * @param {number} pointCloudModeEnabled Render all splats as screen-space circles\n     * @return {THREE.ShaderMaterial}\n     */\n    static buildMaterial(dynamicMode = false, antialiased = false,\n                         maxScreenSpaceSplatSize = 2048, splatScale = 1.0, pointCloudModeEnabled = false) {\n\n        // Contains the code to project 3D covariance to 2D and from there calculate the quad (using the eigen vectors of the\n        // 2D covariance) that is ultimately rasterized\n        let vertexShaderSource = `\n            precision highp float;\n            #include <common>\n\n            attribute uint splatIndex;\n\n            uniform highp sampler2D covariancesTexture;\n            uniform highp usampler2D centersColorsTexture;`;\n\n        if (dynamicMode) {\n            vertexShaderSource += `\n                uniform highp usampler2D transformIndexesTexture;\n                uniform highp mat4 transforms[${Constants.MaxScenes}];\n                uniform vec2 transformIndexesTextureSize;\n            `;\n        }\n\n        vertexShaderSource += `\n            uniform vec2 focal;\n            uniform float orthoZoom;\n            uniform int orthographicMode;\n            uniform int pointCloudModeEnabled;\n            uniform float inverseFocalAdjustment;\n            uniform vec2 viewport;\n            uniform vec2 basisViewport;\n            uniform vec2 covariancesTextureSize;\n            uniform vec2 centersColorsTextureSize;\n            uniform float visibleRegionRadius;\n            uniform float visibleRegionFadeStartRadius;\n            uniform float firstRenderTime;\n            uniform float currentTime;\n            uniform int fadeInComplete;\n            uniform vec3 sceneCenter;\n            uniform float splatScale;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            const float sqrt8 = sqrt(8.0);\n            const float minAlpha = 1.0 / 255.0;\n\n            const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\n            const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\n            const uvec4 shift4 = uvec4(0, 8, 16, 24);\n            vec4 uintToRGBAVec (uint u) {\n               uvec4 urgba = mask4 & u;\n               urgba = urgba >> shift4;\n               vec4 rgba = vec4(urgba) * encodeNorm4;\n               return rgba;\n            }\n\n            vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\n                vec2 samplerUV = vec2(0.0, 0.0);\n                float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\n                samplerUV.y = float(floor(d)) / dimensions.y;\n                samplerUV.x = fract(d);\n                return samplerUV;\n            }\n\n            void main () {\n\n                uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\n                vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));`;\n\n            if (dynamicMode) {\n                vertexShaderSource += `\n                    uint transformIndex = texture(transformIndexesTexture, getDataUV(1, 0, transformIndexesTextureSize)).r;\n                    mat4 transform = transforms[transformIndex];\n                    mat4 transformModelViewMatrix = modelViewMatrix * transform;\n                `;\n            } else {\n                vertexShaderSource += `mat4 transformModelViewMatrix = modelViewMatrix;`;\n            }\n\n            vertexShaderSource += `\n                vec4 viewCenter = transformModelViewMatrix * vec4(splatCenter, 1.0);\n\n                vec4 clipCenter = projectionMatrix * viewCenter;\n\n                float clip = 1.2 * clipCenter.w;\n                if (clipCenter.z < -clip || clipCenter.x < -clip || clipCenter.x > clip || clipCenter.y < -clip || clipCenter.y > clip) {\n                    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n                    return;\n                }\n\n                vPosition = position.xy;\n                vColor = uintToRGBAVec(sampledCenterColor.r);\n\n                vec2 sampledCovarianceA = texture(covariancesTexture, getDataUV(3, 0, covariancesTextureSize)).rg;\n                vec2 sampledCovarianceB = texture(covariancesTexture, getDataUV(3, 1, covariancesTextureSize)).rg;\n                vec2 sampledCovarianceC = texture(covariancesTexture, getDataUV(3, 2, covariancesTextureSize)).rg;\n\n                vec3 cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rg, sampledCovarianceB.r);\n                vec3 cov3D_M22_M23_M33 = vec3(sampledCovarianceB.g, sampledCovarianceC.rg);\n\n                // Construct the 3D covariance matrix\n                mat3 Vrk = mat3(\n                    cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\n                    cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\n                    cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\n                );\n\n                mat3 J;\n                if (orthographicMode == 1) {\n                    // Since the projection is linear, we don't need an approximation\n                    J = transpose(mat3(orthoZoom, 0.0, 0.0,\n                                       0.0, orthoZoom, 0.0,\n                                       0.0, 0.0, 0.0));\n                } else {\n                    // Construct the Jacobian of the affine approximation of the projection matrix. It will be used to transform the\n                    // 3D covariance matrix instead of using the actual projection matrix because that transformation would\n                    // require a non-linear component (perspective division) which would yield a non-gaussian result.\n                    float s = 1.0 / (viewCenter.z * viewCenter.z);\n                    J = mat3(\n                        focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\n                        0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\n                        0., 0., 0.\n                    );\n                }\n\n                // Concatenate the projection approximation with the model-view transformation\n                mat3 W = transpose(mat3(transformModelViewMatrix));\n                mat3 T = W * J;\n\n                // Transform the 3D covariance matrix (Vrk) to compute the 2D covariance matrix\n                mat3 cov2Dm = transpose(T) * Vrk * T;\n                `;\n\n            if (antialiased) {\n                vertexShaderSource += `\n                    float detOrig = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                    cov2Dm[0][0] += 0.3;\n                    cov2Dm[1][1] += 0.3;\n                    float detBlur = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                    float compensation = sqrt(max(detOrig / detBlur, 0.0));\n                `;\n            } else {\n                vertexShaderSource += `\n                    cov2Dm[0][0] += 0.3;\n                    cov2Dm[1][1] += 0.3;\n                    float compensation = 1.0;\n                `;\n            }\n\n            vertexShaderSource += `\n\n                vColor.a *= compensation;\n\n                if (vColor.a < minAlpha) return;\n\n                // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\n                // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\n                // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\n                // need cov2Dm[1][0] because it is a symetric matrix.\n                vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\n\n                vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\n\n                // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\n                // so that we can determine the 2D basis for the splat. This is done using the method described\n                // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n                // After calculating the eigen-values and eigen-vectors, we calculate the basis for rendering the splat\n                // by normalizing the eigen-vectors and then multiplying them by (sqrt(8) * eigen-value), which is\n                // equal to scaling them by sqrt(8) standard deviations.\n                //\n                // This is a different approach than in the original work at INRIA. In that work they compute the\n                // max extents of the projected splat in screen space to form a screen-space aligned bounding rectangle\n                // which forms the geometry that is actually rasterized. The dimensions of that bounding box are 3.0\n                // times the maximum eigen-value, or 3 standard deviations. They then use the inverse 2D covariance\n                // matrix (called 'conic') in the CUDA rendering thread to determine fragment opacity by calculating the\n                // full gaussian: exp(-0.5 * (X - mean) * conic * (X - mean)) * splat opacity\n                float a = cov2Dv.x;\n                float d = cov2Dv.z;\n                float b = cov2Dv.y;\n                float D = a * d - b * b;\n                float trace = a + d;\n                float traceOver2 = 0.5 * trace;\n                float term2 = sqrt(max(0.1f, traceOver2 * traceOver2 - D));\n                float eigenValue1 = traceOver2 + term2;\n                float eigenValue2 = traceOver2 - term2;\n\n                if (pointCloudModeEnabled == 1) {\n                    eigenValue1 = eigenValue2 = 0.2;\n                }\n\n                if (eigenValue2 <= 0.0) return;\n\n                vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\n                // since the eigen vectors are orthogonal, we derive the second one from the first\n                vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\n\n                // We use sqrt(8) standard deviations instead of 3 to eliminate more of the splat with a very low opacity.\n                vec2 basisVector1 = eigenVector1 * splatScale * min(sqrt8 * sqrt(eigenValue1), ${parseInt(maxScreenSpaceSplatSize)}.0);\n                vec2 basisVector2 = eigenVector2 * splatScale * min(sqrt8 * sqrt(eigenValue2), ${parseInt(maxScreenSpaceSplatSize)}.0);\n\n                if (fadeInComplete == 0) {\n                    float opacityAdjust = 1.0;\n                    float centerDist = length(splatCenter - sceneCenter);\n                    float renderTime = max(currentTime - firstRenderTime, 0.0);\n\n                    float fadeDistance = 0.75;\n                    float distanceLoadFadeInFactor = step(visibleRegionFadeStartRadius, centerDist);\n                    distanceLoadFadeInFactor = (1.0 - distanceLoadFadeInFactor) +\n                                               (1.0 - clamp((centerDist - visibleRegionFadeStartRadius) / fadeDistance, 0.0, 1.0)) *\n                                               distanceLoadFadeInFactor;\n                    opacityAdjust *= distanceLoadFadeInFactor;\n                    vColor.a *= opacityAdjust;\n                }\n\n                vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) *\n                                 basisViewport * 2.0 * inverseFocalAdjustment;\n\n                vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n                gl_Position = quadPos;\n\n                // Scale the position data we send to the fragment shader\n                vPosition *= sqrt8;\n            }`;\n\n        const fragmentShaderSource = `\n            precision highp float;\n            #include <common>\n \n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            void main () {\n                // Compute the positional squared distance from the center of the splat to the current fragment.\n                float A = dot(vPosition, vPosition);\n                // Since the positional data in vPosition has been scaled by sqrt(8), the squared result will be\n                // scaled by a factor of 8. If the squared result is larger than 8, it means it is outside the ellipse\n                // defined by the rectangle formed by vPosition. It also means it's farther\n                // away than sqrt(8) standard deviations from the mean.\n                if (A > 8.0) discard;\n                vec3 color = vColor.rgb;\n\n                // Since the rendered splat is scaled by sqrt(8), the inverse covariance matrix that is part of\n                // the gaussian formula becomes the identity matrix. We're then left with (X - mean) * (X - mean),\n                // and since 'mean' is zero, we have X * X, which is the same as A:\n                float opacity = exp(-0.5 * A) * vColor.a;\n\n                gl_FragColor = vec4(color.rgb, opacity);\n            }`;\n\n        const uniforms = {\n            'sceneCenter': {\n                'type': 'v3',\n                'value': new THREE.Vector3()\n            },\n            'fadeInComplete': {\n                'type': 'i',\n                'value': 0\n            },\n            'orthographicMode': {\n                'type': 'i',\n                'value': 0\n            },\n            'visibleRegionFadeStartRadius': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'visibleRegionRadius': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'currentTime': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'firstRenderTime': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'covariancesTexture': {\n                'type': 't',\n                'value': null\n            },\n            'centersColorsTexture': {\n                'type': 't',\n                'value': null\n            },\n            'focal': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'orthoZoom': {\n                'type': 'f',\n                'value': 1.0\n            },\n            'inverseFocalAdjustment': {\n                'type': 'f',\n                'value': 1.0\n            },\n            'viewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'basisViewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'debugColor': {\n                'type': 'v3',\n                'value': new THREE.Color()\n            },\n            'covariancesTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            },\n            'centersColorsTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            },\n            'splatScale': {\n                'type': 'f',\n                'value': splatScale\n            },\n            'pointCloudModeEnabled': {\n                'type': 'i',\n                'value': pointCloudModeEnabled ? 1 : 0\n            }\n        };\n\n        if (dynamicMode) {\n            uniforms['transformIndexesTexture'] = {\n                'type': 't',\n                'value': null\n            };\n            const transformMatrices = [];\n            for (let i = 0; i < Constants.MaxScenes; i++) {\n                transformMatrices.push(new THREE.Matrix4());\n            }\n            uniforms['transforms'] = {\n                'type': 'mat4',\n                'value': transformMatrices\n            };\n            uniforms['transformIndexesTextureSize'] = {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            };\n        }\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            alphaTest: 1.0,\n            blending: THREE.NormalBlending,\n            depthTest: true,\n            depthWrite: false,\n            side: THREE.DoubleSide\n        });\n\n        return material;\n    }\n\n    /**\n     * Build the Three.js geometry that will be used to render the splats. The geometry is instanced and is made up of\n     * vertices for a single quad as well as an attribute buffer for the splat indexes.\n     * @param {number} maxSplatCount The maximum number of splats that the geometry will need to accomodate\n     * @return {THREE.InstancedBufferGeometry}\n     */\n    static buildGeomtery(maxSplatCount) {\n\n        const baseGeometry = new THREE.BufferGeometry();\n        baseGeometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n        // Vertices for the instanced quad\n        const positionsArray = new Float32Array(4 * 3);\n        const positions = new THREE.BufferAttribute(positionsArray, 3);\n        baseGeometry.setAttribute('position', positions);\n        positions.setXYZ(0, -1.0, -1.0, 0.0);\n        positions.setXYZ(1, -1.0, 1.0, 0.0);\n        positions.setXYZ(2, 1.0, 1.0, 0.0);\n        positions.setXYZ(3, 1.0, -1.0, 0.0);\n        positions.needsUpdate = true;\n\n        const geometry = new THREE.InstancedBufferGeometry().copy(baseGeometry);\n\n        // Splat index buffer\n        const splatIndexArray = new Uint32Array(maxSplatCount);\n        const splatIndexes = new THREE.InstancedBufferAttribute(splatIndexArray, 1, false);\n        splatIndexes.setUsage(THREE.DynamicDrawUsage);\n        geometry.setAttribute('splatIndex', splatIndexes);\n\n        geometry.instanceCount = 0;\n\n        return geometry;\n    }\n\n    /**\n     * Build a container for each scene managed by this splat mesh based on an instance of SplatBuffer, along with optional\n     * transform data (position, scale, rotation) passed to the splat mesh during the build process.\n     * @param {Array<THREE.Matrix4>} splatBuffers SplatBuffer instances containing splats for each scene\n     * @param {Array<object>} sceneOptions Array of options objects: {\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @return {Array<THREE.Matrix4>}\n     */\n    static buildScenes(splatBuffers, sceneOptions) {\n        const scenes = [];\n        scenes.length = splatBuffers.length;\n        for (let i = 0; i < splatBuffers.length; i++) {\n            const splatBuffer = splatBuffers[i];\n            const options = sceneOptions[i] || {};\n            let positionArray = options['position'] || [0, 0, 0];\n            let rotationArray = options['rotation'] || [0, 0, 0, 1];\n            let scaleArray = options['scale'] || [1, 1, 1];\n            const position = new THREE.Vector3().fromArray(positionArray);\n            const rotation = new THREE.Quaternion().fromArray(rotationArray);\n            const scale = new THREE.Vector3().fromArray(scaleArray);\n            scenes[i] = SplatMesh.createScene(splatBuffer, position, rotation, scale, options.splatAlphaRemovalThreshold || 1);\n        }\n        return scenes;\n    }\n\n    static createScene(splatBuffer, position, rotation, scale, minimumAlpha) {\n        return new SplatScene(splatBuffer, position, rotation, scale, minimumAlpha);\n    }\n\n    /**\n     * Build data structures that map global splat indexes (based on a unified index across all splat buffers) to\n     * local data within a single scene.\n     * @param {Array<SplatBuffer>} splatBuffers Instances of SplatBuffer off which to build the maps\n     * @return {object}\n     */\n    static buildSplatIndexMaps(splatBuffers) {\n        const localSplatIndexMap = [];\n        const sceneIndexMap = [];\n        let totalSplatCount = 0;\n        for (let s = 0; s < splatBuffers.length; s++) {\n            const splatBuffer = splatBuffers[s];\n            const maxSplatCount = splatBuffer.getMaxSplatCount();\n            for (let i = 0; i < maxSplatCount; i++) {\n                localSplatIndexMap[totalSplatCount] = i;\n                sceneIndexMap[totalSplatCount] = s;\n                totalSplatCount++;\n            }\n        }\n        return {\n            localSplatIndexMap,\n            sceneIndexMap\n        };\n    }\n\n    /**\n     * Build an instance of SplatTree (a specialized octree) for the given splat mesh.\n     * @param {Array<number>} minAlphas Array of minimum splat slphas for each scene\n     * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\n     *                                            builder worker starts and finishes.\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n     *                                           the format produced by the splat tree builder worker starts and ends.\n     * @return {SplatTree}\n     */\n     buildSplatTree = function(minAlphas = [], onSplatTreeIndexesUpload, onSplatTreeConstruction) {\n        return new Promise((resolve) => {\n            this.disposeSplatTree();\n            // TODO: expose SplatTree constructor parameters (maximumDepth and maxCentersPerNode) so that they can\n            // be configured on a per-scene basis\n            this.baseSplatTree = new SplatTree(8, 1000);\n            const buildStartTime = performance.now();\n            const splatColor = new THREE.Vector4();\n            this.baseSplatTree.processSplatMesh(this, (splatIndex) => {\n                this.getSplatColor(splatIndex, splatColor);\n                const sceneIndex = this.getSceneIndexForSplat(splatIndex);\n                const minAlpha = minAlphas[sceneIndex] || 1;\n                return splatColor.w >= minAlpha;\n            }, onSplatTreeIndexesUpload, onSplatTreeConstruction)\n            .then(() => {\n                const buildTime = performance.now() - buildStartTime;\n                if (this.logLevel >= LogLevel.Info) console.log('SplatTree build: ' + buildTime + ' ms');\n                if (this.disposed) {\n                    resolve();\n                } else {\n\n                    this.splatTree = this.baseSplatTree;\n                    this.baseSplatTree = null;\n\n                    let leavesWithVertices = 0;\n                    let avgSplatCount = 0;\n                    let maxSplatCount = 0;\n                    let nodeCount = 0;\n\n                    this.splatTree.visitLeaves((node) => {\n                        const nodeSplatCount = node.data.indexes.length;\n                        if (nodeSplatCount > 0) {\n                            avgSplatCount += nodeSplatCount;\n                            maxSplatCount = Math.max(maxSplatCount, nodeSplatCount);\n                            nodeCount++;\n                            leavesWithVertices++;\n                        }\n                    });\n                    if (this.logLevel >= LogLevel.Info) {\n                        console.log(`SplatTree leaves: ${this.splatTree.countLeaves()}`);\n                        console.log(`SplatTree leaves with splats:${leavesWithVertices}`);\n                        avgSplatCount = avgSplatCount / nodeCount;\n                        console.log(`Avg splat count per node: ${avgSplatCount}`);\n                        console.log(`Total splat count: ${this.getSplatCount()}`);\n                    }\n                    resolve();\n                }\n            });\n        });\n    };\n\n    /**\n     * Construct this instance of SplatMesh.\n     * @param {Array<SplatBuffer>} splatBuffers The base splat data, instances of SplatBuffer\n     * @param {Array<object>} sceneOptions Dynamic options for each scene {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     * }\n     * @param {boolean} keepSceneTransforms For a scene that already exists and is being overwritten, this flag\n     *                                      says to keep the transform from the existing scene.\n     * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\n     * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\n     *                                            builder worker starts and finishes.\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n     *                                           the format produced by the splat tree builder worker starts and ends.\n     * @return {object} Object containing info about the splats that are updated\n     */\n    build(splatBuffers, sceneOptions, keepSceneTransforms = true, finalBuild = false,\n          onSplatTreeIndexesUpload, onSplatTreeConstruction) {\n\n        this.sceneOptions = sceneOptions;\n        this.finalBuild = finalBuild;\n\n        const maxSplatCount = SplatMesh.getTotalMaxSplatCountForSplatBuffers(splatBuffers);\n\n        const newScenes = SplatMesh.buildScenes(splatBuffers, sceneOptions);\n        if (keepSceneTransforms) {\n            for (let i = 0; i < this.scenes.length && i < newScenes.length; i++) {\n                const newScene = newScenes[i];\n                const existingScene = this.getScene(i);\n                newScene.copyTransformData(existingScene);\n            }\n        }\n        this.scenes = newScenes;\n\n        let splatBuffersChanged = false;\n        if (splatBuffers.length !== this.lastBuildScenes.length) {\n            splatBuffersChanged = true;\n        } else {\n            for (let i = 0; i < splatBuffers.length; i++) {\n                const splatBuffer = splatBuffers[i];\n                if (splatBuffer !== this.lastBuildScenes[i].splatBuffer) {\n                    splatBuffersChanged = true;\n                    break;\n                }\n            }\n        }\n\n        let isUpdateBuild = true;\n        if (this.scenes.length !== 1 ||\n            this.lastBuildSceneCount !== this.scenes.length ||\n            this.lastBuildMaxSplatCount !== maxSplatCount ||\n            splatBuffersChanged) {\n                isUpdateBuild = false;\n       }\n\n       if (!isUpdateBuild) {\n            this.boundingBox = new THREE.Box3();\n            this.maxSplatDistanceFromSceneCenter = 0;\n            this.visibleRegionBufferRadius = 0;\n            this.visibleRegionRadius = 0;\n            this.visibleRegionFadeStartRadius = 0;\n            this.firstRenderTime = -1;\n            this.lastBuildScenes = [];\n            this.lastBuildSplatCount = 0;\n            this.lastBuildMaxSplatCount = 0;\n            this.disposeMeshData();\n            this.geometry = SplatMesh.buildGeomtery(maxSplatCount);\n            this.material = SplatMesh.buildMaterial(this.dynamicMode, this.antialiased,\n                                                    this.maxScreenSpaceSplatSize, this.splatScale, this.pointCloudModeEnabled);\n            const indexMaps = SplatMesh.buildSplatIndexMaps(splatBuffers);\n            this.globalSplatIndexToLocalSplatIndexMap = indexMaps.localSplatIndexMap;\n            this.globalSplatIndexToSceneIndexMap = indexMaps.sceneIndexMap;\n        }\n\n        const splatCount = this.getSplatCount();\n        if (this.enableDistancesComputationOnGPU) this.setupDistancesComputationTransformFeedback();\n        const dataUpdateResults = this.refreshGPUDataFromSplatBuffers(isUpdateBuild);\n\n        for (let i = 0; i < this.scenes.length; i++) {\n            this.lastBuildScenes[i] = this.scenes[i];\n        }\n        this.lastBuildSplatCount = splatCount;\n        this.lastBuildMaxSplatCount = this.getMaxSplatCount();\n        this.lastBuildSceneCount = this.scenes.length;\n\n        if (finalBuild && this.scenes.length > 0) {\n            this.buildSplatTree(sceneOptions.map(options => options.splatAlphaRemovalThreshold || 1),\n                                onSplatTreeIndexesUpload, onSplatTreeConstruction)\n            .then(() => {\n                if (this.onSplatTreeReadyCallback) this.onSplatTreeReadyCallback(this.splatTree);\n            });\n        }\n\n        this.visible = (this.scenes.length > 0);\n\n        return dataUpdateResults;\n    }\n\n    /**\n     * Dispose all resources held by the splat mesh\n     */\n    dispose() {\n        this.disposeMeshData();\n        this.disposeTextures();\n        this.disposeSplatTree();\n        if (this.enableDistancesComputationOnGPU) {\n            if (this.computeDistancesOnGPUSyncTimeout) {\n                clearTimeout(this.computeDistancesOnGPUSyncTimeout);\n                this.computeDistancesOnGPUSyncTimeout = null;\n            }\n            this.disposeDistancesComputationGPUResources();\n        }\n        this.scenes = [];\n        this.distancesTransformFeedback = {\n            'id': null,\n            'vertexShader': null,\n            'fragmentShader': null,\n            'program': null,\n            'centersBuffer': null,\n            'transformIndexesBuffer': null,\n            'outDistancesBuffer': null,\n            'centersLoc': -1,\n            'modelViewProjLoc': -1,\n            'transformIndexesLoc': -1,\n            'transformsLocs': []\n        };\n        this.renderer = null;\n\n        this.globalSplatIndexToLocalSplatIndexMap = [];\n        this.globalSplatIndexToSceneIndexMap = [];\n\n        this.lastBuildSplatCount = 0;\n        this.lastBuildScenes = [];\n        this.lastBuildMaxSplatCount = 0;\n        this.lastBuildSceneCount = 0;\n        this.firstRenderTime = -1;\n        this.finalBuild = false;\n\n        this.webGLUtils = null;\n\n        this.boundingBox = new THREE.Box3();\n        this.calculatedSceneCenter = new THREE.Vector3();\n        this.maxSplatDistanceFromSceneCenter = 0;\n        this.visibleRegionBufferRadius = 0;\n        this.visibleRegionRadius = 0;\n        this.visibleRegionFadeStartRadius = 0;\n        this.visibleRegionChanging = false;\n\n        this.splatScale = 1.0;\n        this.pointCloudModeEnabled = false;\n\n        this.disposed = true;\n        this.lastRenderer = null;\n        this.visible = false;\n    }\n\n    /**\n     * Dispose of only the Three.js mesh resources (geometry, material, and texture)\n     */\n    disposeMeshData() {\n        if (this.geometry && this.geometry !== dummyGeometry) {\n            this.geometry.dispose();\n            this.geometry = null;\n        }\n        if (this.material) {\n            this.material.dispose();\n            this.material = null;\n        }\n    }\n\n    disposeTextures() {\n        for (let textureKey in this.splatDataTextures) {\n            if (this.splatDataTextures.hasOwnProperty(textureKey)) {\n                const textureContainer = this.splatDataTextures[textureKey];\n                if (textureContainer.texture) {\n                    textureContainer.texture.dispose();\n                    textureContainer.texture = null;\n                }\n            }\n        }\n        this.splatDataTextures = null;\n    }\n\n    disposeSplatTree() {\n        if (this.splatTree) {\n            this.splatTree.dispose();\n            this.splatTree = null;\n        } else if (this.baseSplatTree) {\n            this.baseSplatTree.dispose();\n            this.baseSplatTree = null;\n        }\n    }\n\n    getSplatTree() {\n        return this.splatTree;\n    }\n\n    onSplatTreeReady(callback) {\n        this.onSplatTreeReadyCallback = callback;\n    }\n\n    /**\n     * Get copies of data that are necessary for splat distance computation: splat center positions and splat\n     * scene indexes (necessary for applying dynamic scene transformations during distance computation)\n     * @param {*} start The index at which to start copying data\n     * @param {*} end  The index at which to stop copying data\n     * @return {object}\n     */\n    getDataForDistancesComputation(start, end) {\n        const centers = this.integerBasedDistancesComputation ?\n                        this.getIntegerCenters(start, end, true) :\n                        this.getFloatCenters(start, end, true);\n        const sceneIndexes = this.getSceneIndexes(start, end);\n        return {\n            centers,\n            sceneIndexes\n        };\n    }\n\n    /**\n     * Refresh data textures and GPU buffers with splat data from the splat buffers belonging to this mesh.\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\n     * @return {object}\n     */\n    refreshGPUDataFromSplatBuffers(sinceLastBuildOnly) {\n        const splatCount = this.getSplatCount();\n        this.refreshDataTexturesFromSplatBuffers(sinceLastBuildOnly);\n        const updateStart = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\n        const { centers, sceneIndexes } = this.getDataForDistancesComputation(updateStart, splatCount - 1);\n        if (this.enableDistancesComputationOnGPU) {\n            this.refreshGPUBuffersForDistancesComputation(centers, sceneIndexes, sinceLastBuildOnly);\n        }\n        return {\n            'from': updateStart,\n            'to': splatCount - 1,\n            'count': splatCount - updateStart,\n            'centers': centers,\n            'sceneIndexes': sceneIndexes\n        };\n    }\n\n    /**\n     * Update the GPU buffers that are used for computing splat distances on the GPU.\n     * @param {Array<number>} centers Splat center positions\n     * @param {Array<number>} sceneIndexes Indexes of the scene to which each splat belongs\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\n     */\n    refreshGPUBuffersForDistancesComputation(centers, sceneIndexes, sinceLastBuildOnly = false) {\n        const offset = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\n        this.updateGPUCentersBufferForDistancesComputation(sinceLastBuildOnly, centers, offset);\n        this.updateGPUTransformIndexesBufferForDistancesComputation(sinceLastBuildOnly, sceneIndexes, offset);\n    }\n\n    /**\n     * Refresh data textures with data from the splat buffers for this mesh.\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\n     */\n    refreshDataTexturesFromSplatBuffers(sinceLastBuildOnly) {\n        if (!sinceLastBuildOnly) {\n            this.setupDataTextures();\n        } else {\n            this.updateDataTextures();\n        }\n        this.updateVisibleRegion(sinceLastBuildOnly);\n    }\n\n    setupDataTextures() {\n        const maxSplatCount = this.getMaxSplatCount();\n        const splatCount = this.getSplatCount();\n\n        this.disposeTextures();\n\n        const computeDataTextureSize = (elementsPerTexel, elementsPerSplatl) => {\n            const texSize = new THREE.Vector2(4096, 1024);\n            while (texSize.x * texSize.y * elementsPerTexel < maxSplatCount * elementsPerSplatl) texSize.y *= 2;\n            return texSize;\n        };\n\n        const covariances = new Float32Array(maxSplatCount * COVARIANCES_ELEMENTS_PER_SPLAT);\n        const centers = new Float32Array(maxSplatCount * 3);\n        const colors = new Uint8Array(maxSplatCount * 4);\n        this.fillSplatDataArrays(covariances, centers, colors);\n\n        // set up covariances data texture\n        const covTexSize = computeDataTextureSize(COVARIANCES_ELEMENTS_PER_TEXEL, 6);\n        let CovariancesDataType = this.halfPrecisionCovariancesOnGPU ? Uint16Array : Float32Array;\n        let covariancesTextureType = this.halfPrecisionCovariancesOnGPU ? THREE.HalfFloatType : THREE.FloatType;\n        const paddedCovariances = new CovariancesDataType(covTexSize.x * covTexSize.y * COVARIANCES_ELEMENTS_PER_TEXEL);\n        paddedCovariances.set(covariances);\n\n        const covTex = new THREE.DataTexture(paddedCovariances, covTexSize.x, covTexSize.y, THREE.RGFormat, covariancesTextureType);\n        covTex.needsUpdate = true;\n        this.material.uniforms.covariancesTexture.value = covTex;\n        this.material.uniforms.covariancesTextureSize.value.copy(covTexSize);\n\n        // set up centers/colors data texture\n        const centersColsTexSize = computeDataTextureSize(CENTER_COLORS_ELEMENTS_PER_TEXEL, 4);\n        const paddedCentersCols = new Uint32Array(centersColsTexSize.x * centersColsTexSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL);\n        SplatMesh.updateCenterColorsPaddedData(0, splatCount, centers, colors, paddedCentersCols);\n\n        const centersColsTex = new THREE.DataTexture(paddedCentersCols, centersColsTexSize.x, centersColsTexSize.y,\n                                                     THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\n        centersColsTex.internalFormat = 'RGBA32UI';\n        centersColsTex.needsUpdate = true;\n        this.material.uniforms.centersColorsTexture.value = centersColsTex;\n        this.material.uniforms.centersColorsTextureSize.value.copy(centersColsTexSize);\n        this.material.uniformsNeedUpdate = true;\n\n        this.splatDataTextures = {\n            'baseData': {\n                'covariances': covariances,\n                'centers': centers,\n                'colors': colors\n            },\n            'covariances': {\n                'data': paddedCovariances,\n                'texture': covTex,\n                'size': covTexSize\n            },\n            'centerColors': {\n                'data': paddedCentersCols,\n                'texture': centersColsTex,\n                'size': centersColsTexSize\n            }\n        };\n\n        if (this.dynamicMode) {\n            const transformIndexesTexSize = computeDataTextureSize(TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL, 4);\n            const paddedTransformIndexes = new Uint32Array(transformIndexesTexSize.x *\n                                                           transformIndexesTexSize.y * TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL);\n            for (let c = 0; c < splatCount; c++) paddedTransformIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\n            const transformIndexesTexture = new THREE.DataTexture(paddedTransformIndexes, transformIndexesTexSize.x,\n                                                                  transformIndexesTexSize.y, THREE.RedIntegerFormat,\n                                                                  THREE.UnsignedIntType);\n            transformIndexesTexture.internalFormat = 'R32UI';\n            transformIndexesTexture.needsUpdate = true;\n            this.material.uniforms.transformIndexesTexture.value = transformIndexesTexture;\n            this.material.uniforms.transformIndexesTextureSize.value.copy(transformIndexesTexSize);\n            this.material.uniformsNeedUpdate = true;\n            this.splatDataTextures['tansformIndexes'] = {\n                'data': paddedTransformIndexes,\n                'texture': transformIndexesTexture,\n                'size': transformIndexesTexSize\n            };\n        }\n    }\n\n    updateDataTextures() {\n        const splatCount = this.getSplatCount();\n        this.fillSplatDataArrays(this.splatDataTextures.baseData.covariances,\n                                 this.splatDataTextures.baseData.centers, this.splatDataTextures.baseData.colors, undefined,\n                                 this.lastBuildSplatCount, splatCount - 1, this.lastBuildSplatCount);\n\n        const covariancesTextureDescriptor = this.splatDataTextures['covariances'];\n        const paddedCovariances = covariancesTextureDescriptor.data;\n        const covariancesTexture = covariancesTextureDescriptor.texture;\n        const covarancesStartSplat = this.lastBuildSplatCount * COVARIANCES_ELEMENTS_PER_SPLAT;\n        const covariancesEndSplat = splatCount * COVARIANCES_ELEMENTS_PER_SPLAT;\n        for (let i = covarancesStartSplat; i < covariancesEndSplat; i++) {\n            const covariance = this.splatDataTextures.baseData.covariances[i];\n            paddedCovariances[i] = covariance;\n        }\n        const covariancesTextureProps = this.renderer ? this.renderer.properties.get(covariancesTexture) : null;\n        if (!covariancesTextureProps || !covariancesTextureProps.__webglTexture) {\n            covariancesTexture.needsUpdate = true;\n        } else {\n            const covaranceBytesPerElement = this.halfPrecisionCovariancesOnGPU ? 2 : 4;\n            this.updateDataTexture(paddedCovariances, covariancesTextureDescriptor, covariancesTextureProps,\n                                    COVARIANCES_ELEMENTS_PER_TEXEL, COVARIANCES_ELEMENTS_PER_SPLAT, covaranceBytesPerElement,\n                                    this.lastBuildSplatCount, splatCount - 1);\n        }\n\n        const centerColorsTextureDescriptor = this.splatDataTextures['centerColors'];\n        const paddedCenterColors = centerColorsTextureDescriptor.data;\n        const centerColorsTexture = centerColorsTextureDescriptor.texture;\n        SplatMesh.updateCenterColorsPaddedData(this.lastBuildSplatCount, splatCount, this.splatDataTextures.baseData.centers,\n                                               this.splatDataTextures.baseData.colors, paddedCenterColors);\n        const centerColorsTextureProps = this.renderer ? this.renderer.properties.get(centerColorsTexture) : null;\n        if (!centerColorsTextureProps || !centerColorsTextureProps.__webglTexture) {\n            centerColorsTexture.needsUpdate = true;\n        } else {\n            this.updateDataTexture(paddedCenterColors, centerColorsTextureDescriptor, centerColorsTextureProps,\n                                    CENTER_COLORS_ELEMENTS_PER_TEXEL, CENTER_COLORS_ELEMENTS_PER_SPLAT, 4,\n                                    this.lastBuildSplatCount, splatCount - 1);\n        }\n\n        if (this.dynamicMode) {\n            const transformIndexesTexDesc = this.splatDataTextures['tansformIndexes'];\n            const paddedTransformIndexes = transformIndexesTexDesc.data;\n            for (let c = this.lastBuildSplatCount; c < splatCount; c++) {\n                paddedTransformIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\n            }\n\n            const paddedTransformIndexesTexture = transformIndexesTexDesc.texture;\n            const transformIndexesTextureProps = this.renderer ? this.renderer.properties.get(paddedTransformIndexesTexture) : null;\n            if (!transformIndexesTextureProps || !transformIndexesTextureProps.__webglTexture) {\n                paddedTransformIndexesTexture.needsUpdate = true;\n            } else {\n                this.updateDataTexture(paddedTransformIndexes, transformIndexesTexDesc, transformIndexesTextureProps, 1, 1, 1,\n                                        this.lastBuildSplatCount, splatCount - 1);\n            }\n        }\n    }\n\n    static computeTextureUpdateRegion(startSplat, endSplat, textureWidth, elementsPerTexel, elementsPerSplat) {\n        const texelsPerSplat = elementsPerSplat / elementsPerTexel;\n\n        const startSplatTexels = startSplat * texelsPerSplat;\n        const startRow = Math.floor(startSplatTexels / textureWidth);\n        const startRowElement = startRow * textureWidth * elementsPerTexel;\n\n        const endSplatTexels = endSplat * texelsPerSplat;\n        const endRow = Math.floor(endSplatTexels / textureWidth);\n        const endRowEndElement = endRow * textureWidth * elementsPerTexel + (textureWidth * elementsPerTexel);\n\n        return {\n            'dataStart': startRowElement,\n            'dataEnd': endRowEndElement,\n            'startRow': startRow,\n            'endRow': endRow\n        };\n    }\n\n    updateDataTexture(paddedData, textureDesc, textureProps, elementsPerTexel, elementsPerSplat, bytesPerElement, from, to) {\n        const gl = this.renderer.getContext();\n        const updateRegion = SplatMesh.computeTextureUpdateRegion(from, to, textureDesc.size.x, elementsPerTexel, elementsPerSplat);\n        const updateElementCount = updateRegion.dataEnd - updateRegion.dataStart;\n        const updateDataView = new paddedData.constructor(paddedData.buffer,\n                                                          updateRegion.dataStart * bytesPerElement, updateElementCount);\n        const updateHeight = updateRegion.endRow - updateRegion.startRow + 1;\n        const dataTexture = textureDesc.texture;\n        const glType = this.webGLUtils.convert(dataTexture.type);\n        const glFormat = this.webGLUtils.convert(dataTexture.format, dataTexture.colorSpace);\n        const currentTexture = gl.getParameter(gl.TEXTURE_BINDING_2D);\n        gl.bindTexture(gl.TEXTURE_2D, textureProps.__webglTexture);\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, updateRegion.startRow,\n                         textureDesc.size.x, updateHeight, glFormat, glType, updateDataView);\n        gl.bindTexture(gl.TEXTURE_2D, currentTexture);\n    }\n\n\n    static updateCenterColorsPaddedData(to, from, centers, colors, paddedCenterColors) {\n        for (let c = to; c < from; c++) {\n            const colorsBase = c * 4;\n            const centersBase = c * 3;\n            const centerColorsBase = c * 4;\n            paddedCenterColors[centerColorsBase] = rgbaArrayToInteger(colors, colorsBase);\n            paddedCenterColors[centerColorsBase + 1] = uintEncodedFloat(centers[centersBase]);\n            paddedCenterColors[centerColorsBase + 2] = uintEncodedFloat(centers[centersBase + 1]);\n            paddedCenterColors[centerColorsBase + 3] = uintEncodedFloat(centers[centersBase + 2]);\n        }\n    }\n\n    updateVisibleRegion(sinceLastBuildOnly) {\n        const splatCount = this.getSplatCount();\n        const tempCenter = new THREE.Vector3();\n        if (!sinceLastBuildOnly) {\n            const avgCenter = new THREE.Vector3();\n            this.scenes.forEach((scene) => {\n                avgCenter.add(scene.splatBuffer.sceneCenter);\n            });\n            avgCenter.multiplyScalar(1.0 / this.scenes.length);\n            this.calculatedSceneCenter.copy(avgCenter);\n            this.material.uniforms.sceneCenter.value.copy(this.calculatedSceneCenter);\n            this.material.uniformsNeedUpdate = true;\n        }\n\n        const startSplatFormMaxDistanceCalc = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\n        for (let i = startSplatFormMaxDistanceCalc; i < splatCount; i++) {\n            this.getSplatCenter(i, tempCenter, false);\n            const distFromCSceneCenter = tempCenter.sub(this.calculatedSceneCenter).length();\n            if (distFromCSceneCenter > this.maxSplatDistanceFromSceneCenter) this.maxSplatDistanceFromSceneCenter = distFromCSceneCenter;\n        }\n\n        if (this.maxSplatDistanceFromSceneCenter - this.visibleRegionBufferRadius > VISIBLE_REGION_EXPANSION_DELTA) {\n            this.visibleRegionBufferRadius = this.maxSplatDistanceFromSceneCenter;\n            this.visibleRegionRadius = Math.max(this.visibleRegionBufferRadius - VISIBLE_REGION_EXPANSION_DELTA, 0.0);\n        }\n        if (this.finalBuild) this.visibleRegionRadius = this.visibleRegionBufferRadius = this.maxSplatDistanceFromSceneCenter;\n        this.updateVisibleRegionFadeDistance();\n    }\n\n    updateVisibleRegionFadeDistance(sceneRevealMode = SceneRevealMode.Default) {\n        const fastFadeRate = SCENE_FADEIN_RATE_FAST;\n        const gradualFadeRate = SCENE_FADEIN_RATE_GRADUAL;\n        const defaultFadeInRate = this.finalBuild ? fastFadeRate : gradualFadeRate;\n        const fadeInRate = sceneRevealMode === SceneRevealMode.Default ? defaultFadeInRate : gradualFadeRate;\n        this.visibleRegionFadeStartRadius = (this.visibleRegionRadius - this.visibleRegionFadeStartRadius) *\n                                             fadeInRate + this.visibleRegionFadeStartRadius;\n        const fadeInPercentage = (this.visibleRegionBufferRadius > 0) ?\n                                 (this.visibleRegionFadeStartRadius / this.visibleRegionBufferRadius) : 0;\n        const fadeInComplete = fadeInPercentage > 0.99;\n        const shaderFadeInComplete = (fadeInComplete || sceneRevealMode === SceneRevealMode.Instant) ? 1 : 0;\n\n        this.material.uniforms.visibleRegionFadeStartRadius.value = this.visibleRegionFadeStartRadius;\n        this.material.uniforms.visibleRegionRadius.value = this.visibleRegionRadius;\n        this.material.uniforms.firstRenderTime.value = this.firstRenderTime;\n        this.material.uniforms.currentTime.value = performance.now();\n        this.material.uniforms.fadeInComplete.value = shaderFadeInComplete;\n        this.material.uniformsNeedUpdate = true;\n        this.visibleRegionChanging = !fadeInComplete;\n    }\n\n    /**\n     * Set the indexes of splats that should be rendered; should be sorted in desired render order.\n     * @param {Uint32Array} globalIndexes Sorted index list of splats to be rendered\n     * @param {number} renderSplatCount Total number of splats to be rendered. Necessary because we may not want to render\n     *                                  every splat.\n     */\n    updateRenderIndexes(globalIndexes, renderSplatCount) {\n        const geometry = this.geometry;\n        geometry.attributes.splatIndex.set(globalIndexes);\n        geometry.attributes.splatIndex.needsUpdate = true;\n        if (renderSplatCount > 0 && this.firstRenderTime === -1) this.firstRenderTime = performance.now();\n        geometry.instanceCount = renderSplatCount;\n    }\n\n    /**\n     * Update the transforms for each scene in this splat mesh from their individual components (position,\n     * quaternion, and scale)\n     */\n    updateTransforms() {\n        for (let i = 0; i < this.scenes.length; i++) {\n            const scene = this.getScene(i);\n            scene.updateTransform();\n        }\n    }\n\n    updateUniforms = function() {\n\n        const viewport = new THREE.Vector2();\n\n        return function(renderDimensions, cameraFocalLengthX, cameraFocalLengthY,\n                        orthographicMode, orthographicZoom, inverseFocalAdjustment) {\n            const splatCount = this.getSplatCount();\n            if (splatCount > 0) {\n                viewport.set(renderDimensions.x * this.devicePixelRatio,\n                             renderDimensions.y * this.devicePixelRatio);\n                this.material.uniforms.viewport.value.copy(viewport);\n                this.material.uniforms.basisViewport.value.set(1.0 / viewport.x, 1.0 / viewport.y);\n                this.material.uniforms.focal.value.set(cameraFocalLengthX, cameraFocalLengthY);\n                this.material.uniforms.orthographicMode.value = orthographicMode ? 1 : 0;\n                this.material.uniforms.orthoZoom.value = orthographicZoom;\n                this.material.uniforms.inverseFocalAdjustment.value = inverseFocalAdjustment;\n                if (this.dynamicMode) {\n                    for (let i = 0; i < this.scenes.length; i++) {\n                        this.material.uniforms.transforms.value[i].copy(this.getScene(i).transform);\n                    }\n                }\n                this.material.uniformsNeedUpdate = true;\n            }\n        };\n\n    }();\n\n    setSplatScale(splatScale = 1) {\n        this.splatScale = splatScale;\n        this.material.uniforms.splatScale.value = splatScale;\n        this.material.uniformsNeedUpdate = true;\n    }\n\n    getSplatScale() {\n        return this.splatScale;\n    }\n\n    setPointCloudModeEnabled(enabled) {\n        this.pointCloudModeEnabled = enabled;\n        this.material.uniforms.pointCloudModeEnabled.value = enabled ? 1 : 0;\n        this.material.uniformsNeedUpdate = true;\n    }\n\n    getPointCloudModeEnabled() {\n        return this.pointCloudModeEnabled;\n    }\n\n    getSplatDataTextures() {\n        return this.splatDataTextures;\n    }\n\n    getSplatCount() {\n        return SplatMesh.getTotalSplatCountForScenes(this.scenes);\n    }\n\n    static getTotalSplatCountForScenes(scenes) {\n        let totalSplatCount = 0;\n        for (let scene of scenes) {\n            if (scene && scene.splatBuffer) totalSplatCount += scene.splatBuffer.getSplatCount();\n        }\n        return totalSplatCount;\n    }\n\n    static getTotalSplatCountForSplatBuffers(splatBuffers) {\n        let totalSplatCount = 0;\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getSplatCount();\n        return totalSplatCount;\n    }\n\n    getMaxSplatCount() {\n        return SplatMesh.getTotalMaxSplatCountForScenes(this.scenes);\n    }\n\n    static getTotalMaxSplatCountForScenes(scenes) {\n        let totalSplatCount = 0;\n        for (let scene of scenes) {\n            if (scene && scene.splatBuffer) totalSplatCount += scene.splatBuffer.getMaxSplatCount();\n        }\n        return totalSplatCount;\n    }\n\n    static getTotalMaxSplatCountForSplatBuffers(splatBuffers) {\n        let totalSplatCount = 0;\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getMaxSplatCount();\n        return totalSplatCount;\n    }\n\n    disposeDistancesComputationGPUResources() {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        if (this.distancesTransformFeedback.vao) {\n            gl.deleteVertexArray(this.distancesTransformFeedback.vao);\n            this.distancesTransformFeedback.vao = null;\n        }\n        if (this.distancesTransformFeedback.program) {\n            gl.deleteProgram(this.distancesTransformFeedback.program);\n            gl.deleteShader(this.distancesTransformFeedback.vertexShader);\n            gl.deleteShader(this.distancesTransformFeedback.fragmentShader);\n            this.distancesTransformFeedback.program = null;\n            this.distancesTransformFeedback.vertexShader = null;\n            this.distancesTransformFeedback.fragmentShader = null;\n        }\n        this.disposeDistancesComputationGPUBufferResources();\n        if (this.distancesTransformFeedback.id) {\n            gl.deleteTransformFeedback(this.distancesTransformFeedback.id);\n            this.distancesTransformFeedback.id = null;\n        }\n    }\n\n    disposeDistancesComputationGPUBufferResources() {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        if (this.distancesTransformFeedback.centersBuffer) {\n            this.distancesTransformFeedback.centersBuffer = null;\n            gl.deleteBuffer(this.distancesTransformFeedback.centersBuffer);\n        }\n        if (this.distancesTransformFeedback.outDistancesBuffer) {\n            gl.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer);\n            this.distancesTransformFeedback.outDistancesBuffer = null;\n        }\n    }\n\n    /**\n     * Set the Three.js renderer used by this splat mesh\n     * @param {THREE.WebGLRenderer} renderer Instance of THREE.WebGLRenderer\n     */\n    setRenderer(renderer) {\n        if (renderer !== this.renderer) {\n            this.renderer = renderer;\n            const gl = this.renderer.getContext();\n            const extensions = new WebGLExtensions(gl);\n            const capabilities = new WebGLCapabilities(gl, extensions, {});\n            extensions.init(capabilities);\n            this.webGLUtils = new THREE.WebGLUtils(gl, extensions, capabilities);\n            if (this.enableDistancesComputationOnGPU && this.getSplatCount() > 0) {\n                this.setupDistancesComputationTransformFeedback();\n                const { centers, sceneIndexes } = this.getDataForDistancesComputation(0, this.getSplatCount() - 1);\n                this.refreshGPUBuffersForDistancesComputation(centers, sceneIndexes);\n            }\n        }\n    }\n\n    setupDistancesComputationTransformFeedback = function() {\n\n        let currentMaxSplatCount;\n\n        return function() {\n            const maxSplatCount = this.getMaxSplatCount();\n\n            if (!this.renderer) return;\n\n            const rebuildGPUObjects = (this.lastRenderer !== this.renderer);\n            const rebuildBuffers = currentMaxSplatCount !== maxSplatCount;\n\n            if (!rebuildGPUObjects && !rebuildBuffers) return;\n\n            if (rebuildGPUObjects) {\n                this.disposeDistancesComputationGPUResources();\n            } else if (rebuildBuffers) {\n                this.disposeDistancesComputationGPUBufferResources();\n            }\n\n            const gl = this.renderer.getContext();\n\n            const createShader = (gl, type, source) => {\n                const shader = gl.createShader(type);\n                if (!shader) {\n                    console.error('Fatal error: gl could not create a shader object.');\n                    return null;\n                }\n\n                gl.shaderSource(shader, source);\n                gl.compileShader(shader);\n\n                const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n                if (!compiled) {\n                    let typeName = 'unknown';\n                    if (type === gl.VERTEX_SHADER) typeName = 'vertex shader';\n                    else if (type === gl.FRAGMENT_SHADER) typeName = 'fragement shader';\n                    const errors = gl.getShaderInfoLog(shader);\n                    console.error('Failed to compile ' + typeName + ' with these errors:' + errors);\n                    gl.deleteShader(shader);\n                    return null;\n                }\n\n                return shader;\n            };\n\n            let vsSource;\n            if (this.integerBasedDistancesComputation) {\n                vsSource =\n                `#version 300 es\n                in ivec4 center;\n                flat out int distance;`;\n                if (this.dynamicMode) {\n                    vsSource += `\n                        in uint transformIndex;\n                        uniform ivec4 transforms[${Constants.MaxScenes}];\n                        void main(void) {\n                            ivec4 transform = transforms[transformIndex];\n                            distance = center.x * transform.x + center.y * transform.y + center.z * transform.z + transform.w * center.w;\n                        }\n                    `;\n                } else {\n                    vsSource += `\n                        uniform ivec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    `;\n                }\n            } else {\n                vsSource =\n                `#version 300 es\n                in vec4 center;\n                flat out float distance;`;\n                if (this.dynamicMode) {\n                    vsSource += `\n                        in uint transformIndex;\n                        uniform mat4 transforms[${Constants.MaxScenes}];\n                        void main(void) {\n                            vec4 transformedCenter = transforms[transformIndex] * vec4(center.xyz, 1.0);\n                            distance = transformedCenter.z;\n                        }\n                    `;\n                } else {\n                    vsSource += `\n                        uniform vec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    `;\n                }\n            }\n\n            const fsSource =\n            `#version 300 es\n                precision lowp float;\n                out vec4 fragColor;\n                void main(){}\n            `;\n\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n            const currentProgramDeleted = currentProgram ? gl.getProgramParameter(currentProgram, gl.DELETE_STATUS) : false;\n\n            if (rebuildGPUObjects) {\n                this.distancesTransformFeedback.vao = gl.createVertexArray();\n            }\n\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n            if (rebuildGPUObjects) {\n                const program = gl.createProgram();\n                const vertexShader = createShader(gl, gl.VERTEX_SHADER, vsSource);\n                const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fsSource);\n                if (!vertexShader || !fragmentShader) {\n                    throw new Error('Could not compile shaders for distances computation on GPU.');\n                }\n                gl.attachShader(program, vertexShader);\n                gl.attachShader(program, fragmentShader);\n                gl.transformFeedbackVaryings(program, ['distance'], gl.SEPARATE_ATTRIBS);\n                gl.linkProgram(program);\n\n                const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n                if (!linked) {\n                    const error = gl.getProgramInfoLog(program);\n                    console.error('Fatal error: Failed to link program: ' + error);\n                    gl.deleteProgram(program);\n                    gl.deleteShader(fragmentShader);\n                    gl.deleteShader(vertexShader);\n                    throw new Error('Could not link shaders for distances computation on GPU.');\n                }\n\n                this.distancesTransformFeedback.program = program;\n                this.distancesTransformFeedback.vertexShader = vertexShader;\n                this.distancesTransformFeedback.vertexShader = fragmentShader;\n            }\n\n            gl.useProgram(this.distancesTransformFeedback.program);\n\n            this.distancesTransformFeedback.centersLoc =\n                gl.getAttribLocation(this.distancesTransformFeedback.program, 'center');\n            if (this.dynamicMode) {\n                this.distancesTransformFeedback.transformIndexesLoc =\n                    gl.getAttribLocation(this.distancesTransformFeedback.program, 'transformIndex');\n                for (let i = 0; i < this.scenes.length; i++) {\n                    this.distancesTransformFeedback.transformsLocs[i] =\n                        gl.getUniformLocation(this.distancesTransformFeedback.program, `transforms[${i}]`);\n                }\n            } else {\n                this.distancesTransformFeedback.modelViewProjLoc =\n                    gl.getUniformLocation(this.distancesTransformFeedback.program, 'modelViewProj');\n            }\n\n            if (rebuildGPUObjects || rebuildBuffers) {\n                this.distancesTransformFeedback.centersBuffer = gl.createBuffer();\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n                if (this.integerBasedDistancesComputation) {\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\n                } else {\n                    gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 4, gl.FLOAT, false, 0, 0);\n                }\n\n                if (this.dynamicMode) {\n                    this.distancesTransformFeedback.transformIndexesBuffer = gl.createBuffer();\n                    gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\n                    gl.enableVertexAttribArray(this.distancesTransformFeedback.transformIndexesLoc);\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.transformIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\n                }\n            }\n\n            if (rebuildGPUObjects || rebuildBuffers) {\n                this.distancesTransformFeedback.outDistancesBuffer = gl.createBuffer();\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, maxSplatCount * 4, gl.STATIC_READ);\n\n            if (rebuildGPUObjects) {\n                this.distancesTransformFeedback.id = gl.createTransformFeedback();\n            }\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\n\n            if (currentProgram && currentProgramDeleted !== true) gl.useProgram(currentProgram);\n            if (currentVao) gl.bindVertexArray(currentVao);\n\n            this.lastRenderer = this.renderer;\n            currentMaxSplatCount = maxSplatCount;\n        };\n\n    }();\n\n    /**\n     * Refresh GPU buffers used for computing splat distances with centers data from the scenes for this mesh.\n     * @param {boolean} isUpdate Specify whether or not to update the GPU buffer or to initialize & fill\n     * @param {Array<number>} centers The splat centers data\n     * @param {number} offsetSplats Offset in the GPU buffer at which to start updating data, specified in splats\n     */\n    updateGPUCentersBufferForDistancesComputation(isUpdate, centers, offsetSplats) {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n        const ArrayType = this.integerBasedDistancesComputation ? Uint32Array : Float32Array;\n        const attributeBytesPerCenter = 16;\n        const subBufferOffset = offsetSplats * attributeBytesPerCenter;\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n\n        if (isUpdate) {\n            gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, centers);\n        } else {\n            const maxArray = new ArrayType(this.getMaxSplatCount() * attributeBytesPerCenter);\n            maxArray.set(centers);\n            gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\n        }\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        if (currentVao) gl.bindVertexArray(currentVao);\n    }\n\n    /**\n     * Refresh GPU buffers used for pre-computing splat distances with centers data from the scenes for this mesh.\n     * @param {boolean} isUpdate Specify whether or not to update the GPU buffer or to initialize & fill\n     * @param {Array<number>} transformIndexes The splat transform indexes\n     * @param {number} offsetSplats Offset in the GPU buffer at which to start updating data, specified in splats\n     */\n    updateGPUTransformIndexesBufferForDistancesComputation(isUpdate, transformIndexes, offsetSplats) {\n\n        if (!this.renderer || !this.dynamicMode) return;\n\n        const gl = this.renderer.getContext();\n\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n        const subBufferOffset = offsetSplats * 4;\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\n\n        if (isUpdate) {\n            gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, transformIndexes);\n        } else {\n            const maxArray = new Uint32Array(this.getMaxSplatCount() * 4);\n            maxArray.set(transformIndexes);\n            gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\n        }\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        if (currentVao) gl.bindVertexArray(currentVao);\n    }\n\n    /**\n     * Get a typed array containing a mapping from global splat indexes to their scene index.\n     * @param {number} start Starting splat index to store\n     * @param {number} end Ending splat index to store\n     * @return {Uint32Array}\n     */\n    getSceneIndexes(start, end) {\n\n        let sceneIndexes;\n        const fillCount = end - start + 1;\n        sceneIndexes = new Uint32Array(fillCount);\n        for (let i = start; i <= end; i++) {\n            sceneIndexes[i] = this.globalSplatIndexToSceneIndexMap[i];\n        }\n\n        return sceneIndexes;\n    }\n\n    /**\n     * Fill 'array' with the transforms for each scene in this splat mesh.\n     * @param {Array} array Empty array to be filled with scene transforms. If not empty, contents will be overwritten.\n     */\n    fillTransformsArray = function() {\n\n        const tempArray = [];\n\n        return function(array) {\n            if (tempArray.length !== array.length) tempArray.length = array.length;\n            for (let i = 0; i < this.scenes.length; i++) {\n                const sceneTransform = this.getScene(i).transform;\n                const sceneTransformElements = sceneTransform.elements;\n                for (let j = 0; j < 16; j++) {\n                    tempArray[i * 16 + j] = sceneTransformElements[j];\n                }\n            }\n            array.set(tempArray);\n        };\n\n    }();\n\n    computeDistancesOnGPU = function() {\n\n        const tempMatrix = new THREE.Matrix4();\n\n        return function(modelViewProjMatrix, outComputedDistances) {\n            if (!this.renderer) return;\n\n            // console.time(\"gpu_compute_distances\");\n            const gl = this.renderer.getContext();\n\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n            const currentProgramDeleted = currentProgram ? gl.getProgramParameter(currentProgram, gl.DELETE_STATUS) : false;\n\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\n            gl.useProgram(this.distancesTransformFeedback.program);\n\n            gl.enable(gl.RASTERIZER_DISCARD);\n\n            if (this.dynamicMode) {\n                for (let i = 0; i < this.scenes.length; i++) {\n                    tempMatrix.copy(this.getScene(i).transform);\n                    tempMatrix.premultiply(modelViewProjMatrix);\n\n                    if (this.integerBasedDistancesComputation) {\n                        const iTempMatrix = SplatMesh.getIntegerMatrixArray(tempMatrix);\n                        const iTransform = [iTempMatrix[2], iTempMatrix[6], iTempMatrix[10], iTempMatrix[14]];\n                        gl.uniform4i(this.distancesTransformFeedback.transformsLocs[i], iTransform[0], iTransform[1],\n                                                                                        iTransform[2], iTransform[3]);\n                    } else {\n                        gl.uniformMatrix4fv(this.distancesTransformFeedback.transformsLocs[i], false, tempMatrix.elements);\n                    }\n                }\n            } else {\n                if (this.integerBasedDistancesComputation) {\n                    const iViewProjMatrix = SplatMesh.getIntegerMatrixArray(modelViewProjMatrix);\n                    const iViewProj = [iViewProjMatrix[2], iViewProjMatrix[6], iViewProjMatrix[10]];\n                    gl.uniform3i(this.distancesTransformFeedback.modelViewProjLoc, iViewProj[0], iViewProj[1], iViewProj[2]);\n                } else {\n                    const viewProj = [modelViewProjMatrix.elements[2], modelViewProjMatrix.elements[6], modelViewProjMatrix.elements[10]];\n                    gl.uniform3f(this.distancesTransformFeedback.modelViewProjLoc, viewProj[0], viewProj[1], viewProj[2]);\n                }\n            }\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n            gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n            if (this.integerBasedDistancesComputation) {\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\n            } else {\n                gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 4, gl.FLOAT, false, 0, 0);\n            }\n\n            if (this.dynamicMode) {\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.transformIndexesLoc);\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.transformIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\n            }\n\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\n\n            gl.beginTransformFeedback(gl.POINTS);\n            gl.drawArrays(gl.POINTS, 0, this.getSplatCount());\n            gl.endTransformFeedback();\n\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n\n            gl.disable(gl.RASTERIZER_DISCARD);\n\n            const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\n            gl.flush();\n\n            const promise = new Promise((resolve) => {\n                const checkSync = () => {\n                    if (this.disposed) {\n                        resolve();\n                    } else {\n                        const timeout = 0;\n                        const bitflags = 0;\n                        const status = gl.clientWaitSync(sync, bitflags, timeout);\n                        switch (status) {\n                            case gl.TIMEOUT_EXPIRED:\n                                this.computeDistancesOnGPUSyncTimeout = setTimeout(checkSync);\n                                return this.computeDistancesOnGPUSyncTimeout;\n                            case gl.WAIT_FAILED:\n                                throw new Error('should never get here');\n                            default:\n                                this.computeDistancesOnGPUSyncTimeout = null;\n                                gl.deleteSync(sync);\n                                const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n                                gl.bindVertexArray(this.distancesTransformFeedback.vao);\n                                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\n                                gl.getBufferSubData(gl.ARRAY_BUFFER, 0, outComputedDistances);\n                                gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n                                if (currentVao) gl.bindVertexArray(currentVao);\n\n                                // console.timeEnd(\"gpu_compute_distances\");\n\n                                resolve();\n                        }\n                    }\n                };\n                this.computeDistancesOnGPUSyncTimeout = setTimeout(checkSync);\n            });\n\n            if (currentProgram && currentProgramDeleted !== true) gl.useProgram(currentProgram);\n            if (currentVao) gl.bindVertexArray(currentVao);\n\n            return promise;\n        };\n\n    }();\n\n    /**\n     * Given a global splat index, return corresponding local data (splat buffer, index of splat in that splat\n     * buffer, and the corresponding transform)\n     * @param {number} globalIndex Global splat index\n     * @param {object} paramsObj Object in which to store local data\n     * @param {boolean} returnSceneTransform By default, the transform of the scene to which the splat at 'globalIndex' belongs will be\n     *                                       returned via the 'sceneTransform' property of 'paramsObj' only if the splat mesh is static.\n     *                                       If 'returnSceneTransform' is true, the 'sceneTransform' property will always contain the scene\n     *                                       transform, and if 'returnSceneTransform' is false, the 'sceneTransform' property will always\n     *                                       be null.\n     */\n    getLocalSplatParameters(globalIndex, paramsObj, returnSceneTransform) {\n        if (returnSceneTransform === undefined || returnSceneTransform === null) {\n            returnSceneTransform = this.dynamicMode ? false : true;\n        }\n        paramsObj.splatBuffer = this.getSplatBufferForSplat(globalIndex);\n        paramsObj.localIndex = this.getSplatLocalIndex(globalIndex);\n        paramsObj.sceneTransform = returnSceneTransform ? this.getSceneTransformForSplat(globalIndex) : null;\n    }\n\n    /**\n     * Fill arrays with splat data and apply transforms if appropriate. Each array is optional.\n     * @param {Float32Array} covariances Target storage for splat covariances\n     * @param {Float32Array} centers Target storage for splat centers\n     * @param {Uint8Array} colors Target storage for splat colors\n     * @param {boolean} applySceneTransform By default, scene transforms are applied to relevant splat data only if the splat mesh is\n     *                                      static. If 'applySceneTransform' is true, scene transforms will always be applied and if\n     *                                      it is false, they will never be applied. If undefined, the default behavior will apply.\n     * @param {number} srcStart The start location from which to pull source data\n     * @param {number} srcEnd The end location from which to pull source data\n     * @param {number} destStart The start location from which to write data\n     */\n    fillSplatDataArrays(covariances, centers, colors, applySceneTransform, srcStart, srcEnd, destStart = 0) {\n\n        for (let i = 0; i < this.scenes.length; i++) {\n            if (applySceneTransform === undefined || applySceneTransform === null) {\n                applySceneTransform = this.dynamicMode ? false : true;\n            }\n\n            const scene = this.getScene(i);\n            const splatBuffer = scene.splatBuffer;\n            const sceneTransform = applySceneTransform ? scene.transform : null;\n            if (covariances) {\n                splatBuffer.fillSplatCovarianceArray(covariances, sceneTransform,\n                                                     srcStart, srcEnd, destStart, this.halfPrecisionCovariancesOnGPU ? 1 : 0);\n            }\n            if (centers) splatBuffer.fillSplatCenterArray(centers, sceneTransform, srcStart, srcEnd, destStart);\n            if (colors) splatBuffer.fillSplatColorArray(colors, scene.minimumAlpha, sceneTransform, srcStart, srcEnd, destStart);\n            destStart += splatBuffer.getSplatCount();\n        }\n    }\n\n    /**\n     * Convert splat centers, which are floating point values, to an array of integers and multiply\n     * each by 1000. Centers will get transformed as appropriate before conversion to integer.\n     * @param {number} start The index at which to start retrieving data\n     * @param {number} end The index at which to stop retrieving data\n     * @param {boolean} padFour Enforce alignment of 4 by inserting a 1 after every 3 values\n     * @return {Int32Array}\n     */\n    getIntegerCenters(start, end, padFour = false) {\n        const splatCount = end - start + 1;\n        const floatCenters = new Float32Array(splatCount * 3);\n        this.fillSplatDataArrays(null, floatCenters, null, undefined, start);\n        let intCenters;\n        let componentCount = padFour ? 4 : 3;\n        intCenters = new Int32Array(splatCount * componentCount);\n        for (let i = 0; i < splatCount; i++) {\n            for (let t = 0; t < 3; t++) {\n                intCenters[i * componentCount + t] = Math.round(floatCenters[i * 3 + t] * 1000.0);\n            }\n            if (padFour) intCenters[i * componentCount + 3] = 1000;\n        }\n        return intCenters;\n    }\n\n    /**\n     * Returns an array of splat centers, transformed as appropriate, optionally padded.\n     * @param {number} start The index at which to start retrieving data\n     * @param {number} end The index at which to stop retrieving data\n     * @param {boolean} padFour Enforce alignment of 4 by inserting a 1 after every 3 values\n     * @return {Float32Array}\n     */\n    getFloatCenters(start, end, padFour = false) {\n        const splatCount = end - start + 1;\n        const floatCenters = new Float32Array(splatCount * 3);\n        this.fillSplatDataArrays(null, floatCenters, null, undefined, start);\n        if (!padFour) return floatCenters;\n        let paddedFloatCenters = new Float32Array(splatCount * 4);\n        for (let i = 0; i < splatCount; i++) {\n            for (let t = 0; t < 3; t++) {\n                paddedFloatCenters[i * 4 + t] = floatCenters[i * 3 + t];\n            }\n            paddedFloatCenters[i * 4 + 3] = 1.0;\n        }\n        return paddedFloatCenters;\n    }\n\n    /**\n     * Get the center for a splat, transformed as appropriate.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector3} outCenter THREE.Vector3 instance in which to store splat center\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\n     *                                      'globalIndex' belongs will be applied to the splat center. If 'applySceneTransform' is true,\n     *                                      the scene transform will always be applied and if 'applySceneTransform' is false, the\n     *                                      scene transform will never be applied. If undefined, the default behavior will apply.\n     */\n    getSplatCenter = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outCenter, applySceneTransform) {\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\n            paramsObj.splatBuffer.getSplatCenter(paramsObj.localIndex, outCenter, paramsObj.sceneTransform);\n        };\n\n    }();\n\n    /**\n     * Get the scale and rotation for a splat, transformed as appropriate.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector3} outScale THREE.Vector3 instance in which to store splat scale\n     * @param {THREE.Quaternion} outRotation THREE.Quaternion instance in which to store splat rotation\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\n     *                                      'globalIndex' belongs will be applied to the splat scale and rotation. If\n     *                                      'applySceneTransform' is true, the scene transform will always be applied and if\n     *                                      'applySceneTransform' is false, the scene transform will never be applied. If undefined,\n     *                                      the default behavior will apply.\n     */\n    getSplatScaleAndRotation = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outScale, outRotation, applySceneTransform) {\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\n            paramsObj.splatBuffer.getSplatScaleAndRotation(paramsObj.localIndex, outScale, outRotation, paramsObj.sceneTransform);\n        };\n\n    }();\n\n    /**\n     * Get the color for a splat.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector4} outColor THREE.Vector4 instance in which to store splat color\n     */\n    getSplatColor = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outColor) {\n            this.getLocalSplatParameters(globalIndex, paramsObj);\n            paramsObj.splatBuffer.getSplatColor(paramsObj.localIndex, outColor, paramsObj.sceneTransform);\n        };\n\n    }();\n\n    /**\n     * Store the transform of the scene at 'sceneIndex' in 'outTransform'.\n     * @param {number} sceneIndex Index of the desired scene\n     * @param {THREE.Matrix4} outTransform Instance of THREE.Matrix4 in which to store the scene's transform\n     */\n    getSceneTransform(sceneIndex, outTransform) {\n        const scene = this.getScene(sceneIndex);\n        scene.updateTransform();\n        outTransform.copy(scene.transform);\n    }\n\n    /**\n     * Get the scene at 'sceneIndex'.\n     * @param {number} sceneIndex Index of the desired scene\n     * @return {SplatScene}\n     */\n    getScene(sceneIndex) {\n        if (sceneIndex < 0 || sceneIndex >= this.scenes.length) {\n            throw new Error('SplatMesh::getScene() -> Invalid scene index.');\n        }\n        return this.scenes[sceneIndex];\n    }\n\n    getSplatBufferForSplat(globalIndex) {\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).splatBuffer;\n    }\n\n    getSceneIndexForSplat(globalIndex) {\n        return this.globalSplatIndexToSceneIndexMap[globalIndex];\n    }\n\n    getSceneTransformForSplat(globalIndex) {\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).transform;\n    }\n\n    getSplatLocalIndex(globalIndex) {\n        return this.globalSplatIndexToLocalSplatIndexMap[globalIndex];\n    }\n\n    static getIntegerMatrixArray(matrix) {\n        const matrixElements = matrix.elements;\n        const intMatrixArray = [];\n        for (let i = 0; i < 16; i++) {\n            intMatrixArray[i] = Math.round(matrixElements[i] * 1000.0);\n        }\n        return intMatrixArray;\n    }\n}\n","import SorterWasm from './sorter.wasm';\nimport { Constants } from '../Constants.js';\n\nfunction sortWorker(self) {\n\n    let wasmInstance;\n    let wasmMemory;\n    let useSharedMemory;\n    let integerBasedSort;\n    let dynamicMode;\n    let splatCount;\n    let indexesToSortOffset;\n    let sortedIndexesOffset;\n    let transformIndexesOffset;\n    let transformsOffset;\n    let precomputedDistancesOffset;\n    let mappedDistancesOffset;\n    let frequenciesOffset;\n    let centersOffset;\n    let modelViewProjOffset;\n    let countsZero;\n    let sortedIndexesOut;\n\n    let Constants;\n\n    function sort(splatSortCount, splatRenderCount, modelViewProj,\n                  usePrecomputedDistances, copyIndexesToSort, copyPrecomputedDistances, copyTransforms) {\n        const sortStartTime = performance.now();\n\n        if (!useSharedMemory) {\n            const indexesToSort = new Uint32Array(wasmMemory, indexesToSortOffset, copyIndexesToSort.byteLength / Constants.BytesPerInt);\n            indexesToSort.set(copyIndexesToSort);\n            const transforms = new Float32Array(wasmMemory, transformsOffset, copyTransforms.byteLength / Constants.BytesPerFloat);\n            transforms.set(copyTransforms);\n            if (usePrecomputedDistances) {\n                let precomputedDistances;\n                if (integerBasedSort) {\n                    precomputedDistances = new Int32Array(wasmMemory, precomputedDistancesOffset,\n                                                          copyPrecomputedDistances.byteLength / Constants.BytesPerInt);\n                } else {\n                    precomputedDistances = new Float32Array(wasmMemory, precomputedDistancesOffset,\n                                                            copyPrecomputedDistances.byteLength / Constants.BytesPerFloat);\n                }\n                precomputedDistances.set(copyPrecomputedDistances);\n            }\n        }\n\n        if (!countsZero) countsZero = new Uint32Array(Constants.DepthMapRange);\n        new Float32Array(wasmMemory, modelViewProjOffset, 16).set(modelViewProj);\n        new Uint32Array(wasmMemory, frequenciesOffset, Constants.DepthMapRange).set(countsZero);\n        wasmInstance.exports.sortIndexes(indexesToSortOffset, centersOffset, precomputedDistancesOffset,\n                                         mappedDistancesOffset, frequenciesOffset, modelViewProjOffset,\n                                         sortedIndexesOffset, transformIndexesOffset, transformsOffset, Constants.DepthMapRange,\n                                         splatSortCount, splatRenderCount, splatCount, usePrecomputedDistances, integerBasedSort,\n                                         dynamicMode);\n\n        const sortMessage = {\n            'sortDone': true,\n            'splatSortCount': splatSortCount,\n            'splatRenderCount': splatRenderCount,\n            'sortTime': 0\n        };\n        if (!useSharedMemory) {\n            const sortedIndexes = new Uint32Array(wasmMemory, sortedIndexesOffset, splatRenderCount);\n            if (!sortedIndexesOut || sortedIndexesOut.length < splatRenderCount) {\n                sortedIndexesOut = new Uint32Array(splatRenderCount);\n            }\n            sortedIndexesOut.set(sortedIndexes);\n            sortMessage.sortedIndexes = sortedIndexesOut;\n        }\n        const sortEndTime = performance.now();\n\n        sortMessage.sortTime = sortEndTime - sortStartTime;\n\n        self.postMessage(sortMessage);\n    }\n\n    self.onmessage = (e) => {\n        if (e.data.centers) {\n            centers = e.data.centers;\n            transformIndexes = e.data.transformIndexes;\n            if (integerBasedSort) {\n                new Int32Array(wasmMemory, centersOffset + e.data.range.from * Constants.BytesPerInt * 4,\n                               e.data.range.count * 4).set(new Int32Array(centers));\n            } else {\n                new Float32Array(wasmMemory, centersOffset + e.data.range.from * Constants.BytesPerFloat * 4,\n                                 e.data.range.count * 4).set(new Float32Array(centers));\n            }\n            if (dynamicMode) {\n                new Uint32Array(wasmMemory, transformIndexesOffset + e.data.range.from * 4,\n                                e.data.range.count).set(new Uint32Array(transformIndexes));\n            }\n            self.postMessage({\n                'centerDataSet': true,\n            });\n        } else if (e.data.sort) {\n            const renderCount = e.data.sort.splatRenderCount || 0;\n            const sortCount = e.data.sort.splatSortCount || 0;\n            const usePrecomputedDistances = e.data.sort.usePrecomputedDistances;\n\n            let copyIndexesToSort;\n            let copyPrecomputedDistances;\n            let copyTransforms;\n            if (!useSharedMemory) {\n                copyIndexesToSort = e.data.sort.indexesToSort;\n                copyTransforms = e.data.sort.transforms;\n                if (usePrecomputedDistances) copyPrecomputedDistances = e.data.sort.precomputedDistances;\n            }\n            sort(sortCount, renderCount, e.data.sort.modelViewProj, usePrecomputedDistances,\n                 copyIndexesToSort, copyPrecomputedDistances, copyTransforms);\n        } else if (e.data.init) {\n            // Yep, this is super hacky and gross :(\n            Constants = e.data.init.Constants;\n\n            splatCount = e.data.init.splatCount;\n            useSharedMemory = e.data.init.useSharedMemory;\n            integerBasedSort = e.data.init.integerBasedSort;\n            dynamicMode = e.data.init.dynamicMode;\n\n            const CENTERS_BYTES_PER_ENTRY = integerBasedSort ? (Constants.BytesPerInt * 4) : (Constants.BytesPerFloat * 4);\n\n            const sorterWasmBytes = new Uint8Array(e.data.init.sorterWasmBytes);\n\n            const matrixSize = 16 * Constants.BytesPerFloat;\n            const memoryRequiredForIndexesToSort = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForCenters = splatCount * CENTERS_BYTES_PER_ENTRY;\n            const memoryRequiredForModelViewProjectionMatrix = matrixSize;\n            const memoryRequiredForPrecomputedDistances = integerBasedSort ?\n                                                          (splatCount * Constants.BytesPerInt) : (splatCount * Constants.BytesPerFloat);\n            const memoryRequiredForMappedDistances = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForSortedIndexes = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForIntermediateSortBuffers = Constants.DepthMapRange * Constants.BytesPerInt * 2;\n            const memoryRequiredforTransformIndexes = dynamicMode ? (splatCount * Constants.BytesPerInt) : 0;\n            const memoryRequiredforTransforms = dynamicMode ? (Constants.MaxScenes * matrixSize) : 0;\n            const extraMemory = Constants.MemoryPageSize * 32;\n\n            const totalRequiredMemory = memoryRequiredForIndexesToSort +\n                                        memoryRequiredForCenters +\n                                        memoryRequiredForModelViewProjectionMatrix +\n                                        memoryRequiredForPrecomputedDistances +\n                                        memoryRequiredForMappedDistances +\n                                        memoryRequiredForIntermediateSortBuffers +\n                                        memoryRequiredForSortedIndexes +\n                                        memoryRequiredforTransformIndexes +\n                                        memoryRequiredforTransforms +\n                                        extraMemory;\n            const totalPagesRequired = Math.floor(totalRequiredMemory / Constants.MemoryPageSize ) + 1;\n            const sorterWasmImport = {\n                module: {},\n                env: {\n                    memory: new WebAssembly.Memory({\n                        initial: totalPagesRequired * 2,\n                        maximum: totalPagesRequired * 4,\n                        shared: true,\n                    }),\n                }\n            };\n            WebAssembly.compile(sorterWasmBytes)\n            .then((wasmModule) => {\n                return WebAssembly.instantiate(wasmModule, sorterWasmImport);\n            })\n            .then((instance) => {\n                wasmInstance = instance;\n                indexesToSortOffset = 0;\n                centersOffset = indexesToSortOffset + memoryRequiredForIndexesToSort;\n                modelViewProjOffset = centersOffset + memoryRequiredForCenters;\n                precomputedDistancesOffset = modelViewProjOffset + memoryRequiredForModelViewProjectionMatrix;\n                mappedDistancesOffset = precomputedDistancesOffset + memoryRequiredForPrecomputedDistances;\n                frequenciesOffset = mappedDistancesOffset + memoryRequiredForMappedDistances;\n                sortedIndexesOffset = frequenciesOffset + memoryRequiredForIntermediateSortBuffers;\n                transformIndexesOffset = sortedIndexesOffset + memoryRequiredForSortedIndexes;\n                transformsOffset = transformIndexesOffset + memoryRequiredforTransformIndexes;\n                wasmMemory = sorterWasmImport.env.memory.buffer;\n                if (useSharedMemory) {\n                    self.postMessage({\n                        'sortSetupPhase1Complete': true,\n                        'indexesToSortBuffer': wasmMemory,\n                        'indexesToSortOffset': indexesToSortOffset,\n                        'sortedIndexesBuffer': wasmMemory,\n                        'sortedIndexesOffset': sortedIndexesOffset,\n                        'precomputedDistancesBuffer': wasmMemory,\n                        'precomputedDistancesOffset': precomputedDistancesOffset,\n                        'transformsBuffer': wasmMemory,\n                        'transformsOffset': transformsOffset\n                    });\n                } else {\n                    self.postMessage({\n                        'sortSetupPhase1Complete': true\n                    });\n                }\n            });\n        }\n    };\n}\n\nexport function createSortWorker(splatCount, useSharedMemory, integerBasedSort, dynamicMode) {\n    const worker = new Worker(\n        URL.createObjectURL(\n            new Blob(['(', sortWorker.toString(), ')(self)'], {\n                type: 'application/javascript',\n            }),\n        ),\n    );\n\n    const sorterWasmBinaryString = atob(SorterWasm);\n    const sorterWasmBytes = new Uint8Array(sorterWasmBinaryString.length);\n    for (let i = 0; i < sorterWasmBinaryString.length; i++) {\n        sorterWasmBytes[i] = sorterWasmBinaryString.charCodeAt(i);\n    }\n\n    worker.postMessage({\n        'init': {\n            'sorterWasmBytes': sorterWasmBytes.buffer,\n            'splatCount': splatCount,\n            'useSharedMemory': useSharedMemory,\n            'integerBasedSort': integerBasedSort,\n            'dynamicMode': dynamicMode,\n            // Super hacky\n            'Constants': {\n                'BytesPerFloat': Constants.BytesPerFloat,\n                'BytesPerInt': Constants.BytesPerInt,\n                'DepthMapRange': Constants.DepthMapRange,\n                'MemoryPageSize': Constants.MemoryPageSize,\n                'MaxScenes': Constants.MaxScenes\n            }\n        }\n    });\n    return worker;\n}\n","export const WebXRMode = {\n    None: 0,\n    VR: 1,\n    AR: 2\n};\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nexport class VRButton {\n\n    static createButton( renderer ) {\n\n        const button = document.createElement( 'button' );\n\n        function showEnterVR( /* device */ ) {\n\n            let currentSession = null;\n\n            async function onSessionStarted( session ) {\n\n                session.addEventListener( 'end', onSessionEnded );\n\n                await renderer.xr.setSession( session );\n                button.textContent = 'EXIT VR';\n\n                currentSession = session;\n\n            }\n\n            function onSessionEnded( /* event */ ) {\n\n                currentSession.removeEventListener( 'end', onSessionEnded );\n\n                button.textContent = 'ENTER VR';\n\n                currentSession = null;\n\n            }\n\n            //\n\n            button.style.display = '';\n\n            button.style.cursor = 'pointer';\n            button.style.left = 'calc(50% - 50px)';\n            button.style.width = '100px';\n\n            button.textContent = 'ENTER VR';\n\n            // WebXR's requestReferenceSpace only works if the corresponding feature\n            // was requested at session creation time. For simplicity, just ask for\n            // the interesting ones as optional features, but be aware that the\n            // requestReferenceSpace call will fail if it turns out to be unavailable.\n            // ('local' is always available for immersive sessions and doesn't need to\n            // be requested separately.)\n\n            const sessionInit = { optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking', 'layers'] };\n\n            button.onmouseenter = function() {\n\n                button.style.opacity = '1.0';\n\n            };\n\n            button.onmouseleave = function() {\n\n                button.style.opacity = '0.5';\n\n            };\n\n            button.onclick = function() {\n\n                if ( currentSession === null ) {\n\n                    navigator.xr.requestSession( 'immersive-vr', sessionInit ).then( onSessionStarted );\n\n                } else {\n\n                    currentSession.end();\n\n                    if ( navigator.xr.offerSession !== undefined ) {\n\n                        navigator.xr.offerSession( 'immersive-vr', sessionInit )\n                            .then( onSessionStarted )\n                            .catch( ( err ) => {\n\n                                console.warn( err );\n\n                            } );\n\n                    }\n\n                }\n\n            };\n\n            if ( navigator.xr.offerSession !== undefined ) {\n\n                navigator.xr.offerSession( 'immersive-vr', sessionInit )\n                    .then( onSessionStarted )\n                    .catch( ( err ) => {\n\n                        console.warn( err );\n\n                    } );\n\n            }\n\n        }\n\n        function disableButton() {\n\n            button.style.display = '';\n\n            button.style.cursor = 'auto';\n            button.style.left = 'calc(50% - 75px)';\n            button.style.width = '150px';\n\n            button.onmouseenter = null;\n            button.onmouseleave = null;\n\n            button.onclick = null;\n\n        }\n\n        function showWebXRNotFound() {\n\n            disableButton();\n\n            button.textContent = 'VR NOT SUPPORTED';\n\n        }\n\n        function showVRNotAllowed( exception ) {\n\n            disableButton();\n\n            console.warn( 'Exception when trying to call xr.isSessionSupported', exception );\n\n            button.textContent = 'VR NOT ALLOWED';\n\n        }\n\n        function stylizeElement( element ) {\n\n            element.style.position = 'absolute';\n            element.style.bottom = '20px';\n            element.style.padding = '12px 6px';\n            element.style.border = '1px solid #fff';\n            element.style.borderRadius = '4px';\n            element.style.background = 'rgba(0,0,0,0.1)';\n            element.style.color = '#fff';\n            element.style.font = 'normal 13px sans-serif';\n            element.style.textAlign = 'center';\n            element.style.opacity = '0.5';\n            element.style.outline = 'none';\n            element.style.zIndex = '999';\n\n        }\n\n        if ( 'xr' in navigator ) {\n\n            button.id = 'VRButton';\n            button.style.display = 'none';\n\n            stylizeElement( button );\n\n            navigator.xr.isSessionSupported( 'immersive-vr' ).then( function( supported ) {\n\n                supported ? showEnterVR() : showWebXRNotFound();\n\n                if ( supported && VRButton.xrSessionIsGranted ) {\n\n                    button.click();\n\n                }\n\n            } ).catch( showVRNotAllowed );\n\n            return button;\n\n        } else {\n\n            const message = document.createElement( 'a' );\n\n            if ( window.isSecureContext === false ) {\n\n                message.href = document.location.href.replace( /^http:/, 'https:' );\n                message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n\n            } else {\n\n                message.href = 'https://immersiveweb.dev/';\n                message.innerHTML = 'WEBXR NOT AVAILABLE';\n\n            }\n\n            message.style.left = 'calc(50% - 90px)';\n            message.style.width = '180px';\n            message.style.textDecoration = 'none';\n\n            stylizeElement( message );\n\n            return message;\n\n        }\n\n    }\n\n    static registerSessionGrantedListener() {\n\n        if ( typeof navigator !== 'undefined' && 'xr' in navigator ) {\n\n            // WebXRViewer (based on Firefox) has a bug where addEventListener\n            // throws a silent exception and aborts execution entirely.\n            if ( /WebXRViewer\\//i.test( navigator.userAgent ) ) return;\n\n            navigator.xr.addEventListener( 'sessiongranted', () => {\n\n                VRButton.xrSessionIsGranted = true;\n\n            } );\n\n        }\n\n    }\n\n}\n\nVRButton.xrSessionIsGranted = false;\nVRButton.registerSessionGrantedListener();\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nexport class ARButton {\n\n    static createButton( renderer, sessionInit = {} ) {\n\n        const button = document.createElement( 'button' );\n\n        function showStartAR( /* device */ ) {\n\n            if ( sessionInit.domOverlay === undefined ) {\n\n                const overlay = document.createElement( 'div' );\n                overlay.style.display = 'none';\n                document.body.appendChild( overlay );\n\n                const svg = document.createElementNS( 'http://www.w3.org/2000/svg', 'svg' );\n                svg.setAttribute( 'width', 38 );\n                svg.setAttribute( 'height', 38 );\n                svg.style.position = 'absolute';\n                svg.style.right = '20px';\n                svg.style.top = '20px';\n                svg.addEventListener( 'click', function() {\n\n                    currentSession.end();\n\n                } );\n                overlay.appendChild( svg );\n\n                const path = document.createElementNS( 'http://www.w3.org/2000/svg', 'path' );\n                path.setAttribute( 'd', 'M 12,12 L 28,28 M 28,12 12,28' );\n                path.setAttribute( 'stroke', '#fff' );\n                path.setAttribute( 'stroke-width', 2 );\n                svg.appendChild( path );\n\n                if ( sessionInit.optionalFeatures === undefined ) {\n\n                    sessionInit.optionalFeatures = [];\n\n                }\n\n                sessionInit.optionalFeatures.push( 'dom-overlay' );\n                sessionInit.domOverlay = { root: overlay };\n\n            }\n\n            //\n\n            let currentSession = null;\n\n            async function onSessionStarted( session ) {\n\n                session.addEventListener( 'end', onSessionEnded );\n\n                renderer.xr.setReferenceSpaceType( 'local' );\n\n                await renderer.xr.setSession( session );\n\n                button.textContent = 'STOP AR';\n                sessionInit.domOverlay.root.style.display = '';\n\n                currentSession = session;\n\n            }\n\n            function onSessionEnded( /* event */ ) {\n\n                currentSession.removeEventListener( 'end', onSessionEnded );\n\n                button.textContent = 'START AR';\n                sessionInit.domOverlay.root.style.display = 'none';\n\n                currentSession = null;\n\n            }\n\n            //\n\n            button.style.display = '';\n\n            button.style.cursor = 'pointer';\n            button.style.left = 'calc(50% - 50px)';\n            button.style.width = '100px';\n\n            button.textContent = 'START AR';\n\n            button.onmouseenter = function() {\n\n                button.style.opacity = '1.0';\n\n            };\n\n            button.onmouseleave = function() {\n\n                button.style.opacity = '0.5';\n\n            };\n\n            button.onclick = function() {\n\n                if ( currentSession === null ) {\n\n                    navigator.xr.requestSession( 'immersive-ar', sessionInit ).then( onSessionStarted );\n\n                } else {\n\n                    currentSession.end();\n\n                    if ( navigator.xr.offerSession !== undefined ) {\n\n                        navigator.xr.offerSession( 'immersive-ar', sessionInit )\n                            .then( onSessionStarted )\n                            .catch( ( err ) => {\n\n                                console.warn( err );\n\n                            } );\n\n                    }\n\n                }\n\n            };\n\n            if ( navigator.xr.offerSession !== undefined ) {\n\n                navigator.xr.offerSession( 'immersive-ar', sessionInit )\n                    .then( onSessionStarted )\n                    .catch( ( err ) => {\n\n                        console.warn( err );\n\n                    } );\n\n            }\n\n        }\n\n        function disableButton() {\n\n            button.style.display = '';\n\n            button.style.cursor = 'auto';\n            button.style.left = 'calc(50% - 75px)';\n            button.style.width = '150px';\n\n            button.onmouseenter = null;\n            button.onmouseleave = null;\n\n            button.onclick = null;\n\n        }\n\n        function showARNotSupported() {\n\n            disableButton();\n\n            button.textContent = 'AR NOT SUPPORTED';\n\n        }\n\n        function showARNotAllowed( exception ) {\n\n            disableButton();\n\n            console.warn( 'Exception when trying to call xr.isSessionSupported', exception );\n\n            button.textContent = 'AR NOT ALLOWED';\n\n        }\n\n        function stylizeElement( element ) {\n\n            element.style.position = 'absolute';\n            element.style.bottom = '20px';\n            element.style.padding = '12px 6px';\n            element.style.border = '1px solid #fff';\n            element.style.borderRadius = '4px';\n            element.style.background = 'rgba(0,0,0,0.1)';\n            element.style.color = '#fff';\n            element.style.font = 'normal 13px sans-serif';\n            element.style.textAlign = 'center';\n            element.style.opacity = '0.5';\n            element.style.outline = 'none';\n            element.style.zIndex = '999';\n\n        }\n\n        if ( 'xr' in navigator ) {\n\n            button.id = 'ARButton';\n            button.style.display = 'none';\n\n            stylizeElement( button );\n\n            navigator.xr.isSessionSupported( 'immersive-ar' ).then( function( supported ) {\n\n                supported ? showStartAR() : showARNotSupported();\n\n            } ).catch( showARNotAllowed );\n\n            return button;\n\n        } else {\n\n            const message = document.createElement( 'a' );\n\n            if ( window.isSecureContext === false ) {\n\n                message.href = document.location.href.replace( /^http:/, 'https:' );\n                message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n\n            } else {\n\n                message.href = 'https://immersiveweb.dev/';\n                message.innerHTML = 'WEBXR NOT AVAILABLE';\n\n            }\n\n            message.style.left = 'calc(50% - 90px)';\n            message.style.width = '180px';\n            message.style.textDecoration = 'none';\n\n            stylizeElement( message );\n\n            return message;\n\n        }\n\n    }\n\n}\n","export const RenderMode = {\n    Always: 0,\n    OnChange: 1,\n    Never: 2\n};\n","import * as THREE from 'three';\nimport { OrbitControls } from './OrbitControls.js';\nimport { PlyLoader } from './loaders/ply/PlyLoader.js';\nimport { SplatLoader } from './loaders/splat/SplatLoader.js';\nimport { KSplatLoader } from './loaders/ksplat/KSplatLoader.js';\nimport { sceneFormatFromPath } from './loaders/Utils.js';\nimport { LoadingSpinner } from './ui/LoadingSpinner.js';\nimport { LoadingProgressBar } from './ui/LoadingProgressBar.js';\nimport { InfoPanel } from './ui/InfoPanel.js';\nimport { SceneHelper } from './SceneHelper.js';\nimport { Raycaster } from './raycaster/Raycaster.js';\nimport { SplatMesh } from './SplatMesh.js';\nimport { createSortWorker } from './worker/SortWorker.js';\nimport { Constants } from './Constants.js';\nimport { getCurrentTime } from './Util.js';\nimport { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\nimport { SceneFormat } from './loaders/SceneFormat.js';\nimport { WebXRMode } from './webxr/WebXRMode.js';\nimport { VRButton } from './webxr/VRButton.js';\nimport { ARButton } from './webxr/ARButton.js';\nimport { delayedExecute } from './Util.js';\nimport { LoaderStatus } from './loaders/LoaderStatus.js';\nimport { RenderMode } from './RenderMode.js';\nimport { LogLevel } from './LogLevel.js';\nimport { SceneRevealMode } from './SceneRevealMode.js';\n\nconst THREE_CAMERA_FOV = 50;\nconst MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT = .75;\nconst MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER = 1500000;\nconst FOCUS_MARKER_FADE_IN_SPEED = 10.0;\nconst FOCUS_MARKER_FADE_OUT_SPEED = 2.5;\nconst CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION = 60;\n\n/**\n * Viewer: Manages the rendering of splat scenes. Manages an instance of SplatMesh as well as a web worker\n * that performs the sort for its splats.\n */\nexport class Viewer {\n\n    constructor(options = {}) {\n\n        // The natural 'up' vector for viewing the scene (only has an effect when used with orbit controls and\n        // when the viewer uses its own camera).\n        if (!options.cameraUp) options.cameraUp = [0, 1, 0];\n        this.cameraUp = new THREE.Vector3().fromArray(options.cameraUp);\n\n        // The camera's initial position (only used when the viewer uses its own camera).\n        if (!options.initialCameraPosition) options.initialCameraPosition = [0, 10, 15];\n        this.initialCameraPosition = new THREE.Vector3().fromArray(options.initialCameraPosition);\n\n        // The initial focal point of the camera and center of the camera's orbit (only used when the viewer uses its own camera).\n        if (!options.initialCameraLookAt) options.initialCameraLookAt = [0, 0, 0];\n        this.initialCameraLookAt = new THREE.Vector3().fromArray(options.initialCameraLookAt);\n\n        // 'dropInMode' is a flag that is used internally to support the usage of the viewer as a Three.js scene object\n        this.dropInMode = options.dropInMode || false;\n\n        // If 'selfDrivenMode' is true, the viewer manages its own update/animation loop via requestAnimationFrame()\n        if (options.selfDrivenMode === undefined || options.selfDrivenMode === null) options.selfDrivenMode = true;\n        this.selfDrivenMode = options.selfDrivenMode && !this.dropInMode;\n        this.selfDrivenUpdateFunc = this.selfDrivenUpdate.bind(this);\n\n        // If 'useBuiltInControls' is true, the viewer will create its own instance of OrbitControls and attach to the camera\n        if (options.useBuiltInControls === undefined) options.useBuiltInControls = true;\n        this.useBuiltInControls = options.useBuiltInControls;\n\n        // parent element of the Three.js renderer canvas\n        this.rootElement = options.rootElement;\n\n        // Tells the viewer to pretend the device pixel ratio is 1, which can boost performance on devices where it is larger,\n        // at a small cost to visual quality\n        this.ignoreDevicePixelRatio = options.ignoreDevicePixelRatio || false;\n        this.devicePixelRatio = this.ignoreDevicePixelRatio ? 1 : window.devicePixelRatio;\n\n        // Tells the viewer to use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\n        this.halfPrecisionCovariancesOnGPU = options.halfPrecisionCovariancesOnGPU || false;\n\n        // If 'threeScene' is valid, it will be rendered by the viewer along with the splat mesh\n        this.threeScene = options.threeScene;\n        // Allows for usage of an external Three.js renderer\n        this.renderer = options.renderer;\n        // Allows for usage of an external Three.js camera\n        this.camera = options.camera;\n\n        // If 'gpuAcceleratedSort' is true, a partially GPU-accelerated approach to sorting splats will be used.\n        // Currently this means pre-computing splat distances from the camera on the GPU\n        this.gpuAcceleratedSort = options.gpuAcceleratedSort || false;\n\n        // if 'integerBasedSort' is true, the integer version of splat centers as well as other values used to calculate\n        // splat distances are used instead of the float version. This speeds up computation, but introduces the possibility of\n        // overflow in larger scenes.\n        if (options.integerBasedSort === undefined || options.integerBasedSort === null) {\n            options.integerBasedSort = true;\n        }\n        this.integerBasedSort = options.integerBasedSort;\n\n        // If 'sharedMemoryForWorkers' is true, a SharedArrayBuffer will be used to communicate with web workers. This method\n        // is faster than copying memory to or from web workers, but comes with security implications as outlined here:\n        // https://web.dev/articles/cross-origin-isolation-guide\n        // If enabled, it requires specific CORS headers to be present in the response from the server that is sent when\n        // loading the application. More information is available in the README.\n        if (options.sharedMemoryForWorkers === undefined || options.sharedMemoryForWorkers === null) options.sharedMemoryForWorkers = true;\n        this.sharedMemoryForWorkers = options.sharedMemoryForWorkers;\n\n        // if 'dynamicScene' is true, it tells the viewer to assume scene elements are not stationary or that the number of splats in the\n        // scene may change. This prevents optimizations that depend on a static scene from being made. Additionally, if 'dynamicScene' is\n        // true it tells the splat mesh to not apply scene tranforms to splat data that is returned by functions like\n        // SplatMesh.getSplatCenter() by default.\n        this.dynamicScene = !!options.dynamicScene;\n\n        // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\n        // substantially different resolution than that at which they were rendered during training. This will only work correctly\n        // for models that were trained using a process that utilizes this compensation calculation. For more details:\n        // https://github.com/nerfstudio-project/gsplat/pull/117\n        // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\n        this.antialiased = options.antialiased || false;\n\n        this.webXRMode = options.webXRMode || WebXRMode.None;\n        if (this.webXRMode !== WebXRMode.None) {\n            this.gpuAcceleratedSort = false;\n        }\n        this.webXRActive = false;\n\n        // if 'renderMode' is RenderMode.Always, then the viewer will rrender the scene on every update. If it is RenderMode.OnChange,\n        // it will only render when something in the scene has changed.\n        this.renderMode = options.renderMode || RenderMode.Always;\n\n        // SceneRevealMode.Default results in a nice, slow fade-in effect for progressively loaded scenes,\n        // and a fast fade-in for non progressively loaded scenes.\n        // SceneRevealMode.Gradual will force a slow fade-in for all scenes.\n        // SceneRevealMode.Instant will force all loaded scene data to be immediately visible.\n        this.sceneRevealMode = options.sceneRevealMode || SceneRevealMode.Default;\n\n        // Hacky, experimental, non-scientific parameter for tweaking focal length related calculations. For scenes with very\n        // small gaussians, small details, and small dimensions -- increasing this value can help improve visual quality.\n        this.focalAdjustment = options.focalAdjustment || 1.0;\n\n        // Specify the maximum screen-space splat size, can help deal with large splats that get too unwieldy\n        this.maxScreenSpaceSplatSize = options.maxScreenSpaceSplatSize || 2048;\n\n        // The verbosity of console logging\n        this.logLevel = options.logLevel || LogLevel.None;\n\n        this.createSplatMesh();\n\n        this.controls = null;\n        this.perspectiveControls = null;\n        this.orthographicControls = null;\n\n        this.orthographicCamera = null;\n        this.perspectiveCamera = null;\n\n        this.showMeshCursor = false;\n        this.showControlPlane = false;\n        this.showInfo = false;\n\n        this.sceneHelper = null;\n\n        this.sortWorker = null;\n        this.sortRunning = false;\n        this.splatRenderCount = 0;\n        this.sortWorkerIndexesToSort = null;\n        this.sortWorkerSortedIndexes = null;\n        this.sortWorkerPrecomputedDistances = null;\n        this.sortWorkerTransforms = null;\n        this.runAfterFirstSort = [];\n\n        this.selfDrivenModeRunning = false;\n        this.splatRenderReady = false;\n\n        this.raycaster = new Raycaster();\n\n        this.infoPanel = null;\n\n        this.startInOrthographicMode = false;\n\n        this.currentFPS = 0;\n        this.lastSortTime = 0;\n        this.consecutiveRenderFrames = 0;\n\n        this.previousCameraTarget = new THREE.Vector3();\n        this.nextCameraTarget = new THREE.Vector3();\n\n        this.mousePosition = new THREE.Vector2();\n        this.mouseDownPosition = new THREE.Vector2();\n        this.mouseDownTime = null;\n\n        this.resizeObserver = null;\n        this.mouseMoveListener = null;\n        this.mouseDownListener = null;\n        this.mouseUpListener = null;\n        this.keyDownListener = null;\n\n        this.sortPromise = null;\n        this.sortPromiseResolver = null;\n        this.splatSceneDownloadPromises = {};\n        this.splatSceneDownloadAndBuildPromise = null;\n        this.splatSceneRemovalPromise = null;\n\n        this.loadingSpinner = new LoadingSpinner(null, this.rootElement || document.body);\n        this.loadingSpinner.hide();\n        this.loadingProgressBar = new LoadingProgressBar(this.rootElement || document.body);\n        this.loadingProgressBar.hide();\n        this.infoPanel = new InfoPanel(this.rootElement || document.body);\n        this.infoPanel.hide();\n\n        this.usingExternalCamera = (this.dropInMode || this.camera) ? true : false;\n        this.usingExternalRenderer = (this.dropInMode || this.renderer) ? true : false;\n\n        this.initialized = false;\n        this.disposing = false;\n        this.disposed = false;\n        if (!this.dropInMode) this.init();\n    }\n\n    createSplatMesh() {\n        this.splatMesh = new SplatMesh(this.dynamicScene, this.halfPrecisionCovariancesOnGPU, this.devicePixelRatio,\n                                       this.gpuAcceleratedSort, this.integerBasedSort, this.antialiased,\n                                       this.maxScreenSpaceSplatSize, this.logLevel);\n        this.splatMesh.frustumCulled = false;\n    }\n\n    init() {\n\n        if (this.initialized) return;\n\n        if (!this.rootElement) {\n            if (!this.usingExternalRenderer) {\n                this.rootElement = document.createElement('div');\n                this.rootElement.style.width = '100%';\n                this.rootElement.style.height = '100%';\n                this.rootElement.style.position = 'absolute';\n                document.body.appendChild(this.rootElement);\n            } else {\n                this.rootElement = this.renderer.domElement.parentElement || document.body;\n            }\n        }\n\n        this.setupCamera();\n        this.setupRenderer();\n        this.setupWebXR();\n        this.setupControls();\n        this.setupEventHandlers();\n\n        this.threeScene = this.threeScene || new THREE.Scene();\n        this.sceneHelper = new SceneHelper(this.threeScene);\n        this.sceneHelper.setupMeshCursor();\n        this.sceneHelper.setupFocusMarker();\n        this.sceneHelper.setupControlPlane();\n\n        this.loadingProgressBar.setContainer(this.rootElement);\n        this.loadingSpinner.setContainer(this.rootElement);\n        this.infoPanel.setContainer(this.rootElement);\n\n        this.initialized = true;\n    }\n\n    setupCamera() {\n        if (!this.usingExternalCamera) {\n            const renderDimensions = new THREE.Vector2();\n            this.getRenderDimensions(renderDimensions);\n\n            this.perspectiveCamera = new THREE.PerspectiveCamera(THREE_CAMERA_FOV, renderDimensions.x / renderDimensions.y, 0.1, 1000);\n            this.orthographicCamera = new THREE.OrthographicCamera(renderDimensions.x / -2, renderDimensions.x / 2,\n                                                                   renderDimensions.y / 2, renderDimensions.y / -2, 0.1, 1000 );\n            this.camera = this.startInOrthographicMode ? this.orthographicCamera : this.perspectiveCamera;\n            this.camera.position.copy(this.initialCameraPosition);\n            this.camera.up.copy(this.cameraUp).normalize();\n            this.camera.lookAt(this.initialCameraLookAt);\n        }\n    }\n\n    setupRenderer() {\n        if (!this.usingExternalRenderer) {\n            const renderDimensions = new THREE.Vector2();\n            this.getRenderDimensions(renderDimensions);\n\n            this.renderer = new THREE.WebGLRenderer({\n                antialias: false,\n                precision: 'highp'\n            });\n            this.renderer.setPixelRatio(this.devicePixelRatio);\n            this.renderer.autoClear = true;\n            this.renderer.setClearColor(new THREE.Color( 0x000000 ), 0.0);\n            this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n\n            this.resizeObserver = new ResizeObserver(() => {\n                this.getRenderDimensions(renderDimensions);\n                this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n                this.forceRenderNextFrame();\n            });\n            this.resizeObserver.observe(this.rootElement);\n            this.rootElement.appendChild(this.renderer.domElement);\n        }\n\n    }\n\n    setupWebXR() {\n        if (this.webXRMode) {\n            if (this.webXRMode === WebXRMode.VR) {\n                this.rootElement.appendChild(VRButton.createButton(this.renderer));\n            } else if (this.webXRMode === WebXRMode.AR) {\n                this.rootElement.appendChild(ARButton.createButton(this.renderer));\n            }\n            this.renderer.xr.addEventListener('sessionstart', (e) => {\n                this.webXRActive = true;\n            });\n            this.renderer.xr.addEventListener('sessionend', (e) => {\n                this.webXRActive = false;\n            });\n            this.renderer.xr.enabled = true;\n            this.camera.position.copy(this.initialCameraPosition);\n            this.camera.up.copy(this.cameraUp).normalize();\n            this.camera.lookAt(this.initialCameraLookAt);\n        }\n    }\n\n    setupControls() {\n        if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\n            if (!this.usingExternalCamera) {\n                this.perspectiveControls = new OrbitControls(this.perspectiveCamera, this.renderer.domElement);\n                this.orthographicControls = new OrbitControls(this.orthographicCamera, this.renderer.domElement);\n            } else {\n                if (this.camera.isOrthographicCamera) {\n                    this.orthographicControls = new OrbitControls(this.camera, this.renderer.domElement);\n                } else {\n                    this.perspectiveControls = new OrbitControls(this.camera, this.renderer.domElement);\n                }\n            }\n            for (let controls of [this.perspectiveControls, this.orthographicControls]) {\n                if (controls) {\n                    controls.listenToKeyEvents(window);\n                    controls.rotateSpeed = 0.5;\n                    controls.maxPolarAngle = Math.PI * .75;\n                    controls.minPolarAngle = 0.1;\n                    controls.enableDamping = true;\n                    controls.dampingFactor = 0.05;\n                    controls.target.copy(this.initialCameraLookAt);\n                }\n            }\n            this.controls = this.camera.isOrthographicCamera ? this.orthographicControls : this.perspectiveControls;\n        }\n    }\n\n    setupEventHandlers() {\n        if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\n            this.mouseMoveListener = this.onMouseMove.bind(this);\n            this.renderer.domElement.addEventListener('pointermove', this.mouseMoveListener, false);\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.renderer.domElement.addEventListener('pointerdown', this.mouseDownListener, false);\n            this.mouseUpListener = this.onMouseUp.bind(this);\n            this.renderer.domElement.addEventListener('pointerup', this.mouseUpListener, false);\n            this.keyDownListener = this.onKeyDown.bind(this);\n            window.addEventListener('keydown', this.keyDownListener, false);\n        }\n    }\n\n    removeEventHandlers() {\n        if (this.useBuiltInControls) {\n            this.renderer.domElement.removeEventListener('pointermove', this.mouseMoveListener);\n            this.mouseMoveListener = null;\n            this.renderer.domElement.removeEventListener('pointerdown', this.mouseDownListener);\n            this.mouseDownListener = null;\n            this.renderer.domElement.removeEventListener('pointerup', this.mouseUpListener);\n            this.mouseUpListener = null;\n            window.removeEventListener('keydown', this.keyDownListener);\n            this.keyDownListener = null;\n        }\n    }\n\n    setRenderMode(renderMode) {\n        this.renderMode = renderMode;\n    }\n\n    onKeyDown = function() {\n\n        const forward = new THREE.Vector3();\n        const tempMatrixLeft = new THREE.Matrix4();\n        const tempMatrixRight = new THREE.Matrix4();\n\n        return function(e) {\n            forward.set(0, 0, -1);\n            forward.transformDirection(this.camera.matrixWorld);\n            tempMatrixLeft.makeRotationAxis(forward, Math.PI / 128);\n            tempMatrixRight.makeRotationAxis(forward, -Math.PI / 128);\n            switch (e.code) {\n                case 'KeyG':\n                    this.focalAdjustment += 0.02;\n                    this.forceRenderNextFrame();\n                break;\n                case 'KeyF':\n                    this.focalAdjustment -= 0.02;\n                    this.forceRenderNextFrame();\n                break;\n                case 'ArrowLeft':\n                    this.camera.up.transformDirection(tempMatrixLeft);\n                break;\n                case 'ArrowRight':\n                    this.camera.up.transformDirection(tempMatrixRight);\n                break;\n                case 'KeyC':\n                    this.showMeshCursor = !this.showMeshCursor;\n                break;\n                case 'KeyU':\n                    this.showControlPlane = !this.showControlPlane;\n                break;\n                case 'KeyI':\n                    this.showInfo = !this.showInfo;\n                    if (this.showInfo) {\n                        this.infoPanel.show();\n                    } else {\n                        this.infoPanel.hide();\n                    }\n                break;\n                case 'KeyO':\n                    if (!this.usingExternalCamera) {\n                        this.setOrthographicMode(!this.camera.isOrthographicCamera);\n                    }\n                break;\n                case 'KeyP':\n                    if (!this.usingExternalCamera) {\n                        this.splatMesh.setPointCloudModeEnabled(!this.splatMesh.getPointCloudModeEnabled());\n                    }\n                break;\n                case 'Equal':\n                    if (!this.usingExternalCamera) {\n                        this.splatMesh.setSplatScale(this.splatMesh.getSplatScale() + 0.05);\n                    }\n                break;\n                case 'Minus':\n                    if (!this.usingExternalCamera) {\n                        this.splatMesh.setSplatScale(Math.max(this.splatMesh.getSplatScale() - 0.05, 0.0));\n                    }\n                break;\n            }\n        };\n\n    }();\n\n    onMouseMove(mouse) {\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n    }\n\n    onMouseDown() {\n        this.mouseDownPosition.copy(this.mousePosition);\n        this.mouseDownTime = getCurrentTime();\n    }\n\n    onMouseUp = function() {\n\n        const clickOffset = new THREE.Vector2();\n\n        return function(mouse) {\n            clickOffset.copy(this.mousePosition).sub(this.mouseDownPosition);\n            const mouseUpTime = getCurrentTime();\n            const wasClick = mouseUpTime - this.mouseDownTime < 0.5 && clickOffset.length() < 2;\n            if (wasClick) {\n                this.onMouseClick(mouse);\n            }\n        };\n\n    }();\n\n    onMouseClick(mouse) {\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n        this.checkForFocalPointChange();\n    }\n\n    checkForFocalPointChange = function() {\n\n        const renderDimensions = new THREE.Vector2();\n        const toNewFocalPoint = new THREE.Vector3();\n        const outHits = [];\n\n        return function() {\n            if (!this.transitioningCameraTarget) {\n                this.getRenderDimensions(renderDimensions);\n                outHits.length = 0;\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n                if (outHits.length > 0) {\n                    const hit = outHits[0];\n                    const intersectionPoint = hit.origin;\n                    toNewFocalPoint.copy(intersectionPoint).sub(this.camera.position);\n                    if (toNewFocalPoint.length() > MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT) {\n                        this.previousCameraTarget.copy(this.controls.target);\n                        this.nextCameraTarget.copy(intersectionPoint);\n                        this.transitioningCameraTarget = true;\n                        this.transitioningCameraTargetStartTime = getCurrentTime();\n                    }\n                }\n            }\n        };\n\n    }();\n\n    getRenderDimensions(outDimensions) {\n        if (this.rootElement) {\n            outDimensions.x = this.rootElement.offsetWidth;\n            outDimensions.y = this.rootElement.offsetHeight;\n        } else {\n            this.renderer.getSize(outDimensions);\n        }\n    }\n\n    setOrthographicMode(orthographicMode) {\n        if (orthographicMode === this.camera.isOrthographicCamera) return;\n        const fromCamera = this.camera;\n        const toCamera = orthographicMode ? this.orthographicCamera : this.perspectiveCamera;\n        toCamera.position.copy(fromCamera.position);\n        toCamera.up.copy(fromCamera.up);\n        toCamera.rotation.copy(fromCamera.rotation);\n        toCamera.quaternion.copy(fromCamera.quaternion);\n        toCamera.matrix.copy(fromCamera.matrix);\n        this.camera = toCamera;\n\n        if (this.controls) {\n\n            const resetControls = (controls) => {\n                controls.saveState();\n                controls.reset();\n            };\n\n            const fromControls = this.controls;\n            const toControls = orthographicMode ? this.orthographicControls : this.perspectiveControls;\n\n            resetControls(toControls);\n            resetControls(fromControls);\n\n            toControls.target.copy(fromControls.target);\n            if (orthographicMode) {\n                Viewer.setCameraZoomFromPosition(toCamera, fromCamera, fromControls);\n            } else {\n                Viewer.setCameraPositionFromZoom(toCamera, fromCamera, toControls);\n            }\n            this.controls = toControls;\n            this.camera.lookAt(this.controls.target);\n        }\n    }\n\n    static setCameraPositionFromZoom = function() {\n\n        const tempVector = new THREE.Vector3();\n\n        return function(positionCamera, zoomedCamera, controls) {\n            const toLookAtDistance = 1 / (zoomedCamera.zoom * 0.001);\n            tempVector.copy(controls.target).sub(positionCamera.position).normalize().multiplyScalar(toLookAtDistance).negate();\n            positionCamera.position.copy(controls.target).add(tempVector);\n        };\n\n    }();\n\n\n    static setCameraZoomFromPosition = function() {\n\n        const tempVector = new THREE.Vector3();\n\n        return function(zoomCamera, positionZamera, controls) {\n            const toLookAtDistance = tempVector.copy(controls.target).sub(positionZamera.position).length();\n            zoomCamera.zoom = 1 / (toLookAtDistance * .001);\n        };\n\n    }();\n\n    updateSplatMesh = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (!this.splatMesh) return;\n            const splatCount = this.splatMesh.getSplatCount();\n            if (splatCount > 0) {\n                this.splatMesh.updateTransforms();\n                this.getRenderDimensions(renderDimensions);\n                const focalLengthX = this.camera.projectionMatrix.elements[0] * 0.5 *\n                                     this.devicePixelRatio * renderDimensions.x;\n                const focalLengthY = this.camera.projectionMatrix.elements[5] * 0.5 *\n                                     this.devicePixelRatio * renderDimensions.y;\n\n                const focalMultiplier = this.camera.isOrthographicCamera ? (1.0 / this.devicePixelRatio) : 1.0;\n                const focalAdjustment = this.focalAdjustment * focalMultiplier;\n                const inverseFocalAdjustment = 1.0 / focalAdjustment;\n\n                this.adjustForWebXRStereo(renderDimensions);\n                this.splatMesh.updateUniforms(renderDimensions, focalLengthX * focalAdjustment, focalLengthY * focalAdjustment,\n                                              this.camera.isOrthographicCamera, this.camera.zoom || 1.0, inverseFocalAdjustment);\n            }\n        };\n\n    }();\n\n    adjustForWebXRStereo(renderDimensions) {\n        // TODO: Figure out a less hacky way to determine if stereo rendering is active\n        if (this.camera && this.webXRActive) {\n            const xrCamera = this.renderer.xr.getCamera();\n            const xrCameraProj00 = xrCamera.projectionMatrix.elements[0];\n            const cameraProj00 = this.camera.projectionMatrix.elements[0];\n            renderDimensions.x *= (cameraProj00 / xrCameraProj00);\n        }\n    }\n\n    isLoadingOrUnloading() {\n        return Object.keys(this.splatSceneDownloadPromises).length > 0 || this.splatSceneDownloadAndBuildPromise !== null ||\n                           this.splatSceneRemovalPromise !== null;\n    }\n\n    isDisposingOrDisposed() {\n        return this.disposing || this.disposed;\n    }\n\n    addSplatSceneDownloadPromise(promise) {\n        this.splatSceneDownloadPromises[promise.id] = promise;\n    }\n\n    removeSplatSceneDownloadPromise(promise) {\n        delete this.splatSceneDownloadPromises[promise.id];\n    }\n\n    setSplatSceneDownloadAndBuildPromise(promise) {\n        this.splatSceneDownloadAndBuildPromise = promise;\n    }\n\n    clearSplatSceneDownloadAndBuildPromise() {\n        this.splatSceneDownloadAndBuildPromise = null;\n    }\n\n    /**\n     * Add a splat scene to the viewer and display any loading UI if appropriate.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {object} options {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     *         onProgress:                 Function to be called as file data are received, or other processing occurs\n     *\n     * }\n     * @return {AbortablePromise}\n     */\n    addSplatScene(path, options = {}) {\n\n        if (this.isLoadingOrUnloading()) {\n            throw new Error('Cannot add splat scene while another load or unload is already in progress.');\n        }\n\n        if (this.isDisposingOrDisposed()) {\n            throw new Error('Cannot add splat scene after dispose() is called.');\n        }\n\n        const format = (options.format !== undefined && options.format !== null) ? options.format : sceneFormatFromPath(path);\n        const streamBuildSections = Viewer.isStreamable(format) && options.streamView;\n        const showLoadingUI = (options.showLoadingUI !== undefined && options.showLoadingUI !== null) ? options.showLoadingUI : true;\n\n        let loadingUITaskId = null;\n        if (showLoadingUI) {\n            this.loadingSpinner.removeAllTasks();\n            loadingUITaskId = this.loadingSpinner.addTask('Downloading...');\n        }\n        const hideLoadingUI = () => {\n            this.loadingProgressBar.hide();\n            this.loadingSpinner.removeAllTasks();\n        };\n\n        const onProgressUIUpdate = (percentComplete, percentCompleteLabel, loaderStatus) => {\n            if (showLoadingUI) {\n                if (loaderStatus === LoaderStatus.Downloading) {\n                    if (percentComplete == 100) {\n                        this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Download complete!');\n                    } else {\n                        if (streamBuildSections) {\n                            this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Downloading splats...');\n                        } else {\n                            const suffix = percentCompleteLabel ? `: ${percentCompleteLabel}` : `...`;\n                            this.loadingSpinner.setMessageForTask(loadingUITaskId, `Downloading${suffix}`);\n                        }\n                    }\n                } else if (loaderStatus === LoaderStatus.Processing) {\n                    this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Processing splats...');\n                } else {\n                    this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Ready!');\n                }\n            }\n        };\n\n        let downloadDone = false;\n        let downloadedPercentage = 0;\n        const splatBuffersAddedUIUpdate = (firstBuild, finalBuild) => {\n            if (showLoadingUI) {\n                if (firstBuild && streamBuildSections || finalBuild && !streamBuildSections) {\n                    this.runAfterFirstSort.push(() => {\n                        this.loadingSpinner.removeTask(loadingUITaskId);\n                        if (!finalBuild && !downloadDone) this.loadingProgressBar.show();\n                    });\n                }\n                if (streamBuildSections) {\n                    if (finalBuild) {\n                        downloadDone = true;\n                        this.loadingProgressBar.hide();\n                    } else {\n                        this.loadingProgressBar.setProgress(downloadedPercentage);\n                    }\n                }\n            }\n        };\n\n        const onProgress = (percentComplete, percentCompleteLabel, loaderStatus) => {\n            downloadedPercentage = percentComplete;\n            onProgressUIUpdate(percentComplete, percentCompleteLabel, loaderStatus);\n            if (options.onProgress) options.onProgress(percentComplete, percentCompleteLabel, loaderStatus);\n        };\n\n        const buildSection = (splatBuffer, firstBuild, finalBuild) => {\n            if (!streamBuildSections && options.onProgress) options.onProgress(0, '0%', LoaderStatus.Processing);\n            const addSplatBufferOptions = {\n                'rotation': options.rotation || options.orientation,\n                'position': options.position,\n                'scale': options.scale,\n                'splatAlphaRemovalThreshold': options.splatAlphaRemovalThreshold,\n            };\n            return this.addSplatBuffers([splatBuffer], [addSplatBufferOptions],\n                                         finalBuild, firstBuild && showLoadingUI, showLoadingUI).then(() => {\n                if (!streamBuildSections && options.onProgress) options.onProgress(100, '100%', LoaderStatus.Processing);\n                splatBuffersAddedUIUpdate(firstBuild, finalBuild);\n            });\n        };\n\n        const loadFunc = streamBuildSections ? this.downloadAndBuildSingleSplatSceneStreaming.bind(this) :\n                                               this.downloadAndBuildSingleSplatSceneNonStreaming.bind(this);\n        return loadFunc(path, format, options.splatAlphaRemovalThreshold, buildSection.bind(this), onProgress, hideLoadingUI.bind(this));\n    }\n\n    /**\n     * Download a single non-streamed splat scene, convert to splat buffer and then rebuild the viewer's splat mesh\n     * by calling 'buildFunc'. Also sets/clears relevant instance synchronization objects, and calls appropriate functions\n     * on success or failure.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {SceneFormat} format Format of the splat scene file\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\n     * @param {function} buildFunc Function to build the viewer's splat mesh with the downloaded splat buffer\n     * @param {function} onProgress Function to be called as file data are received, or other processing occurs\n     * @param {function} onException Function to be called when exception occurs\n     * @return {AbortablePromise}\n     */\n    downloadAndBuildSingleSplatSceneNonStreaming(path, format, splatAlphaRemovalThreshold, buildFunc, onProgress, onException) {\n        const downloadPromise = this.downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold, onProgress, false, undefined, format)\n        .then((splatBuffer) => {\n            this.removeSplatSceneDownloadPromise(downloadPromise);\n            return buildFunc(splatBuffer, true, true).then(() => {\n                this.clearSplatSceneDownloadAndBuildPromise();\n            });\n        })\n        .catch((e) => {\n            if (onException) onException();\n            this.clearSplatSceneDownloadAndBuildPromise();\n            this.removeSplatSceneDownloadPromise(downloadPromise);\n            if (!(e instanceof AbortedPromiseError)) {\n                throw (new Error(`Viewer::addSplatScene -> Could not load file ${path}`));\n            }\n        });\n\n        this.addSplatSceneDownloadPromise(downloadPromise);\n        this.setSplatSceneDownloadAndBuildPromise(downloadPromise);\n\n        return downloadPromise;\n    }\n\n    /**\n     * Download a single splat scene and convert to splat buffer in a streamed manner, allowing rendering as the file downloads.\n     * As each section is downloaded, the viewer's splat mesh is rebuilt by calling 'buildFunc'\n     * Also sets/clears relevant instance synchronization objects, and calls appropriate functions on success or failure.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {SceneFormat} format Format of the splat scene file\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\n     * @param {function} buildFunc Function to rebuild the viewer's splat mesh after a new splat buffer section is downloaded\n     * @param {function} onDownloadProgress Function to be called as file data are received\n     * @param {function} onDownloadException Function to be called when exception occurs at any point during the full download\n     * @return {AbortablePromise}\n     */\n    downloadAndBuildSingleSplatSceneStreaming(path, format, splatAlphaRemovalThreshold, buildFunc,\n                                              onDownloadProgress, onDownloadException) {\n        let firstStreamedSectionDownloadAndBuildResolver;\n        let firstStreamedSectionDownloadAndBuildRejecter;\n        let splatSceneDownloadAndBuildResolver;\n        let splatSceneDownloadAndBuildRejecter;\n        let steamedSectionBuildCount = 0;\n        let streamedSectionBuilding = false;\n        const queuedStreamedSectionBuilds = [];\n\n        const checkAndBuildStreamedSections = () => {\n            if (queuedStreamedSectionBuilds.length > 0 && !streamedSectionBuilding && !this.isDisposingOrDisposed()) {\n                streamedSectionBuilding = true;\n                const queuedBuild = queuedStreamedSectionBuilds.shift();\n                buildFunc(queuedBuild.splatBuffer, queuedBuild.firstBuild, queuedBuild.finalBuild)\n                .then(() => {\n                    streamedSectionBuilding = false;\n                    if (queuedBuild.firstBuild) {\n                        firstStreamedSectionDownloadAndBuildRejecter = null;\n                        firstStreamedSectionDownloadAndBuildResolver();\n                    } else if (queuedBuild.finalBuild) {\n                        splatSceneDownloadAndBuildResolver();\n                        this.clearSplatSceneDownloadAndBuildPromise();\n                    }\n                    delayedExecute(() => checkAndBuildStreamedSections());\n                });\n            }\n        };\n\n        const onStreamedSectionProgress = (splatBuffer, finalBuild) => {\n            if (!this.isDisposingOrDisposed()) {\n                queuedStreamedSectionBuilds.push({\n                    splatBuffer,\n                    firstBuild: steamedSectionBuildCount === 0,\n                    finalBuild\n                });\n                steamedSectionBuildCount++;\n                checkAndBuildStreamedSections();\n            }\n        };\n\n        let splatSceneDownloadPromise = this.downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold,\n                                                                             onDownloadProgress, true, onStreamedSectionProgress, format);\n\n        const firstStreamedSectionBuildPromise = new AbortablePromise((resolver, rejecter) => {\n            firstStreamedSectionDownloadAndBuildResolver = resolver;\n            firstStreamedSectionDownloadAndBuildRejecter = rejecter;\n        }, splatSceneDownloadPromise.abortHandler);\n\n        const splatSceneDownloadAndBuildPromise = new AbortablePromise((resolver, rejecter) => {\n            splatSceneDownloadAndBuildResolver = resolver;\n            splatSceneDownloadAndBuildRejecter = rejecter;\n        });\n\n        this.addSplatSceneDownloadPromise(splatSceneDownloadPromise);\n        this.setSplatSceneDownloadAndBuildPromise(splatSceneDownloadAndBuildPromise);\n\n        splatSceneDownloadPromise.then(() => {\n            this.removeSplatSceneDownloadPromise(splatSceneDownloadPromise);\n        })\n        .catch((e) => {\n            this.clearSplatSceneDownloadAndBuildPromise();\n            this.removeSplatSceneDownloadPromise(splatSceneDownloadPromise);\n            if (!(e instanceof AbortedPromiseError)) {\n                splatSceneDownloadAndBuildRejecter(e);\n                if (firstStreamedSectionDownloadAndBuildRejecter) firstStreamedSectionDownloadAndBuildRejecter(e);\n                if (onDownloadException) onDownloadException(e);\n            }\n        });\n\n        return firstStreamedSectionBuildPromise;\n    }\n\n    /**\n     * Add multiple splat scenes to the viewer and display any loading UI if appropriate.\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\n     *\n     *         path: Path to splat scene to be loaded\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\n     * @param {function} onProgress Function to be called as file data are received\n     * @return {AbortablePromise}\n     */\n    addSplatScenes(sceneOptions, showLoadingUI = true, onProgress = undefined) {\n\n        if (this.isLoadingOrUnloading()) {\n            throw new Error('Cannot add splat scene while another load or unload is already in progress.');\n        }\n\n        if (this.isDisposingOrDisposed()) {\n            throw new Error('Cannot add splat scene after dispose() is called.');\n        }\n\n        const fileCount = sceneOptions.length;\n        const percentComplete = [];\n        if (showLoadingUI) {\n            this.loadingSpinner.removeAllTasks();\n            this.loadingSpinner.show();\n        }\n        const onLoadProgress = (fileIndex, percent, percentLabel) => {\n            percentComplete[fileIndex] = percent;\n            let totalPercent = 0;\n            for (let i = 0; i < fileCount; i++) totalPercent += percentComplete[i] || 0;\n            totalPercent = totalPercent / fileCount;\n            percentLabel = `${totalPercent.toFixed(2)}%`;\n            if (showLoadingUI) {\n                this.loadingSpinner.setMessage(totalPercent == 100 ? `Download complete!` : `Downloading: ${percentLabel}`);\n            }\n            if (onProgress) onProgress(totalPercent, percentLabel, LoaderStatus.Downloading);\n        };\n\n        const downloadPromises = [];\n        const nativeLoadPromises = [];\n        const abortHandlers = [];\n        for (let i = 0; i < sceneOptions.length; i++) {\n            const options = sceneOptions[i];\n            const format = (options.format !== undefined && options.format !== null) ? options.format : sceneFormatFromPath(options.path);\n            const downloadPromise = this.downloadSplatSceneToSplatBuffer(options.path, options.splatAlphaRemovalThreshold,\n                                                                         onLoadProgress.bind(this, i), false, undefined, format);\n            abortHandlers.push(downloadPromise.abortHandler);\n            downloadPromises.push(downloadPromise);\n            nativeLoadPromises.push(downloadPromise.promise);\n            this.addSplatSceneDownloadPromise(downloadPromise);\n        }\n\n        const downloadPromise = new AbortablePromise((resolve, reject) => {\n            Promise.all(nativeLoadPromises)\n            .then((splatBuffers) => {\n                if (showLoadingUI) this.loadingSpinner.hide();\n                if (onProgress) options.onProgress(0, '0%', LoaderStatus.Processing);\n                this.addSplatBuffers(splatBuffers, sceneOptions, true, showLoadingUI, showLoadingUI).then(() => {\n                    if (onProgress) onProgress(100, '100%', LoaderStatus.Processing);\n                    this.clearSplatSceneDownloadAndBuildPromise();\n                    resolve();\n                });\n            })\n            .catch((e) => {\n                if (showLoadingUI) this.loadingSpinner.hide();\n                this.clearSplatSceneDownloadAndBuildPromise();\n                if (!(e instanceof AbortedPromiseError)) {\n                    reject(new Error(`Viewer::addSplatScenes -> Could not load one or more splat scenes.`));\n                } else {\n                    resolve();\n                }\n            })\n            .finally(() => {\n                for (let downloadPromise of downloadPromises) {\n                    this.removeSplatSceneDownloadPromise(downloadPromise);\n                }\n            });\n        }, () => {\n            for (let abortHandler of abortHandlers) abortHandler();\n        });\n        this.setSplatSceneDownloadAndBuildPromise(downloadPromise);\n        return downloadPromise;\n    }\n\n    /**\n     * Download a splat scene and convert to SplatBuffer instance.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified\n     *                                            value (valid range: 0 - 255), defaults to 1\n     *\n     * @param {function} onProgress Function to be called as file data are received\n     * @param {boolean} streamBuiltSections Construct file sections into splat buffers as they are downloaded\n     * @param {function} onSectionBuilt Function to be called when new section is added to the file\n     * @param {string} format File format of the scene\n     * @return {AbortablePromise}\n     */\n    downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold = 1, onProgress = undefined,\n                                    streamBuiltSections = false, onSectionBuilt = undefined, format) {\n        if (format === SceneFormat.Splat) {\n            return SplatLoader.loadFromURL(path, onProgress, streamBuiltSections, onSectionBuilt, splatAlphaRemovalThreshold, 0, false);\n        } else if (format === SceneFormat.KSplat) {\n            return KSplatLoader.loadFromURL(path, onProgress, streamBuiltSections, onSectionBuilt);\n        } else if (format === SceneFormat.Ply) {\n            return PlyLoader.loadFromURL(path, onProgress, streamBuiltSections, onSectionBuilt, splatAlphaRemovalThreshold, 0);\n        }\n        return AbortablePromise.reject(new Error(`Viewer::downloadSplatSceneToSplatBuffer -> File format not supported: ${path}`));\n    }\n\n    static isStreamable(format) {\n        return format === SceneFormat.Splat || format === SceneFormat.KSplat || format === SceneFormat.Ply;\n    }\n\n    /**\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer and set up the sorting web worker.\n     * This function will terminate the existing sort worker (if there is one).\n     */\n    addSplatBuffers = function() {\n\n        return function(splatBuffers, splatBufferOptions = [], finalBuild = true,\n                        showLoadingUI = true, showLoadingUIForSplatTreeBuild = true) {\n\n            if (this.isDisposingOrDisposed()) return Promise.resolve();\n\n            this.splatRenderReady = false;\n            let splatProcessingTaskId = null;\n\n            const finish = (buildResults) => {\n                if (this.isDisposingOrDisposed()) return;\n\n                if (splatProcessingTaskId !== null) {\n                    this.loadingSpinner.removeTask(splatProcessingTaskId);\n                    splatProcessingTaskId = null;\n                }\n\n                // If we aren't calculating the splat distances from the center on the GPU, the sorting worker needs splat centers and\n                // transform indexes so that it can calculate those distance values.\n                if (!this.gpuAcceleratedSort && this.sortWorker) {\n                    this.sortWorker.postMessage({\n                        'centers': buildResults.centers.buffer,\n                        'transformIndexes': buildResults.sceneIndexes.buffer,\n                        'range': {\n                            'from': buildResults.from,\n                            'to': buildResults.to,\n                            'count': buildResults.count\n                        }\n                    });\n                }\n\n                this.splatRenderReady = true;\n                this.sortNeededForSceneChange = true;\n            };\n\n            return new Promise((resolve) => {\n                if (showLoadingUI) {\n                    splatProcessingTaskId = this.loadingSpinner.addTask('Processing splats...');\n                }\n                delayedExecute(() => {\n                    if (this.isDisposingOrDisposed()) {\n                        resolve();\n                    } else {\n                        const buildResults = this.addSplatBuffersToMesh(splatBuffers, splatBufferOptions,\n                                                                        finalBuild, showLoadingUIForSplatTreeBuild);\n                        const maxSplatCount = this.splatMesh.getMaxSplatCount();\n                        if (this.sortWorker && this.sortWorker.maxSplatCount !== maxSplatCount) this.disposeSortWorker();\n                        const sortWorkerSetupPromise = (!this.sortWorker && maxSplatCount > 0) ?\n                                                         this.setupSortWorker(this.splatMesh) : Promise.resolve();\n                        sortWorkerSetupPromise.then(() => {\n                            finish(buildResults);\n                            resolve();\n                        });\n                    }\n                }, true);\n            });\n        };\n\n    }();\n\n    /**\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer. This function is additive; all splat\n     * buffers contained by the viewer's splat mesh before calling this function will be preserved.\n     * @param {Array<SplatBuffer>} splatBuffers SplatBuffer instances\n     * @param {Array<object>} splatBufferOptions Array of options objects: {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\n     * @param {boolean} showLoadingUIForSplatTreeBuild Whether or not to show the loading spinner during construction of the splat tree.\n     * @return {object} Object containing info about the splats that are updated\n     */\n    addSplatBuffersToMesh(splatBuffers, splatBufferOptions, finalBuild = true, showLoadingUIForSplatTreeBuild = false) {\n        if (this.isDisposingOrDisposed()) return;\n        const allSplatBuffers = this.splatMesh.splatBuffers || [];\n        const allSplatBufferOptions = this.splatMesh.splatBufferOptions || [];\n        allSplatBuffers.push(...splatBuffers);\n        allSplatBufferOptions.push(...splatBufferOptions);\n        if (this.renderer) this.splatMesh.setRenderer(this.renderer);\n        let splatOptimizingTaskId;\n        const onSplatTreeIndexesUpload = (finished) => {\n            if (this.isDisposingOrDisposed()) return;\n            const splatCount = this.splatMesh.getSplatCount();\n            if (showLoadingUIForSplatTreeBuild && splatCount >= MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER) {\n                if (!finished && !splatOptimizingTaskId) {\n                    this.loadingSpinner.setMinimized(true, true);\n                    splatOptimizingTaskId = this.loadingSpinner.addTask('Optimizing splats...');\n                }\n            }\n        };\n        const onSplatTreeReady = (finished) => {\n            if (this.isDisposingOrDisposed()) return;\n            if (finished && splatOptimizingTaskId) {\n                this.loadingSpinner.removeTask(splatOptimizingTaskId);\n            }\n        };\n        return this.splatMesh.build(allSplatBuffers, allSplatBufferOptions, true, finalBuild, onSplatTreeIndexesUpload, onSplatTreeReady);\n    }\n\n    /**\n     * Set up the splat sorting web worker.\n     * @param {SplatMesh} splatMesh SplatMesh instance that contains the splats to be sorted\n     * @return {Promise}\n     */\n    setupSortWorker(splatMesh) {\n        if (this.isDisposingOrDisposed()) return;\n        return new Promise((resolve) => {\n            const DistancesArrayType = this.integerBasedSort ? Int32Array : Float32Array;\n            const splatCount = splatMesh.getSplatCount();\n            const maxSplatCount = splatMesh.getMaxSplatCount();\n            this.sortWorker = createSortWorker(maxSplatCount, this.sharedMemoryForWorkers,\n                                               this.integerBasedSort, this.splatMesh.dynamicMode);\n            let sortCount = 0;\n            this.sortWorker.onmessage = (e) => {\n                if (e.data.sortDone) {\n                    this.sortRunning = false;\n                    if (this.sharedMemoryForWorkers) {\n                        this.splatMesh.updateRenderIndexes(this.sortWorkerSortedIndexes, e.data.splatRenderCount);\n                    } else {\n                        const sortedIndexes = new Uint32Array(e.data.sortedIndexes.buffer, 0, e.data.splatRenderCount);\n                        this.splatMesh.updateRenderIndexes(sortedIndexes, e.data.splatRenderCount);\n                    }\n                    this.lastSortTime = e.data.sortTime;\n                    this.sortPromiseResolver();\n                    this.sortPromiseResolver = null;\n                    this.forceRenderNextFrame();\n                    if (sortCount === 0) {\n                        this.runAfterFirstSort.forEach((func) => {\n                            func();\n                        });\n                        this.runAfterFirstSort.length = 0;\n                    }\n                    sortCount++;\n                } else if (e.data.sortCanceled) {\n                    this.sortRunning = false;\n                } else if (e.data.sortSetupPhase1Complete) {\n                    if (this.logLevel >= LogLevel.Info) console.log('Sorting web worker WASM setup complete.');\n                    if (this.sharedMemoryForWorkers) {\n                        this.sortWorkerSortedIndexes = new Uint32Array(e.data.sortedIndexesBuffer,\n                                                                       e.data.sortedIndexesOffset, maxSplatCount);\n                        this.sortWorkerIndexesToSort = new Uint32Array(e.data.indexesToSortBuffer,\n                                                                       e.data.indexesToSortOffset, maxSplatCount);\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(e.data.precomputedDistancesBuffer,\n                                                                                     e.data.precomputedDistancesOffset,\n                                                                                     maxSplatCount);\n                         this.sortWorkerTransforms = new Float32Array(e.data.transformsBuffer,\n                                                                      e.data.transformsOffset, Constants.MaxScenes * 16);\n                    } else {\n                        this.sortWorkerIndexesToSort = new Uint32Array(maxSplatCount);\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(maxSplatCount);\n                        this.sortWorkerTransforms = new Float32Array(Constants.MaxScenes * 16);\n                    }\n                    for (let i = 0; i < splatCount; i++) this.sortWorkerIndexesToSort[i] = i;\n                    this.sortWorker.maxSplatCount = maxSplatCount;\n\n                    if (this.logLevel >= LogLevel.Info) {\n                        console.log('Sorting web worker ready.');\n                        const splatDataTextures = this.splatMesh.getSplatDataTextures();\n                        const covariancesTextureSize = splatDataTextures.covariances.size;\n                        const centersColorsTextureSize = splatDataTextures.centerColors.size;\n                        console.log('Covariances texture size: ' + covariancesTextureSize.x + ' x ' + covariancesTextureSize.y);\n                        console.log('Centers/colors texture size: ' + centersColorsTextureSize.x + ' x ' + centersColorsTextureSize.y);\n                    }\n\n                    resolve();\n                }\n            };\n        });\n    }\n\n    disposeSortWorker() {\n        if (this.sortWorker) this.sortWorker.terminate();\n        this.sortWorker = null;\n        this.sortPromise = null;\n        if (this.sortPromiseResolver) {\n            this.sortPromiseResolver();\n            this.sortPromiseResolver = null;\n        }\n        this.sortRunning = false;\n    }\n\n    removeSplatScene(index, showLoadingUI = true) {\n        if (this.isLoadingOrUnloading()) {\n            throw new Error('Cannot remove splat scene while another load or unload is already in progress.');\n        }\n\n        if (this.isDisposingOrDisposed()) {\n            throw new Error('Cannot remove splat scene after dispose() is called.');\n        }\n\n        let sortPromise;\n\n        this.splatSceneRemovalPromise = new Promise((resolve, reject) => {\n            let revmovalTaskId;\n\n            if (showLoadingUI) {\n                this.loadingSpinner.removeAllTasks();\n                this.loadingSpinner.show();\n                revmovalTaskId = this.loadingSpinner.addTask('Removing splat scene...');\n            }\n\n            const checkAndHideLoadingUI = () => {\n                if (showLoadingUI) {\n                    this.loadingSpinner.hide();\n                    this.loadingSpinner.removeTask(revmovalTaskId);\n                }\n            };\n\n            const onDone = (error) => {\n                checkAndHideLoadingUI();\n                this.splatSceneRemovalPromise = null;\n                if (!error) resolve();\n                else reject(error);\n            };\n\n            const checkForEarlyExit = () => {\n                if (this.isDisposingOrDisposed()) {\n                    onDone();\n                    return true;\n                }\n                return false;\n            };\n\n            sortPromise = this.sortPromise || Promise.resolve();\n            sortPromise.then(() => {\n                if (checkForEarlyExit()) return;\n                const savedSplatBuffers = [];\n                const savedSceneOptions = [];\n                const savedSceneTransformComponents = [];\n                const savedVisibleRegionFadeStartRadius = this.splatMesh.visibleRegionFadeStartRadius;\n                for (let i = 0; i < this.splatMesh.scenes.length; i++) {\n                    if (i !== index) {\n                        const scene = this.splatMesh.scenes[i];\n                        savedSplatBuffers.push(scene.splatBuffer);\n                        savedSceneOptions.push(this.splatMesh.sceneOptions[i]);\n                        savedSceneTransformComponents.push({\n                            'position': scene.position.clone(),\n                            'quaternion': scene.quaternion.clone(),\n                            'scale': scene.scale.clone()\n                        });\n                    }\n                }\n                this.disposeSortWorker();\n                this.splatMesh.dispose();\n                this.createSplatMesh();\n                this.addSplatBuffers(savedSplatBuffers, savedSceneOptions, true, false, true)\n                .then(() => {\n                    if (checkForEarlyExit()) return;\n                    checkAndHideLoadingUI();\n                    this.splatMesh.visibleRegionFadeStartRadius = savedVisibleRegionFadeStartRadius;\n                    this.splatMesh.scenes.forEach((scene, index) => {\n                        scene.position.copy(savedSceneTransformComponents[index].position);\n                        scene.quaternion.copy(savedSceneTransformComponents[index].quaternion);\n                        scene.scale.copy(savedSceneTransformComponents[index].scale);\n                    });\n                    this.splatMesh.updateTransforms();\n                    this.splatRenderReady = false;\n                    this.updateSplatSort(true)\n                    .then(() => {\n                        if (checkForEarlyExit()) {\n                            this.splatRenderReady = true;\n                            return;\n                        }\n                        sortPromise = this.sortPromise || Promise.resolve();\n                        sortPromise.then(() => {\n                            this.splatRenderReady = true;\n                            onDone();\n                        });\n                    });\n                })\n                .catch((e) => {\n                    onDone(e);\n                });\n            });\n        });\n\n        return this.splatSceneRemovalPromise;\n    }\n\n    /**\n     * Start self-driven mode\n     */\n    start() {\n        if (this.selfDrivenMode) {\n            if (this.webXRMode) {\n                this.renderer.setAnimationLoop(this.selfDrivenUpdateFunc);\n            } else {\n                this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\n            }\n            this.selfDrivenModeRunning = true;\n        } else {\n            throw new Error('Cannot start viewer unless it is in self driven mode.');\n        }\n    }\n\n    /**\n     * Stop self-driven mode\n     */\n    stop() {\n        if (this.selfDrivenMode && this.selfDrivenModeRunning) {\n            if (!this.webXRMode) {\n                cancelAnimationFrame(this.requestFrameId);\n            }\n            this.selfDrivenModeRunning = false;\n        }\n    }\n\n    /**\n     * Dispose of all resources held directly and indirectly by this viewer.\n     */\n    async dispose() {\n        this.disposing = true;\n        let waitPromises = [];\n        let promisesToAbort = [];\n        for (let promiseKey in this.splatSceneDownloadPromises) {\n            if (this.splatSceneDownloadPromises.hasOwnProperty(promiseKey)) {\n                const downloadPromiseToAbort = this.splatSceneDownloadPromises[promiseKey];\n                promisesToAbort.push(downloadPromiseToAbort);\n                waitPromises.push(downloadPromiseToAbort.promise);\n            }\n        }\n        if (this.sortPromise) {\n            waitPromises.push(this.sortPromise);\n        }\n        const disposePromise = Promise.all(waitPromises).finally(() => {\n            this.stop();\n            if (this.controls) {\n                this.controls.dispose();\n                this.controls = null;\n            }\n            if (this.splatMesh) {\n                this.splatMesh.dispose();\n                this.splatMesh = null;\n            }\n            if (this.sceneHelper) {\n                this.sceneHelper.dispose();\n                this.sceneHelper = null;\n            }\n            if (this.resizeObserver) {\n                this.resizeObserver.unobserve(this.rootElement);\n                this.resizeObserver = null;\n            }\n            this.disposeSortWorker();\n            this.removeEventHandlers();\n\n            this.loadingSpinner.removeAllTasks();\n            this.loadingSpinner.setContainer(null);\n            this.loadingProgressBar.hide();\n            this.loadingProgressBar.setContainer(null);\n            this.infoPanel.setContainer(null);\n\n            this.camera = null;\n            this.threeScene = null;\n            this.splatRenderReady = false;\n            this.initialized = false;\n            if (this.renderer) {\n                if (!this.usingExternalRenderer) {\n                    this.rootElement.removeChild(this.renderer.domElement);\n                    this.renderer.dispose();\n                }\n                this.renderer = null;\n            }\n\n            if (!this.usingExternalRenderer) {\n                document.body.removeChild(this.rootElement);\n            }\n\n            this.sortWorkerSortedIndexes = null;\n            this.sortWorkerIndexesToSort = null;\n            this.sortWorkerPrecomputedDistances = null;\n            this.sortWorkerTransforms = null;\n            this.disposed = true;\n            this.disposing = false;\n        });\n        promisesToAbort.forEach((toAbort) => {\n            toAbort.abort();\n        });\n        return disposePromise;\n    }\n\n    selfDrivenUpdate() {\n        if (this.selfDrivenMode && !this.webXRMode) {\n            this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\n        }\n        this.update();\n        if (this.shouldRender()) {\n            this.render();\n            this.consecutiveRenderFrames++;\n        } else {\n            this.consecutiveRenderFrames = 0;\n        }\n        this.renderNextFrame = false;\n    }\n\n    forceRenderNextFrame() {\n        this.renderNextFrame = true;\n    }\n\n    shouldRender = function() {\n\n        let renderCount = 0;\n        const lastCameraPosition = new THREE.Vector3();\n        const lastCameraOrientation = new THREE.Quaternion();\n        const changeEpsilon = 0.0001;\n\n        return function() {\n            let shouldRender = false;\n            let cameraChanged = false;\n            if (this.camera) {\n                const cp = this.camera.position;\n                const co = this.camera.quaternion;\n                cameraChanged = Math.abs(cp.x - lastCameraPosition.x) > changeEpsilon ||\n                                Math.abs(cp.y - lastCameraPosition.y) > changeEpsilon ||\n                                Math.abs(cp.z - lastCameraPosition.z) > changeEpsilon ||\n                                Math.abs(co.x - lastCameraOrientation.x) > changeEpsilon ||\n                                Math.abs(co.y - lastCameraOrientation.y) > changeEpsilon ||\n                                Math.abs(co.z - lastCameraOrientation.z) > changeEpsilon ||\n                                Math.abs(co.w - lastCameraOrientation.w) > changeEpsilon;\n            }\n\n            shouldRender = this.renderMode !== RenderMode.Never && (renderCount === 0 || this.splatMesh.visibleRegionChanging ||\n                           cameraChanged || this.renderMode === RenderMode.Always || this.dynamicMode === true || this.renderNextFrame);\n\n            if (this.camera) {\n                lastCameraPosition.copy(this.camera.position);\n                lastCameraOrientation.copy(this.camera.quaternion);\n            }\n\n            renderCount++;\n            return shouldRender;\n        };\n\n    }();\n\n    render = function() {\n\n        return function() {\n            if (!this.initialized || !this.splatRenderReady) return;\n\n            const hasRenderables = (threeScene) => {\n                for (let child of threeScene.children) {\n                    if (child.visible) return true;\n                }\n                return false;\n            };\n\n            const savedAuoClear = this.renderer.autoClear;\n            if (hasRenderables(this.threeScene)) {\n                this.renderer.render(this.threeScene, this.camera);\n                this.renderer.autoClear = false;\n            }\n            this.renderer.render(this.splatMesh, this.camera);\n            this.renderer.autoClear = false;\n            if (this.sceneHelper.getFocusMarkerOpacity() > 0.0) this.renderer.render(this.sceneHelper.focusMarker, this.camera);\n            if (this.showControlPlane) this.renderer.render(this.sceneHelper.controlPlane, this.camera);\n            this.renderer.autoClear = savedAuoClear;\n        };\n\n    }();\n\n    update(renderer, camera) {\n        if (this.dropInMode) this.updateForDropInMode(renderer, camera);\n        if (!this.initialized || !this.splatRenderReady) return;\n        if (this.controls) {\n            this.controls.update();\n            if (this.camera.isOrthographicCamera && !this.usingExternalCamera) {\n                Viewer.setCameraPositionFromZoom(this.camera, this.camera, this.controls);\n            }\n        }\n        this.splatMesh.updateVisibleRegionFadeDistance(this.sceneRevealMode);\n        this.updateSplatSort();\n        this.updateForRendererSizeChanges();\n        this.updateSplatMesh();\n        this.updateMeshCursor();\n        this.updateFPS();\n        this.timingSensitiveUpdates();\n        this.updateInfoPanel();\n        this.updateControlPlane();\n    }\n\n    updateForDropInMode(renderer, camera) {\n        this.renderer = renderer;\n        if (this.splatMesh) this.splatMesh.setRenderer(this.renderer);\n        this.camera = camera;\n        if (this.controls) this.controls.object = camera;\n        this.init();\n    }\n\n    updateFPS = function() {\n\n        let lastCalcTime = getCurrentTime();\n        let frameCount = 0;\n\n        return function() {\n            if (this.consecutiveRenderFrames > CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION) {\n                const currentTime = getCurrentTime();\n                const calcDelta = currentTime - lastCalcTime;\n                if (calcDelta >= 1.0) {\n                    this.currentFPS = frameCount;\n                    frameCount = 0;\n                    lastCalcTime = currentTime;\n                } else {\n                    frameCount++;\n                }\n            } else {\n                this.currentFPS = null;\n            }\n        };\n\n    }();\n\n    updateForRendererSizeChanges = function() {\n\n        const lastRendererSize = new THREE.Vector2();\n        const currentRendererSize = new THREE.Vector2();\n        let lastCameraOrthographic;\n\n        return function() {\n            if (!this.usingExternalCamera) {\n                this.renderer.getSize(currentRendererSize);\n                if (lastCameraOrthographic === undefined || lastCameraOrthographic !== this.camera.isOrthographicCamera ||\n                    currentRendererSize.x !== lastRendererSize.x || currentRendererSize.y !== lastRendererSize.y) {\n                    if (this.camera.isOrthographicCamera) {\n                        this.camera.left = -currentRendererSize.x / 2.0;\n                        this.camera.right = currentRendererSize.x / 2.0;\n                        this.camera.top = currentRendererSize.y / 2.0;\n                        this.camera.bottom = -currentRendererSize.y / 2.0;\n                    } else {\n                        this.camera.aspect = currentRendererSize.x / currentRendererSize.y;\n                    }\n                    this.camera.updateProjectionMatrix();\n                    lastRendererSize.copy(currentRendererSize);\n                    lastCameraOrthographic = this.camera.isOrthographicCamera;\n                }\n            }\n        };\n\n    }();\n\n    timingSensitiveUpdates = function() {\n\n        let lastUpdateTime;\n\n        return function() {\n            const currentTime = getCurrentTime();\n            if (!lastUpdateTime) lastUpdateTime = currentTime;\n            const timeDelta = currentTime - lastUpdateTime;\n\n            this.updateCameraTransition(currentTime);\n            this.updateFocusMarker(timeDelta);\n\n            lastUpdateTime = currentTime;\n        };\n\n    }();\n\n    updateCameraTransition = function() {\n\n        let tempCameraTarget = new THREE.Vector3();\n        let toPreviousTarget = new THREE.Vector3();\n        let toNextTarget = new THREE.Vector3();\n\n        return function(currentTime) {\n            if (this.transitioningCameraTarget) {\n                toPreviousTarget.copy(this.previousCameraTarget).sub(this.camera.position).normalize();\n                toNextTarget.copy(this.nextCameraTarget).sub(this.camera.position).normalize();\n                const rotationAngle = Math.acos(toPreviousTarget.dot(toNextTarget));\n                const rotationSpeed = rotationAngle / (Math.PI / 3) * .65 + .3;\n                const t = (rotationSpeed / rotationAngle * (currentTime - this.transitioningCameraTargetStartTime));\n                tempCameraTarget.copy(this.previousCameraTarget).lerp(this.nextCameraTarget, t);\n                this.camera.lookAt(tempCameraTarget);\n                this.controls.target.copy(tempCameraTarget);\n                if (t >= 1.0) {\n                    this.transitioningCameraTarget = false;\n                }\n            }\n        };\n\n    }();\n\n    updateFocusMarker = function() {\n\n        const renderDimensions = new THREE.Vector2();\n        let wasTransitioning = false;\n\n        return function(timeDelta) {\n            this.getRenderDimensions(renderDimensions);\n            if (this.transitioningCameraTarget) {\n                this.sceneHelper.setFocusMarkerVisibility(true);\n                const currentFocusMarkerOpacity = Math.max(this.sceneHelper.getFocusMarkerOpacity(), 0.0);\n                let newFocusMarkerOpacity = Math.min(currentFocusMarkerOpacity + FOCUS_MARKER_FADE_IN_SPEED * timeDelta, 1.0);\n                this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n                this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\n                wasTransitioning = true;\n                this.forceRenderNextFrame();\n            } else {\n                let currentFocusMarkerOpacity;\n                if (wasTransitioning) currentFocusMarkerOpacity = 1.0;\n                else currentFocusMarkerOpacity = Math.min(this.sceneHelper.getFocusMarkerOpacity(), 1.0);\n                if (currentFocusMarkerOpacity > 0) {\n                    this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\n                    let newFocusMarkerOpacity = Math.max(currentFocusMarkerOpacity - FOCUS_MARKER_FADE_OUT_SPEED * timeDelta, 0.0);\n                    this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n                    if (newFocusMarkerOpacity === 0.0) this.sceneHelper.setFocusMarkerVisibility(false);\n                }\n                if (currentFocusMarkerOpacity > 0.0) this.forceRenderNextFrame();\n                wasTransitioning = false;\n            }\n        };\n\n    }();\n\n    updateMeshCursor = function() {\n\n        const outHits = [];\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (this.showMeshCursor) {\n                this.forceRenderNextFrame();\n                this.getRenderDimensions(renderDimensions);\n                outHits.length = 0;\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n                if (outHits.length > 0) {\n                    this.sceneHelper.setMeshCursorVisibility(true);\n                    this.sceneHelper.positionAndOrientMeshCursor(outHits[0].origin, this.camera);\n                } else {\n                    this.sceneHelper.setMeshCursorVisibility(false);\n                }\n            } else {\n                if (this.sceneHelper.getMeschCursorVisibility()) this.forceRenderNextFrame();\n                this.sceneHelper.setMeshCursorVisibility(false);\n            }\n        };\n\n    }();\n\n    updateInfoPanel = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (!this.showInfo) return;\n            const splatCount = this.splatMesh.getSplatCount();\n            this.getRenderDimensions(renderDimensions);\n            const cameraLookAtPosition = this.controls ? this.controls.target : null;\n            const meshCursorPosition = this.showMeshCursor ? this.sceneHelper.meshCursor.position : null;\n            const splatRenderCountPct = splatCount > 0 ? this.splatRenderCount / splatCount * 100 : 0;\n            this.infoPanel.update(renderDimensions, this.camera.position, cameraLookAtPosition,\n                                  this.camera.up, this.camera.isOrthographicCamera, meshCursorPosition,\n                                  this.currentFPS || 'N/A', splatCount, this.splatRenderCount, splatRenderCountPct,\n                                  this.lastSortTime, this.focalAdjustment, this.splatMesh.getSplatScale(),\n                                  this.splatMesh.getPointCloudModeEnabled());\n        };\n\n    }();\n\n    updateControlPlane() {\n        if (this.showControlPlane) {\n            this.sceneHelper.setControlPlaneVisibility(true);\n            this.sceneHelper.positionAndOrientControlPlane(this.controls.target, this.camera.up);\n        } else {\n            this.sceneHelper.setControlPlaneVisibility(false);\n        }\n    }\n\n    updateSplatSort = function() {\n\n        const mvpMatrix = new THREE.Matrix4();\n        const cameraPositionArray = [];\n        const lastSortViewDir = new THREE.Vector3(0, 0, -1);\n        const sortViewDir = new THREE.Vector3(0, 0, -1);\n        const lastSortViewPos = new THREE.Vector3();\n        const sortViewOffset = new THREE.Vector3();\n        const queuedSorts = [];\n\n        const partialSorts = [\n            {\n                'angleThreshold': 0.55,\n                'sortFractions': [0.125, 0.33333, 0.75]\n            },\n            {\n                'angleThreshold': 0.65,\n                'sortFractions': [0.33333, 0.66667]\n            },\n            {\n                'angleThreshold': 0.8,\n                'sortFractions': [0.5]\n            }\n        ];\n\n        return async function(force = false) {\n            if (this.sortRunning) return;\n            if (this.splatMesh.getSplatCount() <= 0) return;\n\n            let angleDiff = 0;\n            let positionDiff = 0;\n            let needsRefreshForRotation = false;\n            let needsRefreshForPosition = false;\n\n            sortViewDir.set(0, 0, -1).applyQuaternion(this.camera.quaternion);\n            angleDiff = sortViewDir.dot(lastSortViewDir);\n            positionDiff = sortViewOffset.copy(this.camera.position).sub(lastSortViewPos).length();\n\n            if (!force) {\n                if (!this.sortNeededForSceneChange && !this.splatMesh.dynamicMode && queuedSorts.length === 0) {\n                    if (angleDiff <= 0.99) needsRefreshForRotation = true;\n                    if (positionDiff >= 1.0) needsRefreshForPosition = true;\n                    if (!needsRefreshForRotation && !needsRefreshForPosition) return;\n                }\n            }\n\n            this.sortRunning = true;\n            const { splatRenderCount, shouldSortAll } = this.gatherSceneNodesForSort();\n            this.splatRenderCount = splatRenderCount;\n\n            mvpMatrix.copy(this.camera.matrixWorld).invert();\n            const mvpCamera = this.perspectiveCamera || this.camera;\n            mvpMatrix.premultiply(mvpCamera.projectionMatrix);\n            mvpMatrix.multiply(this.splatMesh.matrixWorld);\n\n            if (this.gpuAcceleratedSort && (queuedSorts.length <= 1 || queuedSorts.length % 2 === 0)) {\n                await this.splatMesh.computeDistancesOnGPU(mvpMatrix, this.sortWorkerPrecomputedDistances);\n            }\n\n            if (this.splatMesh.dynamicMode || shouldSortAll) {\n                queuedSorts.push(this.splatRenderCount);\n            } else {\n                if (queuedSorts.length === 0) {\n                    for (let partialSort of partialSorts) {\n                        if (angleDiff < partialSort.angleThreshold) {\n                            for (let sortFraction of partialSort.sortFractions) {\n                                queuedSorts.push(Math.floor(this.splatRenderCount * sortFraction));\n                            }\n                            break;\n                        }\n                    }\n                    queuedSorts.push(this.splatRenderCount);\n                }\n            }\n            let sortCount = Math.min(queuedSorts.shift(), this.splatRenderCount);\n\n            cameraPositionArray[0] = this.camera.position.x;\n            cameraPositionArray[1] = this.camera.position.y;\n            cameraPositionArray[2] = this.camera.position.z;\n\n            const sortMessage = {\n                'modelViewProj': mvpMatrix.elements,\n                'cameraPosition': cameraPositionArray,\n                'splatRenderCount': this.splatRenderCount,\n                'splatSortCount': sortCount,\n                'usePrecomputedDistances': this.gpuAcceleratedSort\n            };\n            if (this.splatMesh.dynamicMode) {\n                this.splatMesh.fillTransformsArray(this.sortWorkerTransforms);\n            }\n            if (!this.sharedMemoryForWorkers) {\n                sortMessage.indexesToSort = this.sortWorkerIndexesToSort;\n                sortMessage.transforms = this.sortWorkerTransforms;\n                if (this.gpuAcceleratedSort) {\n                    sortMessage.precomputedDistances = this.sortWorkerPrecomputedDistances;\n                }\n            }\n\n            this.sortPromise = new Promise((resolve) => {\n                this.sortPromiseResolver = resolve;\n            });\n\n            this.sortWorker.postMessage({\n                'sort': sortMessage\n            });\n\n            if (queuedSorts.length === 0) {\n                lastSortViewPos.copy(this.camera.position);\n                lastSortViewDir.copy(sortViewDir);\n            }\n\n            this.sortNeededForSceneChange = false;\n        };\n\n    }();\n\n    /**\n     * Determine which splats to render by checking which are inside or close to the view frustum\n     */\n    gatherSceneNodesForSort = function() {\n\n        const nodeRenderList = [];\n        let allSplatsSortBuffer = null;\n        const tempVectorYZ = new THREE.Vector3();\n        const tempVectorXZ = new THREE.Vector3();\n        const tempVector = new THREE.Vector3();\n        const modelView = new THREE.Matrix4();\n        const baseModelView = new THREE.Matrix4();\n        const sceneTransform = new THREE.Matrix4();\n        const renderDimensions = new THREE.Vector3();\n        const forward = new THREE.Vector3(0, 0, -1);\n\n        const tempMax = new THREE.Vector3();\n        const nodeSize = (node) => {\n            return tempMax.copy(node.max).sub(node.min).length();\n        };\n\n        return function(gatherAllNodes = false) {\n\n            this.getRenderDimensions(renderDimensions);\n            const cameraFocalLength = (renderDimensions.y / 2.0) / Math.tan(this.camera.fov / 2.0 * THREE.MathUtils.DEG2RAD);\n            const fovXOver2 = Math.atan(renderDimensions.x / 2.0 / cameraFocalLength);\n            const fovYOver2 = Math.atan(renderDimensions.y / 2.0 / cameraFocalLength);\n            const cosFovXOver2 = Math.cos(fovXOver2);\n            const cosFovYOver2 = Math.cos(fovYOver2);\n\n            const splatTree = this.splatMesh.getSplatTree();\n\n            if (splatTree) {\n                baseModelView.copy(this.camera.matrixWorld).invert();\n                baseModelView.multiply(this.splatMesh.matrixWorld);\n\n                let nodeRenderCount = 0;\n                let splatRenderCount = 0;\n\n                for (let s = 0; s < splatTree.subTrees.length; s++) {\n                    const subTree = splatTree.subTrees[s];\n                    modelView.copy(baseModelView);\n                    if (this.splatMesh.dynamicMode) {\n                        this.splatMesh.getSceneTransform(s, sceneTransform);\n                        modelView.multiply(sceneTransform);\n                    }\n                    const nodeCount = subTree.nodesWithIndexes.length;\n                    for (let i = 0; i < nodeCount; i++) {\n                        const node = subTree.nodesWithIndexes[i];\n                        if (!node.data || !node.data.indexes || node.data.indexes.length === 0) continue;\n                        tempVector.copy(node.center).applyMatrix4(modelView);\n\n                        const distanceToNode = tempVector.length();\n                        tempVector.normalize();\n\n                        tempVectorYZ.copy(tempVector).setX(0).normalize();\n                        tempVectorXZ.copy(tempVector).setY(0).normalize();\n\n                        const cameraAngleXZDot = forward.dot(tempVectorXZ);\n                        const cameraAngleYZDot = forward.dot(tempVectorYZ);\n\n                        const ns = nodeSize(node);\n                        const outOfFovY = cameraAngleYZDot < (cosFovYOver2 - .6);\n                        const outOfFovX = cameraAngleXZDot < (cosFovXOver2 - .6);\n                        if (!gatherAllNodes && ((outOfFovX || outOfFovY) && distanceToNode > ns)) {\n                            continue;\n                        }\n                        splatRenderCount += node.data.indexes.length;\n                        nodeRenderList[nodeRenderCount] = node;\n                        node.data.distanceToNode = distanceToNode;\n                        nodeRenderCount++;\n                    }\n                }\n\n                nodeRenderList.length = nodeRenderCount;\n                nodeRenderList.sort((a, b) => {\n                    if (a.data.distanceToNode < b.data.distanceToNode) return -1;\n                    else return 1;\n                });\n\n                let currentByteOffset = splatRenderCount * Constants.BytesPerInt;\n                for (let i = 0; i < nodeRenderCount; i++) {\n                    const node = nodeRenderList[i];\n                    const windowSizeInts = node.data.indexes.length;\n                    const windowSizeBytes = windowSizeInts * Constants.BytesPerInt;\n                    let destView = new Uint32Array(this.sortWorkerIndexesToSort.buffer,\n                                                   currentByteOffset - windowSizeBytes, windowSizeInts);\n                    destView.set(node.data.indexes);\n                    currentByteOffset -= windowSizeBytes;\n                }\n\n                return {\n                    'splatRenderCount': splatRenderCount,\n                    'shouldSortAll': false\n                };\n            } else {\n                const totalSplatCount = this.splatMesh.getSplatCount();\n                if (!allSplatsSortBuffer || allSplatsSortBuffer.length !== totalSplatCount) {\n                    allSplatsSortBuffer = new Uint32Array(totalSplatCount);\n                    for (let i = 0; i < totalSplatCount; i++) {\n                        allSplatsSortBuffer[i] = i;\n                    }\n                }\n                this.sortWorkerIndexesToSort.set(allSplatsSortBuffer);\n                return {\n                    'splatRenderCount': totalSplatCount,\n                    'shouldSortAll': true\n                };\n            }\n        };\n\n    }();\n\n    getSplatMesh() {\n        return this.splatMesh;\n    }\n\n    /**\n     * Get a reference to a splat scene.\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\n     * @return {SplatScene}\n     */\n    getSplatScene(sceneIndex) {\n        return this.splatMesh.getScene(sceneIndex);\n    }\n\n    isMobile() {\n        return navigator.userAgent.includes('Mobi');\n    }\n}\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\f\u0006dylink\u0000\u0000\u0000\u0000\u0000\u0001\u001b\u0003`\u0000\u0000`\u0010\u0000`\u0000\u0001\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0004\u0003\u0000\u0001\u0002\u00079\u0003\u0011__wasm_call_ctors\u0000\u0000\u000bsortIndexes\u0000\u0001\u0013emscripten_tls_init\u0000\u0002\n�\u0010\u0003\u0003\u0000\u0001\u000b�\u0010\u0005\u0001|\u0003{\u0002\u0003}\u0002~ \u000b \nk!\f\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0002 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00056\u0002\u0000 \u0005 \u000e \u0005 \u000eH\u001b!\u000e \u0005 \r \u0005 \rJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0002\u000b \u000f\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0002A!\u000f \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0014j(\u0002\u0000\"\u0015A\u0002tj(\u0002\u0000\"\nG\u0004@\u0002~ \u0005�\t\u0002\b \b \nA\u0006tj\"\u000f�\t\u0002\u0000 \u000f*\u0002\u0010� \u0001 \u000f*\u0002 � \u0002 \u000f*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000f�\t\u0002\u0004 \u000f*\u0002\u0014� \u0001 \u000f*\u0002$� \u0002 \u000f*\u00024� \u0003��\u0001��\u0001 \u0005�\t\u0002( \u000f�\t\u0002\b \u000f*\u0002\u0018� \u0001 \u000f*\u0002(� \u0002 \u000f*\u00028� \u0003��\u0001��\u0001 \u0005�\t\u00028 \u000f�\t\u0002\f \u000f*\u0002\u001c� \u0001 \u000f*\u0002,� \u0002 \u000f*\u0002<� \u0003��\u0001��\u0001\"\u0011�\u001f\u0002��\u0014 \u0011�\u001f\u0003��\"\u0001�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@\"\u0012��\u0001\"\u0013�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b!\u0019\u0002~ \u0013�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b�\u0012!\u0013\u0002~ \u0011�\u001f\u0000��\u0014 \u0011�\u001f\u0001��\"\u0001 \u0012��\u0001\"\u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b!\u001a \u0013 \u0019�\u001e\u0001!\u0012\u0002~ \u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b�\u0012 \u001a�\u001e\u0001 \u0012�\r\u0000\u0001\u0002\u0003\b\t\n\u000b\u0010\u0011\u0012\u0013\u0018\u0019\u001a\u001b!\u0012 \n!\u000f\u000b \u0003 \u0014j \u0001 \u0015A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j \u0011�\u001b\u0003j\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0002\u000b\u0002 \u0005*\u0002\u0018�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\n\u0002 \u0005*\u0002\b�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0005A����\u0007!\u000eA����x!\r \u000b \fM\r\u0001 \u0002�\u0011 \n�\u001c\u0001 \u0005�\u001c\u0002!\u0012 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \u000e \u0002 \u000eH\u001b!\u000e \u0002 \r \u0002 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0001\u000b \r\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0001 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j\u0002 \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0001\u000b\u0002@ \u000fE\u0004@ \u000b \fK\r\u0001A����x!\rA����\u0007!\u000e\f\u0002\u000bA����\u0007!\u000eA����x!\r \u000b \fM\r\u0001A!\u000f \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0014j(\u0002\u0000A\u0002t\"\u0015j(\u0002\u0000\"\nG\u0004@ \u0005�\t\u0002\b \b \nA\u0006tj\"\u000f�\t\u0002\u0000 \u000f*\u0002\u0010� \u0001 \u000f*\u0002 � \u0002 \u000f*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000f�\t\u0002\u0004 \u000f*\u0002\u0014� \u0001 \u000f*\u0002$� \u0002 \u000f*\u00024� \u0003��\u0001��\u0001 \u0005�\t\u0002( \u000f�\t\u0002\b \u000f*\u0002\u0018� \u0001 \u000f*\u0002(� \u0002 \u000f*\u00028� \u0003��\u0001��\u0001 \u0005�\t\u00028 \u000f�\t\u0002\f \u000f*\u0002\u001c� \u0001 \u000f*\u0002,� \u0002 \u000f*\u0002<� \u0003��\u0001��\u0001!\u0011 \n!\u000f\u000b \u0003 \u0014j\u0002 \u0011 \u0001 \u0015A\u0002t\"\nj)\u0002\u0000�\u0012��\u0001\"\u0012�\u001f\u0000 \u0012�\u001f\u0001� \u0011 \u0011�\r\b\t\n\u000b\f\r\u000e\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0001 \nA\brj)\u0002\u0000�\u0012��\u0001\"\u0012�\u001f\u0000� \u0012�\u001f\u0001��D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000b \u0005*\u0002(!\u0016 \u0005*\u0002\u0018!\u0017 \u0005*\u0002\b!\u0018A����\u0007!\u000eA����x!\r \f!\u0005\u0003@\u0002 \u0018 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\u0000� \u0017 \u0002*\u0002\u0004�� \u0016 \u0002*\u0002\b���D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\n \u0003 \u0007j \n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \u000e���!\u0016 \f!\r\u0003@\u0002 \u0016 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \u000ek��\"\u0017�C\u0000\u0000\u0000O]\u0004@ \u0017�\f\u0001\u000bA����x\u000b!\n \u0001 \n6\u0002\u0000 \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\u000e\u0003@ \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \u000eA\u0001j\"\u000e \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\u000e\u0003@ \u0006 \u000eA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \u000eA\u0001J!\u0002 \u0001!\u000e \u0002\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\u000e\u0003@ \u0006 \u000b \u0004 \u0003 \u000eA\u0001k\"\u000eA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \f \u000eH\r\u0000\u000b\u000b\u000b\u0004\u0000A\u0000\u000b","import * as THREE from 'three';\nimport { Viewer } from './Viewer.js';\n\n/**\n * DropInViewer: Wrapper for a Viewer instance that enables it to be added to a Three.js scene like\n * any other Three.js scene object (Mesh, Object3D, etc.)\n */\nexport class DropInViewer extends THREE.Group {\n\n    constructor(options = {}) {\n        super();\n\n        options.selfDrivenMode = false;\n        options.useBuiltInControls = false;\n        options.rootElement = null;\n        options.ignoreDevicePixelRatio = false;\n        options.dropInMode = true;\n        options.camera = undefined;\n        options.renderer = undefined;\n\n        this.viewer = new Viewer(options);\n        this.splatMesh = null;\n\n        this.callbackMesh = DropInViewer.createCallbackMesh();\n        this.add(this.callbackMesh);\n        this.callbackMesh.onBeforeRender = DropInViewer.onBeforeRender.bind(this, this.viewer);\n\n    }\n\n    /**\n     * Add a single splat scene to the viewer.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {object} options {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     *         onProgress:                 Function to be called as file data are received\n     *\n     * }\n     * @return {AbortablePromise}\n     */\n    addSplatScene(path, options = {}) {\n        if (options.showLoadingUI !== false) options.showLoadingUI = true;\n        return this.viewer.addSplatScene(path, options);\n    }\n\n    /**\n     * Add multiple splat scenes to the viewer.\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\n     *\n     *         path: Path to splat scene to be loaded\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\n     * @return {AbortablePromise}\n     */\n    addSplatScenes(sceneOptions, showLoadingUI) {\n        if (showLoadingUI !== false) showLoadingUI = true;\n        return this.viewer.addSplatScenes(sceneOptions, showLoadingUI);\n    }\n\n    /**\n     * Get a reference to a splat scene.\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\n     * @return {SplatScene}\n     */\n    getSplatScene(sceneIndex) {\n        return this.viewer.getSplatScene(sceneIndex);\n    }\n\n    removeSplatScene(index) {\n        return this.viewer.removeSplatScene(index);\n    }\n\n    dispose() {\n        return this.viewer.dispose();\n    }\n\n    static onBeforeRender(viewer, renderer, threeScene, camera) {\n        if (this.splatMesh !== this.viewer.splatMesh) {\n            if (this.splatMesh) {\n                this.remove(this.splatMesh);\n            }\n            this.splatMesh = this.viewer.splatMesh;\n            this.add(this.viewer.splatMesh);\n        }\n        viewer.update(renderer, camera);\n    }\n\n    static createCallbackMesh() {\n        const geometry = new THREE.SphereGeometry(1, 8, 8);\n        const material = new THREE.MeshBasicMaterial();\n        material.colorWrite = false;\n        material.depthWrite = false;\n        const mesh = new THREE.Mesh(geometry, material);\n        mesh.frustumCulled = false;\n        return mesh;\n    }\n\n}\n"],"names":["UncompressedSplatArray","static","X","Y","Z","SCALE0","SCALE1","SCALE2","ROTATION0","ROTATION1","ROTATION2","ROTATION3","FDC0","FDC1","FDC2","OPACITY","constructor","this","splats","splatCount","createSplat","addSplat","splat","push","getSplat","index","addDefaultSplat","newSplat","addSplatFromComonents","x","y","z","scale0","scale1","scale2","rot0","rot1","rot2","rot3","r","g","b","opacity","addSplatFromArray","src","srcIndex","srcSplat","AbortablePromise","promiseFunc","abortHandler","promiseResolve","promiseReject","promise","Promise","resolve","reject","bind","args","error","id","idGen","then","onResolve","onResolveResult","args2","catch","onFail","abort","AbortedPromiseError","Error","msg","super","floatView","Float32Array","int32View","Int32Array","buffer","uintEncodedFloat","f","fetchWithProgress","path","onProgress","saveChunks","abortController","AbortController","signal","aborted","rejectFunc","fetch","async","data","reader","body","getReader","bytesDownloaded","_fileSize","headers","get","fileSize","parseInt","undefined","chunks","value","chunk","done","read","Blob","arrayBuffer","percent","percentLabel","length","toFixed","clamp","val","min","max","Math","getCurrentTime","performance","now","disposeAllMeshes","object3D","geometry","dispose","material","children","child","delayedExecute","func","fast","window","setTimeout","SplatBuffer","BytesPerCenter","BytesPerColor","BytesPerScale","BytesPerRotation","BytesPerSplat","ScaleRange","bufferData","secLoadedCountsToMax","constructFromBuffer","fbf","compressionLevel","THREE","DataUtils","fromHalfFloat","getSplatCount","getMaxSplatCount","maxSplatCount","getBucketIndex","section","localSplatIndex","bucketIndex","maxSplatIndexInFullBuckets","fullBucketCount","bucketSize","floor","bucketSplatIndex","partiallyFullBucketIndex","currentPartiallyFilledBucketSize","partiallyFilledBucketLengths","getSplatCenter","globalSplatIndex","outCenter","transform","sectionIndex","globalSplatIndexToSectionMap","sections","splatCountOffset","centerBase","uint16PerSplat","bucketBase","BucketStorageSizeFloats","sf","compressionScaleFactor","sr","compressionScaleRange","dataArrayUint16","bucketArray","float32PerSplat","dataArrayFloat32","applyMatrix4","getSplatScaleAndRotation","scaleMatrix","Matrix4","rotationMatrix","tempMatrix","tempPosition","Vector3","outScale","outRotation","floatsPerSplat","sectionFloatArray","splatFloatBase","scaleBase","SplatScaleOffsetFloat","set","rotationBase","SplatRotationOffsetFloat","makeScale","makeRotationFromQuaternion","copy","multiply","decompose","getSplatColor","outColor","colorBase","bytesPerSplat","bytesPerCenter","bytesPerScale","bytesPerRotation","dataArrayUint8","fillSplatCenterArray","outCenterArray","srcFrom","srcTo","destFrom","center","i","centerDestBase","CenterComponentCount","tempMatrix4","Matrix3","covarianceMatrix","transformedCovariance","transform3x3","transform3x3Transpose","thf","toHalfFloat","scale","rotation","outCovariance","outOffset","desiredOutputCompressionLevel","setFromMatrix4","transpose","premultiply","elements","fillSplatCovarianceArray","covarianceArray","Quaternion","covarianceDestBase","CovarianceComponentCount","computeCovariance","fillSplatColorArray","outColorArray","minimumAlpha","splatColorOffset","colorSrcBase","colorDestBase","ColorComponentCount","alpha","parseHeader","headerArrayUint8","Uint8Array","HeaderSizeBytes","headerArrayUint16","Uint16Array","headerArrayUint32","Uint32Array","headerArrayFloat32","versionMajor","versionMinor","maxSectionCount","sectionCount","sceneCenter","writeHeaderCountsToBuffer","writeHeaderToBuffer","header","parseSectionHeaders","offset","CompressionLevels","bytesPerColor","sectionHeaderArrayUint16","SectionHeaderSizeBytes","sectionHeaderArrayUint32","sectionHeaderArrayFloat32","sectionHeaders","sectionHeaderBase","sectionHeaderBaseUint16","sectionHeaderBaseUint32","sectionBase","bucketCount","bucketBlockSize","halfBucketBlockSize","bucketStorageSizeBytes","partiallyFilledBucketCount","bucketsMetaDataSizeBytes","bucketsStorageSizeBytes","splatDataStorageSizeBytes","storageSizeBytes","sectionHeader","base","bucketsBase","dataBase","writeSectionHeaderToBuffer","sectionHeadeArrayUint16","sectionHeadeArrayUint32","sectionHeadeArrayFloat32","BucketStorageSizeBytes","writeSectionHeaderSplatCountToBuffer","globalSplatIndexToLocalSplatIndexMap","uint32PerSplat","linkBufferArrays","buildMaps","dataArrayUint32","cumulativeSplatCount","j","updateLoadedCounts","newSectionCount","newSplatCount","updateSectionLoadedCounts","sectionHeaderOffset","generateFromUncompressedSplatArrays","splatArrays","blockSize","options","sectionBuffers","sectionHeaderBuffers","totalSplatCount","tempRotation","sa","splatArray","sectionOptions","sectionBlockSize","blockSizeFactor","BucketBlockSize","sectionBucketSize","ceil","bucketSizeFactor","BucketSize","validSplats","targetSplat","OFFSET","bucketInfo","computeBucketsForUncompressedSplatArray","fullBuckets","partiallyFullBucketLengths","partiallyFullBuckets","map","bucket","buckets","sectionDataSizeBytes","bucketMetaDataSizeBytes","bucketDataBytes","sectionSizeBytes","sectionBuffer","ArrayBuffer","doubleCompressionScaleRange","bucketCenter","bucketCenterDelta","outSplatCount","fromArray","row","rot","RotationComponentCount","ScaleComponentCount","normalize","w","sub","round","rgba","Uint8ClampedArray","bucketMetaDataArray","pfb","sectionHeaderBuffer","sectionsCumulativeSizeBytes","byteLength","unifiedBufferSize","unifiedBuffer","currentUnifiedBase","halfBlockSize","dimensions","yBlocks","zBlocks","blockCenter","xBlock","yBlock","zBlock","bucketId","toArray","partiallyFullBucketArray","hasOwnProperty","HeaderMagicBytes","HeaderEndTokenBytes","HeaderEndToken","DataTypeMap","Map","Int8Array","Int16Array","Float64Array","unpackUnorm","bits","t","unpack111011","result","lerp","a","getElementPropStorage","element","name","properties","find","p","storage","CompressedPlyParser","decodeHeaderText","headerText","chunkElement","vertexElement","headerLines","split","filter","line","startsWith","words","count","has","StorageType","storageSizeByes","BYTES_PER_ELEMENT","type","byteSize","headerSizeBytes","indexOf","decodeHeader","plyBuffer","endHeaderTokenOffset","buf","search","endIndex","TextDecoder","decode","slice","readElementData","readBuffer","readOffset","fromIndex","toIndex","propertyFilter","dataView","DataView","e","property","requiredStorageSizeBytes","getInt8","getUint8","getInt16","getUint16","getInt32","getUint32","getFloat32","getFloat64","readPly","readIndex","getElementStorageArrays","minX","minY","minZ","maxX","maxY","maxZ","minScaleX","minScaleY","minScaleZ","positionExtremes","scaleExtremes","maxScaleX","maxScaleY","maxScaleZ","position","color","s","c","Vector4","chunkSplatIndexOffset","positionArray","scaleArray","rotationArray","colorArray","outSplat","chunkIndex","norm","sqrt","m","unpackRot","exp","parseToUncompressedSplatBufferSection","vertexDataBuffer","veretxReadOffset","outBuffer","outBytesPerCenter","outBytesPerScale","outBytesPerRotation","outBytesPerSplat","tempSplat","decompressSplat","outBase","parseToUncompressedSplatArray","identity","PlyParser","checkTextForEndHeader","endHeaderTestText","includes","checkBufferForEndHeader","searchOfset","chunkSize","decoder","endHeaderTestChunk","prunedLines","propertyTypes","compressed","trim","match","splatCountMatch","propertyMatch","propertyType","fieldOffsets","fieldSize","double","int","uint","float","short","ushort","uchar","fieldName","decodeHeadeFromBuffer","headerOffset","readChunkSize","headerChunk","findVertexData","readRawVertexFast","vertexData","propertiesToRead","outVertex","rawVertex","fromSplat","toSplat","vertexDataOffset","toBuffer","toOffset","parsedSplat","parseToUncompressedSplat","Fields","SH_C0","SplatPartitioner","sectionFilters","groupingParameters","partitionGenerator","partitionUncompressedSplatArray","results","newArrays","sectionSplats","sectionFilter","parameters","getStandardPartitioner","partitionSize","centerA","centerB","clampDistance","clampPoint","point","sort","centerADist","lengthSq","patitionCount","currentStartSplat","startSplat","splatIndex","blocksSize","SplatBufferGenerator","splatPartitioner","alphaRemovalThreshold","sectionSize","generateFromUncompressedSplatArray","partitionResults","getStandardGenerator","LoaderStatus","Constants","storeChunksInBuffer","inBytes","sizeBytes","PlyLoader","loadFromURL","fileName","streamLoadData","onStreamedSectionProgress","streamedSectionSizeBytes","StreamingSectionSize","splatDataOffsetBytes","streamBufferIn","streamBufferOut","streamedSplatBuffer","compressedPlyHeaderChunksBuffer","streamLoadCompleteResolver","headerLoaded","readyToLoadSplatData","streamLoadPromise","numBytesStreamed","numBytesParsed","numBytesDownloaded","textDecoder","chunkData","loadComplete","startBytes","endBytes","sizeRequiredForHeaderAndChunks","splatBufferSizeBytes","CurrentMajorVersion","CurrentMinorVersion","numBytesToProcess","addedSplatCount","numBytesToParse","numBytesLeftOver","parsedDataViewOffset","dataToParse","keepChunks","keepSize","unshift","plyFileData","loadFromFileData","splatBuffer","SplatParser","fromBuffer","fromOffset","inBase","RowSizeBytes","inCenter","inScale","CenterSizeBytes","inColor","ScaleSizeBytes","inRotation","RotationSizeBytes","quat","parseStandardSplatToUncompressedSplatArray","inBuffer","ColorSizeBytes","SplatLoader","optimizeSplatData","streamSectionSizeBytes","streamSplatBuffer","numBytesLoaded","percentStr","bytesLoadedSinceLastSection","fullBuffer","splatFileData","KSplatLoader","checkVersion","minVersionMajor","minVersionMinor","onSectionBuilt","streamBuffer","headerBuffer","sectionHeadersBuffer","headerLoading","sectionHeadersLoaded","sectionHeadersLoading","totalBytesToDownload","queuedCheckAndLoadSectionsCount","checkAndLoadSectionHeaders","performLoad","totalSectionStorageStorageByes","totalStorageSizeBytes","checkAndLoadSections","baseDataOffset","reachedSections","loadedSplatCount","bytesRequiredToReachSectionSplatData","bytesPastSSectionSplatDataStart","loadedSplatsForSection","fileData","downLoadLink","blob","document","createElement","appendChild","download","href","URL","createObjectURL","click","SceneFormat","Splat","KSplat","Ply","sceneFormatFromPath","endsWith","_changeEvent","_startEvent","_endEvent","_ray","Ray","_plane","Plane","TILT_LIMIT","cos","MathUtils","DEG2RAD","OrbitControls","EventDispatcher","object","domElement","style","touchAction","enabled","target","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","zoomToCursor","autoRotate","autoRotateSpeed","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","MOUSE","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TOUCH","TWO","DOLLY_PAN","target0","clone","position0","zoom0","zoom","_domElementKeyEvents","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","getDistance","distanceTo","listenToKeyEvents","addEventListener","onKeyDown","stopListenToKeyEvents","removeEventListener","saveState","scope","reset","clearDampedRotation","clearDampedPan","updateProjectionMatrix","dispatchEvent","update","state","STATE","NONE","sphericalDelta","panOffset","setFromUnitVectors","up","quatInverse","invert","lastPosition","lastQuaternion","lastTargetPosition","twoPI","applyQuaternion","setFromVector3","rotateLeft","isFinite","makeSafe","addScaledVector","add","performCursorZoom","isOrthographicCamera","radius","setFromSpherical","lookAt","multiplyScalar","zoomChanged","newRadius","isPerspectiveCamera","prevRadius","radiusDelta","dollyDirection","updateMatrixWorld","mouseBefore","mouse","unproject","mouseAfter","console","warn","transformDirection","matrix","origin","direction","abs","dot","setFromNormalAndCoplanarPoint","intersectPlane","distanceToSquared","EPS","quaternion","onContextMenu","onPointerDown","onPointerUp","onMouseWheel","onPointerMove","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","pointers","pointerPositions","getZoomScale","pow","angle","rotateUp","panLeft","v","distance","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","targetDistance","tan","fov","clientHeight","right","left","clientWidth","top","bottom","dollyOut","dollyScale","dollyIn","updateMouseParameters","event","rect","getBoundingClientRect","clientX","clientY","width","h","height","dist","handleMouseDownRotate","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","handleTouchMoveRotate","getSecondPointerPosition","subVectors","handleTouchMovePan","handleTouchMoveDolly","setPointerCapture","pointerId","addPointer","pointerType","trackPointer","DOLLY_ROTATE","onTouchStart","mouseAction","button","handleMouseDownDolly","ctrlKey","metaKey","shiftKey","onMouseDown","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","onTouchMove","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","splice","removePointer","releasePointerCapture","preventDefault","handleMouseWheel","needsUpdate","code","handleKeyDown","pointer","passive","LoadingSpinner","message","container","taskIDGen","elementID","elementIDGen","tasks","spinnerContainerOuter","className","display","spinnerContainerPrimary","spinnerPrimary","classList","messageContainerPrimary","innerHTML","spinnerContainerMin","spinnerMin","messageContainerMin","setMinimized","fadeTransitions","addTask","newTask","removeTask","task","removeAllTasks","setMessageForTask","show","setMessage","hide","visible","setContainer","removeChild","zIndex","minimized","instant","showHideSpinner","displayStyle","fadeTransitionsIndex","out","duration","onComplete","startTime","startOpacity","parseFloat","isNaN","interval","setInterval","elapsed","clearInterval","fadeElement","LoadingProgressBar","progressBarContainerOuter","progressBarBox","progressBarBackground","progressBar","setProgress","progress","InfoPanel","infoCells","layout","infoPanelContainer","append","infoPanel","infoTable","layoutEntry","labelCell","spacerCell","infoCell","renderDimensions","cameraPosition","cameraLookAtPosition","cameraUp","orthographicCamera","meshCursorPosition","currentFPS","splatRenderCount","splatRenderCountPct","lastSortTime","focalAdjustment","splatScale","pointCloudMode","cameraPosString","cla","cameraLookAtString","cameraLookAt","cameraUpString","cursPos","cursorPosString","cursorPosition","fps","renderWindow","renderSplatCount","sortTime","ArrowHelper","Object3D","dir","headLength","headRadius","lineGeometry","CylinderGeometry","translate","coneGeometry","Mesh","MeshBasicMaterial","toneMapped","matrixAutoUpdate","cone","setDirection","_axis","radians","acos","setFromAxisAngle","setColor","source","SceneHelper","threeScene","splatRenderTarget","renderTargetCopyQuad","renderTargetCopyCamera","meshCursor","focusMarker","controlPlane","debugRoot","secondaryDebugRoot","updateSplatRenderTargetForRenderDimensions","destroySplatRendertarget","WebGLRenderTarget","format","RGBAFormat","stencilBuffer","depthBuffer","depthTexture","DepthTexture","DepthFormat","UnsignedIntType","setupRenderTargetCopyObjects","renderTargetCopyMaterial","ShaderMaterial","vertexShader","fragmentShader","uniforms","sourceColorTexture","sourceDepthTexture","depthWrite","depthTest","transparent","blending","CustomBlending","blendSrc","SrcAlphaFactor","blendSrcAlpha","blendDst","OneMinusSrcAlphaFactor","blendDstAlpha","extensions","fragDepth","PlaneGeometry","OrthographicCamera","destroyRenderTargetCopyObjects","setupMeshCursor","ConeGeometry","coneMaterial","downArrow","upArrow","leftArrow","rightArrow","destroyMeshCursor","remove","setMeshCursorVisibility","getMeschCursorVisibility","setMeshCursorPosition","positionAndOrientMeshCursor","camera","setupFocusMarker","sphereGeometry","SphereGeometry","focusMarkerMaterial","buildFocusMarkerMaterial","destroyFocusMarker","updateFocusMarker","toCamera","viewport","matrixWorld","toCameraDistance","realFocusPosition","uniformsNeedUpdate","setFocusMarkerVisibility","setFocusMarkerOpacity","getFocusMarkerOpacity","setupControlPlane","planeGeometry","rotateX","planeMaterial","side","DoubleSide","planeMesh","arrowDir","arrowOrigin","arrowHelper","destroyControlPlane","setControlPlaneVisibility","positionAndOrientControlPlane","tempQuaternion","defaultUp","addDebugMeshes","createDebugMeshes","createSecondaryDebugMeshes","destroyDebugMeshes","renderOrder","debugMeshRoot","createMesh","sphereMesh","buildDebugMaterial","boxGeometry","BoxGeometry","boxMesh","separation","Color","FrontSide","VectorRight","VectorUp","VectorBackward","setParameters","boxContainsPoint","box","epsilon","intersectBox","planeIntersectionPoint","planeIntersectionPointArray","originArray","directionArray","outHit","normal","hitNormal","extremeVec","multiplier","sign","toSide","idx1","idx2","intersectSphere","toSphereCenterVec","toClosestApproach","toClosestApproachSq","diffSq","radiusSq","thc","t0","t1","Hit","hitClone","Raycaster","raycastAgainstTrueSplatEllipsoid","ray","setFromCameraAndScreenPosition","ndcCoords","screenPosition","screenDimensions","setFromMatrixPosition","near","far","intersectSplatMesh","toLocal","fromLocal","sceneTransform","localRay","tempPoint","splatMesh","outHits","splatTree","getSplatTree","subTrees","subTree","dynamicMode","getSceneTransform","outHitsForSubTree","rootNode","castRayAtSplatTreeNode","forEach","hit","tempColor","tempCenter","tempScale","tempHit","scaleEpsilon","uniformScaleMatrix","toSphereSpace","fromSphereSpace","tempRay","node","boundingBox","indexes","splatGlobalIndex","uniformScale","log10","SplatScene","updateTransform","copyTransformData","otherScene","compose","SplatTreeNode","depth","Box3","SplatSubTree","maxDepth","maxCentersPerNode","sceneDimensions","sceneMin","sceneMax","nodesWithIndexes","convertWorkerSubTreeNode","workerSubTreeNode","minVector","maxVector","convertedNode","convertWorkerSubTree","workerSubTree","convertedSubTree","visitLeavesFromNode","visitFunc","createSplatTreeWorker","self","WorkerSplatTreeNodeIDGen","WorkerBox3","containsPoint","WorkerSplatSubTree","addedIndexes","disposed","WorkerSplatTreeNode","processSplatTreeNode","tree","indexToCenter","sceneCenters","newIndexes","nodeDimensions","halfDimensions","nodeCenter","childrenBounds","splatCounts","baseIndexes","childNode","buildSubTree","centerCount","onmessage","process","allCenters","postMessage","createSplatTree","centers","SplatTree","diposeSplatTreeWorker","splatTreeWorker","terminate","processSplatMesh","filterFunc","onIndexesUpload","onSplatTreeConstruction","Worker","toString","addCentersForScene","splatOffset","addedCount","addBase","checkForEarlyExit","scenes","getScene","transferBuffers","array","workerProcessCenters","countLeaves","leafCount","visitLeaves","WebGLExtensions","gl","getExtension","extension","init","capabilities","isWebGL2","WebGLCapabilities","maxAnisotropy","getMaxPrecision","precision","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","WebGL2RenderingContext","maxPrecision","drawBuffers","logarithmicDepthBuffer","maxTextures","getParameter","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","floatVertexTextures","maxSamples","MAX_SAMPLES","SceneRevealMode","Default","Gradual","Instant","LogLevel","None","Warning","Info","Debug","dummyGeometry","BufferGeometry","dummyMaterial","SplatMesh","halfPrecisionCovariancesOnGPU","devicePixelRatio","enableDistancesComputationOnGPU","integerBasedDistancesComputation","antialiased","maxScreenSpaceSplatSize","logLevel","renderer","baseSplatTree","splatDataTextures","distancesTransformFeedback","program","centersBuffer","transformIndexesBuffer","outDistancesBuffer","centersLoc","modelViewProjLoc","transformIndexesLoc","transformsLocs","globalSplatIndexToSceneIndexMap","lastBuildSplatCount","lastBuildScenes","lastBuildMaxSplatCount","lastBuildSceneCount","firstRenderTime","finalBuild","webGLUtils","calculatedSceneCenter","maxSplatDistanceFromSceneCenter","visibleRegionBufferRadius","visibleRegionRadius","visibleRegionFadeStartRadius","visibleRegionChanging","pointCloudModeEnabled","lastRenderer","buildMaterial","vertexShaderSource","MaxScenes","fadeInComplete","orthographicMode","currentTime","covariancesTexture","centersColorsTexture","focal","orthoZoom","inverseFocalAdjustment","basisViewport","debugColor","covariancesTextureSize","centersColorsTextureSize","transformMatrices","alphaTest","NormalBlending","buildGeomtery","baseGeometry","setIndex","positionsArray","positions","BufferAttribute","setAttribute","setXYZ","InstancedBufferGeometry","splatIndexArray","splatIndexes","InstancedBufferAttribute","setUsage","DynamicDrawUsage","instanceCount","buildScenes","splatBuffers","sceneOptions","createScene","splatAlphaRemovalThreshold","buildSplatIndexMaps","localSplatIndexMap","sceneIndexMap","buildSplatTree","minAlphas","onSplatTreeIndexesUpload","disposeSplatTree","buildStartTime","splatColor","sceneIndex","getSceneIndexForSplat","minAlpha","buildTime","log","leavesWithVertices","avgSplatCount","nodeCount","nodeSplatCount","build","keepSceneTransforms","getTotalMaxSplatCountForSplatBuffers","newScenes","newScene","existingScene","splatBuffersChanged","isUpdateBuild","disposeMeshData","indexMaps","setupDistancesComputationTransformFeedback","dataUpdateResults","refreshGPUDataFromSplatBuffers","onSplatTreeReadyCallback","disposeTextures","computeDistancesOnGPUSyncTimeout","clearTimeout","disposeDistancesComputationGPUResources","textureKey","textureContainer","texture","onSplatTreeReady","callback","getDataForDistancesComputation","start","end","getIntegerCenters","getFloatCenters","sceneIndexes","getSceneIndexes","sinceLastBuildOnly","refreshDataTexturesFromSplatBuffers","updateStart","refreshGPUBuffersForDistancesComputation","from","to","updateGPUCentersBufferForDistancesComputation","updateGPUTransformIndexesBufferForDistancesComputation","updateDataTextures","setupDataTextures","updateVisibleRegion","computeDataTextureSize","elementsPerTexel","elementsPerSplatl","texSize","covariances","colors","fillSplatDataArrays","covTexSize","CovariancesDataType","covariancesTextureType","HalfFloatType","FloatType","paddedCovariances","covTex","DataTexture","RGFormat","centersColsTexSize","paddedCentersCols","updateCenterColorsPaddedData","centersColsTex","RGBAIntegerFormat","internalFormat","baseData","size","centerColors","transformIndexesTexSize","paddedTransformIndexes","transformIndexesTexture","RedIntegerFormat","transformIndexesTextureSize","covariancesTextureDescriptor","covariancesEndSplat","covariance","covariancesTextureProps","__webglTexture","covaranceBytesPerElement","updateDataTexture","centerColorsTextureDescriptor","paddedCenterColors","centerColorsTexture","centerColorsTextureProps","transformIndexesTexDesc","paddedTransformIndexesTexture","transformIndexesTextureProps","computeTextureUpdateRegion","endSplat","textureWidth","elementsPerSplat","texelsPerSplat","startSplatTexels","startRow","startRowElement","endSplatTexels","endRow","dataStart","dataEnd","paddedData","textureDesc","textureProps","bytesPerElement","getContext","updateRegion","updateElementCount","updateDataView","updateHeight","dataTexture","glType","convert","glFormat","colorSpace","currentTexture","TEXTURE_BINDING_2D","bindTexture","TEXTURE_2D","texSubImage2D","colorsBase","centersBase","centerColorsBase","arr","avgCenter","scene","distFromCSceneCenter","updateVisibleRegionFadeDistance","sceneRevealMode","defaultFadeInRate","fadeInRate","shaderFadeInComplete","updateRenderIndexes","globalIndexes","attributes","updateTransforms","updateUniforms","cameraFocalLengthX","cameraFocalLengthY","orthographicZoom","transforms","setSplatScale","getSplatScale","setPointCloudModeEnabled","getPointCloudModeEnabled","getSplatDataTextures","getTotalSplatCountForScenes","getTotalSplatCountForSplatBuffers","getTotalMaxSplatCountForScenes","vao","deleteVertexArray","deleteProgram","deleteShader","disposeDistancesComputationGPUBufferResources","deleteTransformFeedback","deleteBuffer","setRenderer","WebGLUtils","currentMaxSplatCount","rebuildGPUObjects","rebuildBuffers","createShader","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","typeName","errors","getShaderInfoLog","vsSource","currentVao","VERTEX_ARRAY_BINDING","currentProgram","CURRENT_PROGRAM","currentProgramDeleted","getProgramParameter","DELETE_STATUS","createVertexArray","bindVertexArray","createProgram","attachShader","transformFeedbackVaryings","SEPARATE_ATTRIBS","linkProgram","LINK_STATUS","getProgramInfoLog","useProgram","getAttribLocation","getUniformLocation","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribIPointer","INT","vertexAttribPointer","FLOAT","UNSIGNED_INT","STATIC_READ","createTransformFeedback","bindTransformFeedback","TRANSFORM_FEEDBACK","bindBufferBase","TRANSFORM_FEEDBACK_BUFFER","isUpdate","offsetSplats","ArrayType","subBufferOffset","bufferSubData","maxArray","STATIC_DRAW","transformIndexes","fillTransformsArray","tempArray","sceneTransformElements","computeDistancesOnGPU","modelViewProjMatrix","outComputedDistances","enable","RASTERIZER_DISCARD","iTempMatrix","getIntegerMatrixArray","iTransform","uniform4i","uniformMatrix4fv","iViewProjMatrix","iViewProj","uniform3i","viewProj","uniform3f","beginTransformFeedback","POINTS","drawArrays","endTransformFeedback","disable","sync","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","checkSync","timeout","bitflags","clientWaitSync","TIMEOUT_EXPIRED","WAIT_FAILED","deleteSync","getBufferSubData","getLocalSplatParameters","globalIndex","paramsObj","returnSceneTransform","getSplatBufferForSplat","localIndex","getSplatLocalIndex","getSceneTransformForSplat","applySceneTransform","srcStart","srcEnd","destStart","padFour","floatCenters","intCenters","componentCount","paddedFloatCenters","outTransform","matrixElements","intMatrixArray","sortWorker","wasmInstance","wasmMemory","useSharedMemory","integerBasedSort","indexesToSortOffset","sortedIndexesOffset","transformIndexesOffset","transformsOffset","precomputedDistancesOffset","mappedDistancesOffset","frequenciesOffset","centersOffset","modelViewProjOffset","countsZero","sortedIndexesOut","range","BytesPerInt","BytesPerFloat","centerDataSet","renderCount","sortCount","splatSortCount","usePrecomputedDistances","copyIndexesToSort","copyPrecomputedDistances","copyTransforms","indexesToSort","precomputedDistances","modelViewProj","sortStartTime","DepthMapRange","exports","sortIndexes","sortMessage","sortDone","sortedIndexes","sortEndTime","CENTERS_BYTES_PER_ENTRY","sorterWasmBytes","matrixSize","memoryRequiredForIndexesToSort","memoryRequiredForCenters","memoryRequiredForModelViewProjectionMatrix","memoryRequiredForPrecomputedDistances","memoryRequiredForMappedDistances","memoryRequiredForSortedIndexes","memoryRequiredForIntermediateSortBuffers","memoryRequiredforTransformIndexes","memoryRequiredforTransforms","extraMemory","MemoryPageSize","totalRequiredMemory","totalPagesRequired","sorterWasmImport","module","env","memory","WebAssembly","Memory","initial","maximum","shared","compile","wasmModule","instantiate","instance","sortSetupPhase1Complete","indexesToSortBuffer","sortedIndexesBuffer","precomputedDistancesBuffer","transformsBuffer","WebXRMode","VR","AR","VRButton","createButton","disableButton","cursor","onmouseenter","onmouseleave","onclick","stylizeElement","padding","border","borderRadius","background","font","textAlign","outline","navigator","xr","isSessionSupported","supported","currentSession","onSessionStarted","session","onSessionEnded","setSession","textContent","sessionInit","optionalFeatures","requestSession","offerSession","err","showEnterVR","xrSessionIsGranted","exception","isSecureContext","location","replace","textDecoration","registerSessionGrantedListener","test","userAgent","ARButton","domOverlay","overlay","svg","createElementNS","root","setReferenceSpaceType","showStartAR","RenderMode","Always","OnChange","Never","Viewer","initialCameraPosition","initialCameraLookAt","dropInMode","selfDrivenMode","selfDrivenUpdateFunc","selfDrivenUpdate","useBuiltInControls","rootElement","ignoreDevicePixelRatio","gpuAcceleratedSort","sharedMemoryForWorkers","dynamicScene","webXRMode","webXRActive","renderMode","createSplatMesh","controls","perspectiveControls","orthographicControls","perspectiveCamera","showMeshCursor","showControlPlane","showInfo","sceneHelper","sortRunning","sortWorkerIndexesToSort","sortWorkerSortedIndexes","sortWorkerPrecomputedDistances","sortWorkerTransforms","runAfterFirstSort","selfDrivenModeRunning","splatRenderReady","raycaster","startInOrthographicMode","consecutiveRenderFrames","previousCameraTarget","nextCameraTarget","mousePosition","mouseDownPosition","mouseDownTime","resizeObserver","mouseMoveListener","mouseDownListener","mouseUpListener","keyDownListener","sortPromise","sortPromiseResolver","splatSceneDownloadPromises","splatSceneDownloadAndBuildPromise","splatSceneRemovalPromise","loadingSpinner","loadingProgressBar","usingExternalCamera","usingExternalRenderer","initialized","disposing","frustumCulled","parentElement","setupCamera","setupRenderer","setupWebXR","setupControls","setupEventHandlers","Scene","getRenderDimensions","PerspectiveCamera","WebGLRenderer","antialias","setPixelRatio","autoClear","setClearColor","setSize","ResizeObserver","forceRenderNextFrame","observe","onMouseUp","removeEventHandlers","setRenderMode","forward","tempMatrixLeft","tempMatrixRight","makeRotationAxis","setOrthographicMode","offsetX","offsetY","clickOffset","onMouseClick","checkForFocalPointChange","toNewFocalPoint","transitioningCameraTarget","intersectionPoint","transitioningCameraTargetStartTime","outDimensions","offsetWidth","offsetHeight","getSize","fromCamera","resetControls","fromControls","toControls","setCameraZoomFromPosition","setCameraPositionFromZoom","tempVector","positionCamera","zoomedCamera","toLookAtDistance","negate","zoomCamera","positionZamera","updateSplatMesh","focalLengthX","projectionMatrix","focalLengthY","focalMultiplier","adjustForWebXRStereo","xrCameraProj00","getCamera","cameraProj00","isLoadingOrUnloading","Object","isDisposingOrDisposed","addSplatSceneDownloadPromise","removeSplatSceneDownloadPromise","setSplatSceneDownloadAndBuildPromise","clearSplatSceneDownloadAndBuildPromise","addSplatScene","streamBuildSections","isStreamable","streamView","showLoadingUI","loadingUITaskId","onProgressUIUpdate","percentComplete","percentCompleteLabel","loaderStatus","suffix","downloadDone","downloadedPercentage","splatBuffersAddedUIUpdate","firstBuild","downloadAndBuildSingleSplatSceneStreaming","downloadAndBuildSingleSplatSceneNonStreaming","addSplatBufferOptions","orientation","addSplatBuffers","buildFunc","onException","downloadPromise","downloadSplatSceneToSplatBuffer","onDownloadProgress","onDownloadException","firstStreamedSectionDownloadAndBuildResolver","firstStreamedSectionDownloadAndBuildRejecter","splatSceneDownloadAndBuildResolver","splatSceneDownloadAndBuildRejecter","steamedSectionBuildCount","streamedSectionBuilding","queuedStreamedSectionBuilds","checkAndBuildStreamedSections","queuedBuild","shift","splatSceneDownloadPromise","firstStreamedSectionBuildPromise","resolver","rejecter","addSplatScenes","fileCount","onLoadProgress","fileIndex","totalPercent","downloadPromises","nativeLoadPromises","abortHandlers","all","finally","streamBuiltSections","splatBufferOptions","showLoadingUIForSplatTreeBuild","splatProcessingTaskId","finish","buildResults","sortNeededForSceneChange","addSplatBuffersToMesh","disposeSortWorker","setupSortWorker","allSplatBuffers","allSplatBufferOptions","splatOptimizingTaskId","finished","DistancesArrayType","worker","sorterWasmBinaryString","atob","charCodeAt","createSortWorker","sortCanceled","removeSplatScene","revmovalTaskId","checkAndHideLoadingUI","onDone","savedSplatBuffers","savedSceneOptions","savedSceneTransformComponents","savedVisibleRegionFadeStartRadius","updateSplatSort","setAnimationLoop","requestFrameId","requestAnimationFrame","stop","cancelAnimationFrame","waitPromises","promisesToAbort","promiseKey","downloadPromiseToAbort","disposePromise","unobserve","toAbort","shouldRender","render","renderNextFrame","lastCameraPosition","lastCameraOrientation","changeEpsilon","cameraChanged","cp","co","savedAuoClear","hasRenderables","updateForDropInMode","updateForRendererSizeChanges","updateMeshCursor","updateFPS","timingSensitiveUpdates","updateInfoPanel","updateControlPlane","lastCalcTime","frameCount","lastRendererSize","currentRendererSize","lastCameraOrthographic","aspect","lastUpdateTime","timeDelta","updateCameraTransition","tempCameraTarget","toPreviousTarget","toNextTarget","rotationAngle","wasTransitioning","currentFocusMarkerOpacity","newFocusMarkerOpacity","mvpMatrix","cameraPositionArray","lastSortViewDir","sortViewDir","lastSortViewPos","sortViewOffset","queuedSorts","partialSorts","angleThreshold","sortFractions","force","angleDiff","positionDiff","needsRefreshForRotation","needsRefreshForPosition","shouldSortAll","gatherSceneNodesForSort","mvpCamera","partialSort","sortFraction","nodeRenderList","allSplatsSortBuffer","tempVectorYZ","tempVectorXZ","modelView","baseModelView","tempMax","nodeSize","gatherAllNodes","cameraFocalLength","fovXOver2","atan","fovYOver2","cosFovXOver2","cosFovYOver2","nodeRenderCount","distanceToNode","setX","setY","cameraAngleXZDot","cameraAngleYZDot","ns","currentByteOffset","windowSizeInts","windowSizeBytes","getSplatMesh","getSplatScene","isMobile","DropInViewer","Group","viewer","callbackMesh","createCallbackMesh","onBeforeRender","colorWrite","mesh"],"mappings":"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"}